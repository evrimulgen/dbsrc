CREATE USER "WMSYS" IDENTIFIED BY VALUES 'S:A258941E5A8D3EC38C0365D6C722A5E445A39144C6AE00B39FEA2DDD7EAB;H:C15EE9C2CF14D94479FA2D434F78FDE1;T:C82235ECF25C219B07DA6E2AB7EBEBCB56530EB7FAFE8989A8F739BD7945037CD86213E0DAB7F9A3158648625E3062D8438B9AB9A518614CA97F1E45184716CFB4B6562C848102A41F43259AF89B52AF;7C9BA362F8314299'
      DEFAULT TABLESPACE "SYSAUX"
      TEMPORARY TABLESPACE "TEMP"
      PASSWORD EXPIRE
      ACCOUNT LOCK;

ALTER USER "WMSYS" DEFAULT ROLE ALL;
CREATE SEQUENCE  "WMSYS"."WM$UP_DEL_TRIG_NAME_SEQUENCE"  MINVALUE -1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE  NOPARTITION ;
CREATE SEQUENCE  "WMSYS"."WM$LOCK_SEQUENCE"  MINVALUE -1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 2 START WITH 2 NOCACHE  NOORDER  NOCYCLE  NOPARTITION ;
CREATE SEQUENCE  "WMSYS"."WM$VTID"  MINVALUE -1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE  NOPARTITION ;
CREATE SEQUENCE  "WMSYS"."WM$VERSION_SEQUENCE"  MINVALUE -1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE  NOPARTITION ;
CREATE SEQUENCE  "WMSYS"."WM$UDTRIG_DISPATCHER_SEQUENCE"  MINVALUE -1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE  NOPARTITION ;
CREATE SEQUENCE  "WMSYS"."AQ$_WM$EVENT_QUEUE_TABLE_N"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOPARTITION ;
CREATE OR REPLACE NONEDITIONABLE TYPE "WMSYS"."WM$ED_UNDO_CODE_NODE_TYPE"
         as object (index_type   integer,
                    index_field  integer,
                    sql_str      clob)
/

CREATE OR REPLACE NONEDITIONABLE TYPE "WMSYS"."WM$LOCK_INFO_TYPE"
      as object (table_owner  varchar2(128),
                 table_name   varchar2(128),
                 info         varchar2(100))
/

CREATE OR REPLACE NONEDITIONABLE TYPE "WMSYS"."WM$NEXTVER_EXP_TYPE"
         as object (next_vers  integer,
                    orig_nv    varchar2(500),
                    rid        varchar2(100))
/

CREATE OR REPLACE NONEDITIONABLE TYPE "WMSYS"."WM$NV_PAIR_TYPE"
         as object (name   varchar2(100),
                    value  clob)
/

CREATE OR REPLACE NONEDITIONABLE TYPE "WMSYS"."WM$OPER_LOCKVALUES_TYPE"
         as object (parValue    integer,
                    curValue    integer,
                    interValue  integer)
/

CREATE OR REPLACE NONEDITIONABLE TYPE "WMSYS"."WM$IDENT_TAB_TYPE" as table of varchar2(128)
/

CREATE OR REPLACE NONEDITIONABLE TYPE "WMSYS"."WM_PERIOD"
         as object (validfrom timestamp with time zone,
                    validtill timestamp with time zone)
 alter type       "WMSYS"."WM_PERIOD" add MAP member function wm_period_map return varchar2 cascade
/

CREATE OR REPLACE NONEDITIONABLE TYPE "WMSYS"."WM$EXP_MAP_TYPE"
         as object (code     integer,
                    nfield1  number,
                    nfield2  number,
                    nfield3  number,
                    vfield1  varchar2(128),
                    vfield2  varchar2(128),
                    vfield3  clob)
/

CREATE OR REPLACE NONEDITIONABLE TYPE "WMSYS"."WM$ED_UNDO_CODE_TABLE_TYPE"
         as table of wmsys.wm$ed_undo_code_node_type
/

CREATE OR REPLACE NONEDITIONABLE TYPE "WMSYS"."WM$LOCK_TABLE_TYPE"
        as table of wmsys.wm$lock_info_type
/

CREATE OR REPLACE NONEDITIONABLE TYPE "WMSYS"."WM$NEXTVER_EXP_TAB_TYPE" as table of wmsys.wm$nextver_exp_type
/

CREATE OR REPLACE NONEDITIONABLE TYPE "WMSYS"."WM$NV_PAIR_NT_TYPE"
        as table of WMSYS.WM$NV_PAIR_TYPE
/

CREATE OR REPLACE NONEDITIONABLE TYPE "WMSYS"."WM$OPER_LOCKVALUES_ARRAY_TYPE" as varray(50) of wmsys.wm$oper_lockvalues_type
/

CREATE OR REPLACE NONEDITIONABLE TYPE "WMSYS"."WM$EXP_MAP_TAB" as table of wmsys.wm$exp_map_type
/

CREATE OR REPLACE NONEDITIONABLE TYPE "WMSYS"."WM$EVENT_TYPE"
         as object (event_name             varchar2(128),
                    workspace_name         varchar2(128),
                    parent_workspace_name  varchar2(128),
                    user_name              varchar2(128),
                    table_name             varchar2(128),
                    aux_params             wmsys.wm$nv_pair_nt_type)
/

GRANT EXECUTE ON "WMSYS"."WM$NV_PAIR_TYPE" TO PUBLIC;
GRANT EXECUTE ON "WMSYS"."WM_PERIOD" TO PUBLIC;
GRANT EXECUTE ON "WMSYS"."WM$EVENT_TYPE" TO PUBLIC;
GRANT EXECUTE ON "WMSYS"."WM$NV_PAIR_NT_TYPE" TO PUBLIC;
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "WMSYS"."WM_PERIOD" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
db ef
IQMBRbtfSUi1VSiJ59958/Z/MQIwgxDwa8sVfI7ps/gYwUVsFnZY/IN4FpMFQ4F5aVwdDC82
rK+KhpOEfOfiU+pubnFKAOaGMkaxYgDRch5zdBuOpiszcLPfWlDL3C0Iy0rfgVrUHok+qChd
cIkaM/HfLDuvkFLZFR8DroicqEBGSRsmV7LYl8yfYMRdeQ05Uuet66CUlEeC45NdOgrCKUUP
DYdKsylFhQ0jHdFt2m4=
/

CREATE TABLE "WMSYS"."AQ$_WM$EVENT_QUEUE_TABLE_T"
   (	"NEXT_DATE" TIMESTAMP (6),
	"TXN_ID" VARCHAR2(30),
	"MSGID" RAW(16),
	"ACTION" NUMBER,
	 PRIMARY KEY ("NEXT_DATE", "TXN_ID", "MSGID") ENABLE
   ) USAGE QUEUE ORGANIZATION INDEX NOCOMPRESS ;

CREATE TABLE "WMSYS"."AQ$_WM$EVENT_QUEUE_TABLE_H"
   (	"MSGID" RAW(16),
	"SUBSCRIBER#" NUMBER,
	"NAME" VARCHAR2(30),
	"ADDRESS#" NUMBER,
	"DEQUEUE_TIME" TIMESTAMP (6),
	"TRANSACTION_ID" VARCHAR2(30),
	"DEQUEUE_USER" VARCHAR2(30),
	"PROPAGATED_MSGID" RAW(16),
	"RETRY_COUNT" NUMBER,
	"HINT" ROWID,
	"SPARE" RAW(16),
	 PRIMARY KEY ("MSGID", "SUBSCRIBER#", "NAME", "ADDRESS#") ENABLE
   ) USAGE QUEUE ORGANIZATION INDEX NOCOMPRESS ;

CREATE TABLE "WMSYS"."AQ$_WM$EVENT_QUEUE_TABLE_G"
   (	"MSGID" RAW(16),
	"SUBSCRIBER#" NUMBER,
	"NAME" VARCHAR2(30),
	"ADDRESS#" NUMBER,
	"SIGN" "SYS"."AQ$_SIG_PROP" ,
	"DBS_SIGN" "SYS"."AQ$_SIG_PROP" ,
	 PRIMARY KEY ("MSGID", "SUBSCRIBER#", "NAME", "ADDRESS#") ENABLE
   ) USAGE QUEUE ORGANIZATION INDEX NOCOMPRESS  INCLUDING "SIGN" OVERFLOW;

CREATE TABLE "WMSYS"."AQ$_WM$EVENT_QUEUE_TABLE_I"
   (	"SUBSCRIBER#" NUMBER,
	"NAME" VARCHAR2(30),
	"QUEUE#" NUMBER,
	"MSG_ENQ_TIME" TIMESTAMP (6),
	"MSG_STEP_NO" NUMBER,
	"MSG_CHAIN_NO" NUMBER,
	"MSG_LOCAL_ORDER_NO" NUMBER,
	"MSGID" RAW(16),
	"HINT" ROWID,
	"SPARE" RAW(16),
	 PRIMARY KEY ("SUBSCRIBER#", "NAME", "QUEUE#", "MSG_ENQ_TIME", "MSG_STEP_NO", "MSG_CHAIN_NO", "MSG_LOCAL_ORDER_NO", "MSGID") ENABLE
   ) USAGE QUEUE ORGANIZATION INDEX NOCOMPRESS ;

CREATE TABLE "WMSYS"."WM$WORKSPACES_TABLE$"
   (	"WORKSPACE" VARCHAR2(128),
	"PARENT_WORKSPACE#" NUMBER(*,0),
	"CURRENT_VERSION" NUMBER,
	"PARENT_VERSION" NUMBER,
	"POST_VERSION" NUMBER,
	"OWNER" VARCHAR2(128),
	"CREATETIME" TIMESTAMP (6) WITH TIME ZONE,
	"DESCRIPTION" VARCHAR2(1000),
	"WORKSPACE_LOCK_ID" NUMBER(*,0),
	"FREEZE_WRITER" VARCHAR2(128),
	"FREEZE_OWNER" VARCHAR2(128),
	"IMPLICIT_SP_CNT" NUMBER(*,0) DEFAULT null,
	"SYNC_PARVER" NUMBER(*,0),
	"LAST_CHANGE" TIMESTAMP (6) WITH TIME ZONE DEFAULT null,
	"DEPTH" NUMBER(*,0),
	"MP_ROOT" VARCHAR2(128) DEFAULT null,
	"WM$FLAG" NUMBER(*,0)
   ) ;

CREATE TABLE "WMSYS"."WM$BATCH_COMPRESSIBLE_TABLES$"
   (	"WORKSPACE#" NUMBER(*,0),
	"VTID#" NUMBER(*,0),
	"BEGIN_VERSION" NUMBER(*,0),
	"END_VERSION" NUMBER(*,0),
	"WHERE_CLAUSE" VARCHAR2(4000)
   ) ;

CREATE TABLE "WMSYS"."WM$CONS_COLUMNS$"
   (	"VTID#" NUMBER(*,0),
	"CONSTRAINT_NAME" VARCHAR2(128),
	"COLUMN_NAME" VARCHAR2(4000),
	"POSITION" NUMBER
   ) ;

CREATE TABLE "WMSYS"."WM$ENV_VARS$"
   (	"NAME" VARCHAR2(128),
	"VALUE" VARCHAR2(4000),
	"WM$FLAG" NUMBER(*,0)
   ) ;

CREATE TABLE "WMSYS"."WM$EVENTS_INFO$"
   (	"EVENT_NAME" VARCHAR2(128),
	"WM$FLAG" NUMBER(*,0)
   ) ;

CREATE TABLE "WMSYS"."WM$HASH_TABLE$"
   (	"HASH" NUMBER(*,0)
   ) ;

CREATE TABLE "WMSYS"."WM$HINT_TABLE$"
   (	"HINT_ID" NUMBER(*,0),
	"VTID#" NUMBER(*,0),
	"HINT_TEXT" VARCHAR2(4000),
	"WM$FLAG" NUMBER(*,0)
   ) ;

CREATE TABLE "WMSYS"."WM$MODIFIED_TABLES$"
   (	"VTID#" NUMBER(*,0),
	"VERSION" NUMBER(*,0),
	"WORKSPACE#" NUMBER(*,0)
   ) ;

CREATE TABLE "WMSYS"."WM$MP_GRAPH_WORKSPACES_TABLE$"
   (	"MP_LEAF_WORKSPACE#" NUMBER(*,0),
	"MP_GRAPH_WORKSPACE#" NUMBER(*,0),
	"ANC_VERSION" NUMBER(*,0),
	"WM$FLAG" NUMBER(*,0)
   ) ;

CREATE TABLE "WMSYS"."WM$MP_PARENT_WORKSPACES_TABLE$"
   (	"WORKSPACE#" NUMBER(*,0),
	"PARENT_WORKSPACE#" NUMBER(*,0),
	"PARENT_VERSION" NUMBER(*,0),
	"CREATOR" VARCHAR2(128),
	"CREATETIME" TIMESTAMP (6) WITH TIME ZONE,
	"WM$FLAG" NUMBER(*,0)
   ) ;

CREATE TABLE "WMSYS"."WM$NESTED_COLUMNS_TABLE$"
   (	"VTID#" NUMBER(*,0),
	"COLUMN_NAME" VARCHAR2(128),
	"POSITION" NUMBER(*,0),
	"TYPE_OWNER" VARCHAR2(128),
	"TYPE_NAME" VARCHAR2(128),
	"NT_OWNER" VARCHAR2(128),
	"NT_NAME" VARCHAR2(128),
	"NT_STORE" VARCHAR2(128)
   ) ;

CREATE TABLE "WMSYS"."WM$NEXTVER_TABLE$"
   (	"VERSION" NUMBER(*,0),
	"WORKSPACE#" NUMBER(*,0),
	"NEXT_VERS" VARCHAR2(500),
	"SPLIT" VARCHAR2(1)
   ) ;

CREATE TABLE "WMSYS"."WM$REMOVED_WORKSPACES_TABLE$"
   (	"OWNER" VARCHAR2(128),
	"WORKSPACE_NAME" VARCHAR2(128),
	"WORKSPACE_ID" NUMBER(*,0),
	"PARENT_WORKSPACE_ID" NUMBER(*,0),
	"CREATETIME" TIMESTAMP (6) WITH TIME ZONE,
	"RETIRETIME" TIMESTAMP (6) WITH TIME ZONE,
	"DESCRIPTION" VARCHAR2(1000),
	"MP_ROOT_ID" NUMBER(*,0),
	"WM$FLAG" NUMBER(*,0)
   ) ;

CREATE TABLE "WMSYS"."WM$REPLICATION_DETAILS_TABLE$"
   (	"NAME" VARCHAR2(128),
	"VALUE" VARCHAR2(500)
   ) ;

CREATE TABLE "WMSYS"."WM$REPLICATION_TABLE$"
   (	"GROUPNAME" VARCHAR2(128),
	"MASTERDEFSITE" VARCHAR2(128),
	"OLDMASTERDEFSITES" VARCHAR2(4000),
	"WM$FLAG" NUMBER(*,0)
   ) ;

CREATE TABLE "WMSYS"."WM$RESOLVE_WORKSPACES_TABLE$"
   (	"WORKSPACE#" NUMBER(*,0),
	"RESOLVE_USER" VARCHAR2(128),
	"UNDO_SP#" NUMBER(*,0),
	"OLDFREEZEWRITER" VARCHAR2(128),
	"WM$FLAG" NUMBER(*,0)
   ) ;

CREATE TABLE "WMSYS"."WM$RIC_LOCKING_TABLE$"
   (	"PT_VTID#" NUMBER(*,0),
	"SLOCKNO" NUMBER(*,0),
	"ELOCKNO" NUMBER(*,0)
   ) ;

CREATE TABLE "WMSYS"."WM$RIC_TABLE$"
   (	"CT_VTID#" NUMBER(*,0),
	"PT_VTID#" NUMBER(*,0),
	"RIC_NAME" VARCHAR2(128),
	"CT_COLS" VARCHAR2(4000),
	"PT_COLS" VARCHAR2(4000),
	"PT_UNIQUE_CONST_NAME" VARCHAR2(128),
	"WM$FLAG" NUMBER(*,0)
   ) ;

CREATE TABLE "WMSYS"."WM$RIC_TRIGGERS_TABLE$"
   (	"PT_VTID#" NUMBER(*,0),
	"CT_VTID#" NUMBER(*,0),
	"TRIG#" NUMBER(*,0)
   ) ;

CREATE TABLE "WMSYS"."WM$SYSPARAM_ALL_VALUES$"
   (	"NAME" VARCHAR2(128),
	"VALUE" VARCHAR2(512),
	"WM$FLAG" NUMBER(*,0)
   ) ;

CREATE TABLE "WMSYS"."WM$UDTRIG_DISPATCH_PROCS$"
   (	"VTID#" NUMBER(*,0),
	"PROC#" NUMBER(*,0),
	"WM$FLAG" NUMBER(*,0)
   ) ;

CREATE TABLE "WMSYS"."WM$VERSION_HIERARCHY_TABLE$"
   (	"VERSION" NUMBER(*,0),
	"PARENT_VERSION" NUMBER(*,0),
	"WORKSPACE#" NUMBER(*,0)
   ) ;

CREATE TABLE "WMSYS"."WM$VERSION_TABLE$"
   (	"WORKSPACE#" NUMBER(*,0),
	"ANC_WORKSPACE#" NUMBER(*,0),
	"ANC_VERSION" NUMBER(*,0),
	"ANC_DEPTH" NUMBER(*,0),
	"REFCOUNT" NUMBER(*,0) DEFAULT null
   ) ;

CREATE TABLE "WMSYS"."WM$VT_ERRORS_TABLE$"
   (	"VTID#" NUMBER(*,0),
	"INDEX_TYPE" NUMBER(*,0),
	"INDEX_FIELD" NUMBER(*,0),
	"ERROR_MSG" VARCHAR2(200),
	"WM$FLAG" NUMBER(*,0)
   ) ;

CREATE TABLE "WMSYS"."WM$WORKSPACE_PRIV_TABLE$"
   (	"GRANTEE" VARCHAR2(128),
	"WORKSPACE#" NUMBER(*,0),
	"GRANTOR" VARCHAR2(128),
	"WM$FLAG" NUMBER(*,0)
   ) ;

CREATE TABLE "WMSYS"."WM$WORKSPACE_SAVEPOINTS_TABLE$"
   (	"WORKSPACE#" NUMBER(*,0),
	"SAVEPOINT" VARCHAR2(128),
	"VERSION" NUMBER,
	"POSITION" NUMBER(*,0),
	"OWNER" VARCHAR2(128),
	"CREATETIME" TIMESTAMP (6) WITH TIME ZONE,
	"DESCRIPTION" VARCHAR2(1000),
	"WM$FLAG" NUMBER(*,0)
   ) ;

CREATE TABLE "WMSYS"."WM$EVENT_QUEUE_TABLE"
   (	"Q_NAME" VARCHAR2(30),
	"MSGID" RAW(16),
	"CORRID" VARCHAR2(128),
	"PRIORITY" NUMBER,
	"STATE" NUMBER,
	"DELAY" TIMESTAMP (6),
	"EXPIRATION" NUMBER,
	"TIME_MANAGER_INFO" TIMESTAMP (6),
	"LOCAL_ORDER_NO" NUMBER,
	"CHAIN_NO" NUMBER,
	"CSCN" NUMBER,
	"DSCN" NUMBER,
	"ENQ_TIME" TIMESTAMP (6),
	"ENQ_UID" VARCHAR2(30),
	"ENQ_TID" VARCHAR2(30),
	"DEQ_TIME" TIMESTAMP (6),
	"DEQ_UID" VARCHAR2(30),
	"DEQ_TID" VARCHAR2(30),
	"RETRY_COUNT" NUMBER,
	"EXCEPTION_QSCHEMA" VARCHAR2(30),
	"EXCEPTION_QUEUE" VARCHAR2(30),
	"STEP_NO" NUMBER,
	"RECIPIENT_KEY" NUMBER,
	"DEQUEUE_MSGID" RAW(16),
	"SENDER_NAME" VARCHAR2(30),
	"SENDER_ADDRESS" VARCHAR2(1024),
	"SENDER_PROTOCOL" NUMBER,
	"USER_DATA" "WMSYS"."WM$EVENT_TYPE" ,
	"USER_PROP" "SYS"."ANYDATA"
   ) USAGE QUEUE
 NESTED TABLE "USER_DATA"."AUX_PARAMS" STORE AS "WM$EVENT_AUX_PARAMS_NT"
 RETURN AS VALUE;

CREATE TABLE "WMSYS"."AQ$_WM$EVENT_QUEUE_TABLE_S"
   (	"SUBSCRIBER_ID" NUMBER,
	"QUEUE_NAME" VARCHAR2(128),
	"NAME" VARCHAR2(128),
	"ADDRESS" VARCHAR2(1024),
	"PROTOCOL" NUMBER,
	"SUBSCRIBER_TYPE" NUMBER,
	"RULE_NAME" VARCHAR2(128),
	"TRANS_NAME" VARCHAR2(261),
	"RULESET_NAME" VARCHAR2(261),
	"NEGATIVE_RULESET_NAME" VARCHAR2(261),
	"CREATION_TIME" TIMESTAMP (6) WITH TIME ZONE,
	"MODIFICATION_TIME" TIMESTAMP (6) WITH TIME ZONE,
	"DELETION_TIME" TIMESTAMP (6) WITH TIME ZONE,
	"SCN_AT_REMOVE" NUMBER,
	"SCN_AT_ADD" NUMBER
   ) USAGE QUEUE ;

CREATE TABLE "WMSYS"."AQ$_WM$EVENT_QUEUE_TABLE_L"
   (	"MSGID" RAW(16),
	"SUBSCRIBER#" NUMBER,
	"NAME" VARCHAR2(30),
	"ADDRESS#" NUMBER,
	"DEQUEUE_TIME" TIMESTAMP (6) WITH TIME ZONE,
	"TRANSACTION_ID" VARCHAR2(30),
	"DEQUEUE_USER" VARCHAR2(30),
	"FLAGS" RAW(1)
   ) USAGE QUEUE ;

CREATE TABLE "WMSYS"."WM$VERSIONED_TABLES$"
   (	"VTID#" NUMBER(*,0),
	"TABLE_NAME" VARCHAR2(128),
	"OWNER" VARCHAR2(128),
	"RICWEIGHT" NUMBER(*,0),
	"PKEY_COLS" VARCHAR2(4000) DEFAULT null,
	"UNDO_CODE" "WMSYS"."WM$ED_UNDO_CODE_TABLE_TYPE" ,
	"SITESLIST" VARCHAR2(4000),
	"REPSITECOUNT" NUMBER(*,0) DEFAULT null,
	"BL_VERSION" NUMBER(*,0),
	"WM$FLAG" NUMBER(*,0)
   )
 NESTED TABLE "UNDO_CODE" STORE AS "WM$VERSIONED_TABLES_UNDO_CODE"
 RETURN AS VALUE;

CREATE TABLE "WMSYS"."WM$CONSTRAINTS_TABLE$"
   (	"VTID#" NUMBER(*,0),
	"CONSTRAINT_NAME" VARCHAR2(128),
	"SEARCH_CONDITION" CLOB,
	"INDEX_OWNER" VARCHAR2(128),
	"INDEX_NAME" VARCHAR2(128),
	"ALIASEDCOLUMNS" CLOB,
	"NUMINDEXCOLS" NUMBER(*,0),
	"WM$FLAG" NUMBER(*,0)
   ) ;

CREATE TABLE "WMSYS"."WM$LOCKROWS_INFO$"
   (	"WORKSPACE#" NUMBER(*,0),
	"VTID#" NUMBER(*,0),
	"WHERE_CLAUSE" CLOB
   ) ;

CREATE GLOBAL TEMPORARY TABLE "WMSYS"."WM$MW_TABLE$"
   (	"WORKSPACE#" NUMBER(*,0)
   ) ON COMMIT PRESERVE ROWS ;

CREATE TABLE "WMSYS"."WM$UDTRIG_INFO$"
   (	"TRIG_OWNER_NAME" VARCHAR2(128),
	"TRIG_NAME" VARCHAR2(128),
	"VTID#" NUMBER(*,0),
	"PROC#" NUMBER(*,0),
	"WHEN_CLAUSE" VARCHAR2(4000),
	"DESCRIPTION" VARCHAR2(4000),
	"TRIG_CODE" CLOB,
	"WM$FLAG" NUMBER(*,0)
   ) ;

CREATE TABLE "WMSYS"."WM$EXP_MAP_TBL"
   (	"CODE" NUMBER,
	"NFIELD1" NUMBER,
	"NFIELD2" NUMBER,
	"NFIELD3" NUMBER,
	"VFIELD1" VARCHAR2(128),
	"VFIELD2" VARCHAR2(128),
	"VFIELD3" CLOB
   ) ;

CREATE OR REPLACE NONEDITIONABLE PACKAGE "WMSYS"."OWM_ASSERT_PKG" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
1ff 10b
G2ZZhyUrWw0IFvYutIeQg7rxuvcwgzuz7Z4VfC+mcMEilfCekPVH9S6WDQTxI6HF3K81dqKO
1c6SPMWk28vpKEi+T7tACmniS8pXmq5SsSH4HmKHSltnnPX7Dqz3vKDoYq3gJDv3ay6+okGw
DiFvaauuRH9dGnwRKG2OJwYJeZAgMoXYPUboIBLLIR0bLLTSic7A1Uhoxr6zVnRTs1CScmEt
YZKNdi9jYTHnza3RRcFcfmxDNyntVsweH8rTZb51eqZbgkA4
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE "WMSYS"."OWM_VSCRIPT_PKG" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
362 207
fdhJVMr2CukAbi3aLpo/snKjhOAwg40JAK4df3QBi+qRZ/xc5nTYkGjbzaRd8XdSkn8BcGfn
XMOOzAi7CKRjYr/p41qndto/P3JSphAoXsOWmDI/miI0InkZm4s6zDUGwmXySWb1bl6iCVw0
ftAJt10h6hkm6RBj7RPvLVSJWpHFM0hvD9c39b312sNGboWk4Sd3r1hmE1KmrKuIJhHtil0z
JHRxObg58GoB2SYRFJF4JG+IbmfC2HHCM6a+TYbFGefbvNGZ3MkEF4dEerEXlpuu8myizXnl
TLMOc1DHOxTr9KJM4LIQwtanj4/dv4rt6bjtnz/PB6NAaelKAnFFpBPID1caD7rP7d4B/k/j
OW3BVCG684X2IfRp6TkGkxXSKkXrRih5NHyg/l3Eo3cdtL+C6EZq3BCeXuHWP8wf4Dr4tkqS
7KhbFaENemo/xBk/fiCfHgo1H+obBwx3UsmZfzFo7K484v5h8QBb9h1L0fgx26esRrOIKkXO
NnfWwe0=
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE "WMSYS"."LTUTIL" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
6897 16e4
vUMO5SMFypdMjD7cZbg4RnLFmG4wgz122UpdFsByc5QiX3dIJp+JjUwqAIwirXllbT4FU/vB
C5Y88hKT3qCwOqp5Ns7732GvWGOQO4S/gxusyuesMDWNGrv69KKq5JO1OrskUaLPko7pB6No
q9w2CkLyZsAuoWw+1Z1qsBhJsGaIGSqgGmVhpkFRnbufmLGclprz6ivqLpfALFZ5XkaqPzpF
/Y8x7r/x8g+ORQ1RBsSxsfsMgbltayOAfXP5H9Y53F4PuBHl7p0N7eubbl0h9hFg8mQ4VKYj
FJgf/ZxZy629r2Omo3EPeXEGgBmJofNG4tb7X5aWmMsL+nA5DKhC5nNgJ/sW4u00dFPceghg
jIPFMTp5tTvGZ9lfcQB/TWGjkkGqzX/OmQ+aBFI0il9SMK4rsSty69k/3d0p+h/7IT2O5EUe
7vY1U0l63z3PzxzOMOhdBr3QLsbS2Rvel0VXztN/oOqJzwW/dfx6KI/JmqtLiv6dzYOTO8CJ
GbwtKOXz5wmB2R7czER8USKFuulRDAjr8/h3mZAYfW6l0mLu+AQyodJVSOW6JiQDKU756r/r
i8YaKeoClIPlQN7/y1cZhfkd59dln8MujsCyacevMIw/BaZudgVkEIZW95FE2t+ISx69bql1
pjtZV2fsHWKcZ9IVImhmEZyl/UfxFLCIwzmMH8xMnlK2JMHCpyG1vk8OHO8XHzuAwYh8R0fi
kCD9JauNRCbs2NDyC0Ua66GPFAF6bQJZVxGpRxtDPmYBizC6NQvM93c/tQGDT24sx64JKBTe
NalKUSddJHQ/WGcQt33mQxMjX/mv8oQjJ3jrWRQNSet3SgJMtLcXUSVeqj7sGLiXwoi0N/Fs
VCgjIQOUl8GxVVHK7eyskTW8uW+oD78MyM1pi6gdgC0eaf9iB3CJcFyKb0D+whMsmtllKpb9
TT7xHtMDnbmdc5vN2XqK05i6tFwjkhDdKzVezG49cBs5C1w7C+dR11DE+3UQoST+HgG0skLA
bVKQVrimePrcXr1GdiEFv05ex6c8SUbaPAHldAIU2RTatkFeqIYztT8cT1Hxcf8nJMxHQhjT
3npgiK0bMtGNsk5Edw3YQjEdqiz+x6EKzvGrhShdhVfe8Yw2cVUeHCnBXU5eNqfSu6QY3m2q
+cEPT7GS18efN7PBXVmPF5Lc2ba5FvEERkvFATGlUYBCcFZJoYgxFijDZRzWbxBKe9bLHDPN
hCh654m9buE1UBCSy++3j6jjGAMh1Kqrnz6yIt3cQJazqPNI82evz5KOO3PuCdfd1BITWQXZ
l2freNQ2+0gIF9ZWMGj90MZ6rTKl1cf34BNF8gNW0D2rJYRIDoGpuEhnq6Yxa4P9jlBe9OCJ
SebfRsfU2sDJUjcPrpFgRJdl+UT3T5DB9JrmQ6Nkykl6oUND8PJm5RRctmWNPT8y2DeM7Xaw
l365N7r9g+FdNm+9Ysyodq3VP3dGmuC4iEcZT1Gj3awnXTRGo/IVrnGVogm/CmrDdyu7nHjh
KwtBqcbBJAy8NBTqkRnerFcYp5W/Vo72zbBRwhaz8hOBdbGzgnz803ZQpmXZN38dZwTbN5va
MAVK2/RT+crbhHrUKr+zRZtYE2APUDemB0hUsxUj531Gx6fBW7R7GEadt1tLlzH3kZQdqJ2V
zmrwpCQ2/2r0iYAjLkK9X8okl+8Rj3i05OD3vPdmzPdFLz/LgiUES+6P5KKRo05ILH3Ndix9
/JBofFPVYTLi3Y1FJ6C8g6bLvEgJ4w0qdvCw4aCXDfLd8tfs8XGzUbZ/uDd4Q0InkZNhTMEf
+XcVqGYBLNXWYVGU+t6hZU8cE8IjWrC34t3dl8tn1JjjrSabthcyKgH/ij8qr79akZLJitUG
SgIXgfwzuxtzjOOhGeKOmJZi5GrVwC5Oex1te3ITDPO8bfwZ/OEbntTlePRXDHCq+9yuiuu5
1oZcXktWZ0FOG0lD3ktpT4+yrP/tQJN8UGoFnhsHnnass8OpOy7knPUZyoEuxthujUkFnzUD
90MXJeP9TS26swqz4o1dKgjgLcLkoTnCduvCuvPoO1RKAIlRJ1cLwr58+eLYU40qhp8iYJDr
8UlD9FPeuOOxRlYo6TLKSaOj0RQ+goatX+B83xLLMML/gFjFmILIakiZ3uaW9kLPPnbbYWKr
PRSiN7B2gJNtU7Dfhcg9mBxb8LEj20RFnSJ8Wp0AOLcrj+qhntB7UiE8uhwa3saK+4v4Nk79
12fX1iI9o9wwFlwoI5oWqy7y6kjdeDWwFYAn4wjzbuzsriog/j+gIoFNrCkse4o8lHraiGSd
fnDPONgFK32xor8rLImiWvEpLeDgy0RjQ2lLqJ8H+ybEAU7weBYJeb8esieIX28RdU+QDI13
fjk5WYz2quQ6QpQofjRwsdaTsQOMBY4SesYUHyIFUUHqbAc7+rd43JiMEKTFizn54diiaIra
KnxaUBDs3X3hoV+Bq6s7JXnjDbNf0NX8xJF0NArhn8pQHuHWIr8RJUPcxfAcP24wQxwlVuH0
y3T/ToT1yY2k0kBT5QAcg3lywf/uMMgXS33Qppi3dI7FBqNdc+ExjZsY4LRRkNsG+L0mkg2j
IziXnf4VoxPpJOqoBBGDFTniTa0Ihr4wfhq4JdYOiEXEDXxldwqR9PF5phUAoG+9BFij6Bcw
a+u2XrghnH/dBSPv0QXPn4mjPbLoalt80/aqfMYvTx1+NjZ7OFRqyoWhXzoJaqkQUcAw2Yfv
30hWwb8+n7PR9ozflaF/Py91VOyQqSlaHoqyauzOroSClQUZ6/zEDYuKVGKL2a6Z+67V71eb
47dWjFqh8XhaN7DZXQTpWH9Zr0RHsWhHkaIaj+DgK6wIX6UBllUSP3ueXDNdP8UkyCW8NO9o
SVhef8Urpuidg8AicPBP2bjYBM1lgj0XJvzJetPrXgiEtChL8UcOqGClGpBVAIdPgHLJh409
0+c6kLPAZh9IbSODEMFwPkkkTvVTp7NwDt14fXALIwyinrveQZVcrGsHyUTwgtCmVKPB6hKF
hPEVjQ6lgCfaLI+ORqOruYmecDm6A+CtLiComVJv/VTmPnxlNTs4kQ0cRqOpOMvVi6/jlnSZ
WdF2bgK4jV1BfLTxS4XLbYKNjIGP2O4EJK0kejFgDDVTiguo632Pl8AJNVxGbFjCjxzX4cUR
zDe0CUuW8EQkoyhmrbcYMt4uuy2ZMEJ3kdAdVd4BRG1t5fuToZrq9Y9xJA7ifffxR/czTAVR
sDEZKueQB3iGe/YvTOQfWU6F1fsmMDfxoT93S9fZExOWx49Bf7mtuFZ2S9UKSYjorWluuIwF
vlM97FmfTr0KsCKpC62U+A60TwCvGci39DMoqwbkDRoTjYA/67G1JqN2TAIErbNUp4ZoBlD7
I+3QGTvBJmfEQejdWIotUgKIzKY18Y48posSm3acV4qS/T1GppdDyl7U5JIJ1pAFQPqM/m28
fGqFKM9xSW5dxfj4zHPSE7GAv2lmz8mUDVNH6eR90DTqkZ5cX8Zt1NqGb4ZhFFo+K1g3zbue
ODAjYB4+rhfYatpN7hu80Xvx+H/PNs3+97n1wHC6HYBxwJ/zg9iDNAp+VV5+3ggHHgMezI4J
3Xfoj4x/tBYrV/ESVrv6q0yhSpYLgbYMeviekGtwHMHgo68LqtDUpE2R00WXfXQFbMa8n39b
2ePA0sQNVqyeC43ythntlaj/J6/gqhiDNr7MInKgkLspFZb1zqXF4agehrMXIT+vcLZVc6BK
uLFbLWA+1DsCPmWm6zbOXvEqe6AXYI2n/Iw17K+uORJbhnvgMr1H4FcoSMryP8YOyKsgZ0YB
tgeJlBGOOCGHwK51ax4ypq9ToljDSRbY8nzx66xFrlJ6EJ/xZEpjwomRcH84BIj+aamvRVg6
qWGUC0CtM1Szms1Bifvi/zTDiqJUQWhw1a/T9vO/yd1Np8qg4l55HZDpf4HOrMy+/I27NSrl
DxlAl9ghvr+pBNjWJhbdBr4qJ+aD12tPorF2rIU6R+5zXr+1X1UkzP5ycmWWWNwL1g/MUiPL
hewusZwi78dUegaCEvKLbf39HAQJxhrfFL2LKFuTsKlFA1dI4YXW0ORfR6a/sEz38oqQ1BMT
8Mvr7kCjn6P3wUDmnUVkiVigOD3wxPd58qLYu6FY41n4I9PpxkUSB88msWGp8JLXWpc3TQlh
PUk+CjjHtAlWVzVutqEcx5cV9IONBnRQKAX1rNG0HgvV66lVA1tTLZNXTvZtalyeYALjnDTl
Ou5iC7Gni6Sr/stcuk0SC/w6cE2aN8RmvuKMWJeOlPyR1QDgIc5W8PU9WvLBXIa4L34B11Ir
1zuB8/IL7VtTgUuag2CczB5bT+Zm/B3mMlF4woaMrpK28nJ9bfZHMvTBdF+rr/ASZjmEhYja
siKtU0PSj5u95nJaxxJmgwExYpnJ/TrzJMCxofoS34qh6oAjAIbR40goikNmQRwTaeoHVpAi
dTX69Htrb06GuoLUk2xoCJebicFLYdpt1mnVzSro/KKXDDfpbTICiKGobQg11A60T686yuvA
TccooG1yS7H+uPsXiv8JB72DBDF93PHdx5VT+ZJd69ji60kOEUKRyftnqRKCOxb+N6wiBbf5
i6vYYywUISdLZaE2NfyFjuFt3SKYt9CDSxESy9YhWx5ErWLP/gI276p0F4RFAWdM4wi17x2e
wj6TXqRkh+9di7OuDOnCeh7mfqCgPt34Z8m8rZLd4cTRvCG5AVKvhxhPZXd1pEv8hcWp/eIV
m2p398KktqeFFQTRUfJzaFNhtHEp8VIa/Ov8N4mB6D0SD7fBSRumf3bqh1hFSpuLaLGmOgUP
p+QSNVlyCRLL+kZEKbGIRrhUhBBAaqw60VHacP3sTIQ4eTJTpGGtJZ9COmoeXsGrZQ4gVgF+
EhDLkAsdnyye2T8gdKXXcznQsac7y88DyNKlv1qTbZEyzdWVUY7qpSoAbeqBVraZNquHcN0W
+1C0SOpgF+onV1u+bNLaH3EoFTjpZCocIN9fUgQafq9/w1gRE5HCIDkZ5pQNsyMvxq+Fk6J7
gr8j1IqYoc+0fpqjBr3xKLf0oGGxENfh5xnJ2M/7/NaoYiKmvv1wFdU0rQTV0FxXD7EsrssQ
oo/Q07gy6zEDRLauK/h0LNNsPU0SjHd8IbK/HB6gizSR8GeR2G2TSTAi0DedWXiNxnuzlmNr
H283UsZfB/toQLZ6uobPJhGsT8Ip4sulfkpJFaWRAnhDpLrPjcvIu+GIAyyM0aJJT40XyW7t
M7ztKUIuQ1YLaZO5F79WWWO+tSMUhNZzB8uDHTAkHeROxaXMTAp9pCPYVFzBSy/Dk/EYdvS+
FlikNoJIAx7WogPAVG14Dqy43GVCYlWwT4B8TUD/2woVOISh1vILBjvxXYAul445Lm0YUjGA
/nNoPTPAEzNIEzBQiesEZ7DF6mamVAICnH/E9ZWlC+zKRr+Mig7/QPWc3kq4nqwZB8PGpane
fmTiEkhkgjb1cu+jlT/S4YpYoUBDHrztML93lCc4qeInVJhO5B8FIFZCGIPSTnaZAlLUdsQt
wK9mD4XSWbs2fGNIaD5gTJX3COEu6DqbuE8uA7JUF3TMMvhlhw4pQn7ZW6QxX7lWr6hFpwQs
J7ej+f0m3Cv4GSqRmiHERfeDeOw2ovB6BSjlr2QQ1KV9HBxqMbjJr/7gY7NdcdPFOAqXLgET
LZv7p2579BuzDMIgCZAgp+DaEDjlCrN+J5oXE5oGVr+kQHW2hgmpDvKpUqiprqTdD9YqJw/O
LAMCiTH+nXMfs+d2MA==
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE "WMSYS"."LT" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
1146b 3195
OMw8vzALM3qNoFAZAMQkqJ52dngwg81VTNCGhTI5j3G7ZFACNzzKtwL/QiaWlsBr97QAl03p
6YnJ6P5guDRSft1KshLH87WSyHcpSCli/OOAAMvgysd/mO8t5c46wlTPWnnJTq4DBzT++E8S
A3O5hsCzE7vEBc/t2orZzwW6p5oQsR6N+CiYsC4Z+JvObUNRkuKx5JOnPVtDXjpzJ8SaYuqa
nc/4hFwaWD/ETCKOE1XCVJzXnR5mTxcFzYomlmq/7Qb54EQyCg8cKDqfun4oJdmd/07oQUX8
158zpVcSc4pLcZa/c7Emmv75oVvWNzT47tjxakV91x6tWFxiVrGY5GujvA/5Ay7kapNtqyfM
O+kAIMxVb4E06UajRg3jTm/uYeNObwNpbVgNdZDEdb5iycFiy4RiyzuV7kJthMSV7kJtjGlt
7/ZS9RkGhXlS9RkGV3cGtKN2T8RXn7p2T8RXvQ1XLW9JwWLcaG9JwWLchGLcO5UpQm1exJUp
Qm1l4+ndj7TodBYdOYeMZQ5g1r4Lr+92ekib52zQ21GAVhJGwoBopfOeLPRj0FTk55XQUzrv
iSTTmcotNtPyylLvWhasFKc14KgUjuYG6MhpnqFWQNvAWhYH27Jma8rxVNP06fdpjvQT6eaT
FC180wzvayHTeEpGBlrgQhRvWuY3FEhmvWzx1NOhYveJ06FVognyFPBs8aNmPmzxRfQaaB+e
n0BW94kShEhmPmzx1NOhYveJ06FVognyFPBs8aNmPmzxRfQaiVqrDBQNognyFDK2oT73Iada
J/QaiVr8G/EJZt5W93fToT73dy4UY6IlVGYmbPEJZiYTWvL0Gi2iCQwUY6IJePeJ070toqxs
0xb3jxvTFvcvDBRUZjfTvUhmN9O9LaKsbNMW948b087hYjACyfQ2vKLHtr2JWuNs01b3Z/Q2
ePdn9EZUZq/TvYlauLa9iVrjbNNW92f0Nnj3Z/RGVGav072JWri2vYla42zTVvdn9DZ492f0
RlRmr9O9iVq4tr2JWpNW92UMGl/TPse2Poyil+D0iZNmAYlaWBNaiGwJbwwaR9M+jKKXaKKX
FvfCVGYBp1qIbAmLGwnUjGCvOO8MGl/G8Giilxb3wlRmAadaiGwJixsJYPSJldM+A6KXFvdl
ePdl8hpWp1pYbAlg9Im+9InMZgEtopdW92XyGkcuGl/TPm1sCcn0icxmAUhmAYlaalRmsmL3
QIlahHj3QIlaalRmsmL3QIlahHj3QIlaalRmsmL3QIlahHj3QIlaalRmsmL3QIlahHj3QIla
alRmsmL3QIlahHj3QHqJpHbZYaKrm3BhE1qE8ho4VvdAp1qE8hprE1qE8ho4VvdAp1qE8hpr
E1qE8ho4VvdAp1qE8hprE1qE8ho4VvdAp1qE8hprE1qE8hrMVvdgp1rv8hr3E1rv8hrMVvdg
p1rv8hr3E1rv8hrMVvdgp1rv8hr3E1rv8hrMVvdgp1rv8hr3E1rv8hrMVvdgp1rv8hr3E1rv
8hrMVvdgp1rv8hr3E1rvvJ1vNK/J9CEG2n5IZvAW92AtoquTZvAW92BIZvAW92AtoquTZvAW
92BIZvAW92AtoquTZvAW92BIZvAW99Qtoqu6ZvA+99RIZvA+99Qtoqu6ZvA+99RIZvA+99Qt
oqu6ZvA+99RIZvA+99Qtoqu6ZvA+99RIZvA+99Qtoqu6ZvA+99RIZvA+99Qtoqu6ZvA+99RI
ZvA+99Qtoqu6ZvA+99RIZvA66Kql4p1sJXUg+Jj0Ieiiq8bT3n70Ieiiq5j0Ieiiq8bT3n70
Ieiiq5j0Ieii7NvT3uD0IWui7FP0IWui7NvT3uD0IWui7FP0IWui7NvT3uD0IWui7FP0IWui
7NvT3uD0IWui7FP0IWui7NvT3uD0IWui7FP0IWui7NvT3uD0IWui7FP0IWui7NvT3uD0IWui
7FP0IWui7NvT3uD0IWui7FP0ITj0jhpap1q2YVpIZi4W9xstouxUZi4W9xtIZi4W9+gtouyj
Zi4+9+hIZi4+9+gtouyjZi4+9+hIZi4+9+gtouyjZi4+9+hIZi4+9+gtouyjZi4+9+hIZi4+
9+gtouyjZi4+9+hIZi4+9+gtouyjZi4+9+hIZi4+9+gtouyjZi4+9+hIZi4+9+gtouyjZi4+
9+hIZi4+9+gtouyjZi4+9+hIZi5YgDkQGmwliTcaE1rrolpg9F1/t+W1wvfS5iaSpwWyxfo3
VJhHFFsGYdncwC9G8R0Nn5Pyy3d5nCZdyhFsW0ufiAzLj2HZo8AvXfHWR4MBlq2FaJ+IWcus
4MB8oJ9YWctASJh+G1s1Ia0Ek5jYG1vvxEzJt9YOE3ZfO0xAt9YtBdHZ+jXI3MsbPNEF+q/b
eZwIXcpNSVte9pw6XXD8YdlClGxVyUVsf1XR/KeOMoBcxENcl0VVNPJxv46fE4qnop+YoLrT
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
pDWay07NcJrLscTWENqsvKSLBa+8pOIgW/ifNhDaR8TWENpxmsszzeeSn3UgW/ifU7ykigXz
0s18msszzbgQ2rTE730FOLykigXukp9LIIBQxGrP2rTEaoHNcJpKDiAHOp9LIAceBa+8pDWa
y07NcJrLscTWENqsvKSLBa+8pOIgW/ifNhDaR8TWENpxmsszzeeSn3UgW/ifU7ykigXz0s18
msszzbgQ2rTE730FOLykigXukp9LIIBQxGrP2rTEaoHNcJpKDoIHrcdLggceR6//djXqKMeB
cOoosT3WTACsvKSLBa+8pOIgW/ifNhDaR8TWENpxmsszzeeSn3UgW/ifU7ykigXz0s18mssz
zbgQ2rTE730FOLykigXukp9LIIBQxGrP2rTEaoHNcJpKDiAHOp9LIAceBa+8pDWay07NcJrL
scTWENqsvKSLBa+8pOIgW/ifNhDaR8TWENpxmsszzeeSn3UgW/ifU7ykigXz0s18msszzbgQ
2rTE730FOLykigXukp9LIIBQxGrP2rTEaoHNcJpKDiAHOp9LIAceBa+8pDWay07NcJrLscTW
ENqsvKSLBa+8pOIgW/ifNhDaR8TWENpxmsszzeeSn3UgW/ifU7ykigXz0s18msszzbgQ2rTE
730FOLykigXukp9LIIBQxGrP2rTEaoHNcJpKDiAHOp9LIAceBa+8pDWay07NcJrLscTWENqs
vKSLBa+8pOIgW/ifNhDaR8TWENpxmsszzeeSn3UgW/ifU7ykigXz0s18msszzbgQ2rTE730F
OLykigXukp9LIIBQxGrP2rTEaoHNcJpKDiAHOp9LIAceBa+8pDWay07NcJrLscTWENqsvKSL
Ba+8pOIgW/ifNhDaR8TWENpxmsszzeeSn3UgW/ifU7ykigXz0s18msszzbgQ2rTE730FOLyk
igXukp9LIIBQxGrP2rTEaoHNcJpKDiAHOp9LIAceBa+8pDWay07NcJrLscTWENqsvKSLBa+8
pOIgW/ifNhDaR8TWENpxmsszzeeSn3UgW/ifU7ykigXz0s18msszzbgQ2rTE730FOLykigXu
kp9LIIBQxGrP2rTEaoHNcJpKDiAHOp9LIAceBa+8pDWay07NcJrLscTWENqsvKSLBa+8pOIg
W/ifNhDaR8TWENpxmsszzeeSn3UgW/ifU7ykigXz0s18msszzbgQ2rTE730FOLykigXukp9L
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
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE "WMSYS"."LTADM" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
9ef2 170c
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
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE "WMSYS"."OWM_VT_PKG" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
556 164
+f6ysJ7PJakYKRg5sctRIq+uvp4wg+3xLScdf3RA2sE+IRsvns3soc71H+vakNX6slh6nxZj
pPL4kjJM4cY1r6R2KOH6paosWvtVHcs2IA9kKU7v7Z16HWDakstxjqhhjo02NEiXHX3v2k6C
at7ySMmEckWyv749AxmLOMoIx8QHuJ1BzWeFUXww36vA/KjB+zavOBXksBsZk9P8PrekKZ+v
tGr0mAmE4vEeuUsza8bjC14TD+bw2cpGYOCAXafmmVnwPa6gFo35naMKQo0Z8eqGeJ+8u2So
K2dcYBqDI/QfYPByopEurjSmJ1mLSfHzhF5YmYzUgOIy2pv+zX7jx9TXeG25eT0=
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE "WMSYS"."LT_CTX_PKG" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
3a46 fb7
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
0ixwoXZT
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE "WMSYS"."LTRIC" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
1cdb 776
lDNB4YwmMcoICU1E25Nb6cWJqf0wgw2T2Uge3y/New+v6TdXZ7juaAbRgw6Z7KsxohbxqD4+
KWBt4p71XNK1s4iX8YGgbK09G+PbgpbLF/9Qp214PzYz/p215IFJt/nuN39SBpLnoUMacGqA
BM0dsTehpI/nSnMz2vj58g5piLoCrpl+rRaGLI138vyjumzcyhnPY2dyqT+K/vg5tOHlj13z
6ndTAd0Ucn5DhNZYKk6xkinmW03paSbVrlQBUHFYaKy8ioZO5lSyQ13cR+C9keq5YDaBHYOA
xA6s2kco/hD+m4b0yNBi/C33f+5dYq7+AH6PW0SUz0ae4n2au/YdFnulV+/dlo6PjKZygnWZ
M4mBnS8W/nUjvRp/bVv3Eyi6HwJFKWu3gLNJxyfOrwREcbbKU3YEJgyNoFz7/wyMW/b14sNx
tzfa8hDYhqnCl0eqkiDFXTXlIAEzA1lnW5KDhGtj0Q5d1IZKjMEqkQvs9vNaxLjdHQ4tQ712
55WzY6Sn+zjDgUHHbF6T2SfPqj9weEGrzRK7p4zNTEXNTEUIieBMcLd9SYvKXdzElocSUnrm
DqSukPrk/RbnYLH4YQrrtImrXmNUOFnPJ0voX9G0o3x9d1ezbgLHGA0/brUsvje9jsCdCrVx
w8IW1fdBVidOlMdPwcVLidUoeIQas/Hm4Mj4Ne7ijOgeUrsdjtSshsx3MoGCQSlmtA4uqSgp
1paVrdcQdwNXYZ/vERWxBQ7fdG01ZlD6k5CYWKFLyYryhhk0Q1Es+G8/4mzvoLJEOSsSMHI1
C/Hnt2e/bUnEv1aHFsdwEO7TO1JUi2Z+EDxxrr2yyDYhXE1myhWq9M/8Bf9wL8BbX7oKIvZK
C8JZQEWnxgMq5xXHXYfWcPR843ceowjV9jmfqWi9idNiCHcAdfpqzx6TSY1Zm4phd/Y/4NWf
drYtxLp+C6+7b1RhTOeTXMw4CuAfO/zfg/Mlb8UnrwwUGyVE0rSJP8qb3PSkl38U5wD0rn6f
mXYwJzI4DLJJh8A8v+vJtlAIJdB4GjolyG5gymo43Yi25SWWmgALC0KkxPgT+eo8zku2SSbx
5TsT/fFbDdvT6oFtu6OIEVlcdK4VJVR4yV822I6zuWeWHLEL/DVjBHeJrJhOWkGCIk1ftgCM
T/JTFTj9/O0YX7yOA5coV4LBbzIl2O6UCayvrFqGCJiz0TL59c4U/0j3yLvsc/zCjMcc9Q8N
2cWP3KF7bB8dB4ugem5HNWwXmzCoy+22UAnWDb4bG/Ra6xErs7fOFsdHMuAj1v9QDdvDFUw5
c9zOPCsFDKIta27HMsw/YZgD6UNhXirYStlcy+XBnl1LdWKA4MyC5aYL6u+wSuRoWAxuLeoJ
NJzxn2ZsB5u4udwR/KxLbnkit2S0i+Xeov6G2BlaQiiptvMuEICKWz+xQdiZnFQ/8RtUhRhY
nNrCxNlGPNbaRZzWxxK81TEGgpQ2jmfDPZ0KWufeplOyWWdVsCprOjRkMtu//EKHZgU2QXWg
VYvZHE8owUXfAIN9MrjCHHnhH1GBYrc8YAT4vnw/tq+drmlJQb/nrEVEGC8L14urAe1/w+ag
k1x6QVhkzNLxWX4m4Vm8T6H0Wh+j7QuQCxC0YzJBpHvseyBf8P5fmfXgDTF7RK6egY9zH5mn
ozn6jeSMhJERSxxWjJZTqegTKjKYHPaczI4LKctRHbkuzEyDYL8NhQgl2XO03YMbf3ndHdYm
P/mQFdCnJrVJTSEgcIy+FcOGiNiWiwapsCk8dWWX3uK5mKo0tdNlIiCmYUeeWfCRQUnx/Q66
lrhZ7QbG39o54n6OZdgVugwZWWL54VJVGHpvePIIo9pz56abMJ7WwnsAQqUqeE790TyHLGdJ
ZCRzWwXfEPU=
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE "WMSYS"."LTDTRG" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
717 217
9nBJkqnE3C1yMpdSvU+TOyey+MwwgzuNLUgVfC9A2k6OxMway1zq6G0QOZkLsMGClF6n8kx7
XDSd/DZatg4h9Cc+2TFPqk9y/rCiDa+Ur8Huc6WB+9//7Ptw8erg1ls4mKPzgMAaoq1Z9xxq
E0niekgmg6iE+XerOkO9NpmA16JJU++f356OqFfmKOx0G0lwUOmjprcUM80jVN+SbFvpe383
4OZrTn/RDdCMlBOvu4bBuAuhlHGOuWnW+rLN9lPQy2YQL/ZlivAD8gZ/MEUVmMq6XJXq6pMs
2ohTaXRRCSZJaexo5ydJKw9EOx+XRLyZJ/0Mjg0bucNSUHlR8UYy8zh+RLrCwjh2iCl3lowq
xynjARjJhxqhvueMKpnZeKwdGf3cRG0hXFLFVH0mGF6vMnnPeBj1oEUDtv8QpSG1jBflad9A
z1WCUEjS5MYC/bftXkQu6pNnmqe7JHJ9rJcK2FDtGjNOlcIgQ76q9ig8uhfhgo0xMUv/3oUo
Y3hSvn86qgWcNIcizx3r94fE
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE "WMSYS"."LTAQ" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
f8 e3
flySzTnsleeB3gM+9WjAnynYTVcwgzLwLcsVfHSiWPiUHARn5nTYkFngDifxo0q3YV7b/6zb
tW2muswgS2yaOhyMKQjypTBVT1CVi0mmp6/ILuZwyA1Il471/pBsDkmFFotAwHvdV1osiLJi
smA627HkGJPMGBTZZZUD+O9w7PJjDtB8klfGhn3EqLFe6rUNfUc2p9F1buZa/81reRa0n045
TLEiYQ==
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE "WMSYS"."WM_DDL_UTIL" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
3246 851
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
kWQkcx2+Dyaq
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE "WMSYS"."LTDDL" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
b00 2d1
PoNbUJUgljXsV5Qdgm5N7uRO124wgw2Nr0hufC9nEhlkpWsJCSYYJU0nCuLApYMdU/YS4wBW
1/QMSq0ztVyEVEXcfy8REGiQeBz413Xxbe9yNwC1IyMjyZe7n1+voebU1S6KwL2gQVNs6FY1
y0oQnRdPtLxtZPL6vTb8l1QklKoFHRU1ppcLH10w56GmvwjLbqKvDUG07segHa2NB6rkNqVj
W3FNmonyHRw/qcpPNrxgbJDmnwJvFAiE4c6fOdiixXbOUWdisEgpM6wvFvsDRx0u02Il0dRZ
fLCrsKLvjcFbsi4PjMKtC1uismhhw9QNBxCiqXOZdahNHVZ4jwcrJvCq0njsxQmS6N+7jTYM
eV0EGA2kNi5RlrDVpJ7IjR08T7muO7Hvvbc6Irm0XautsfxxiHv7CK5zY//3xcR9DrNoXh3/
a7pZHPuXg25TK5vwEmEusc7xD4nPBtFHkJgLwQevK6OqtHLOEVajh/P5Xpa1anKfrgUQef7f
d48qGHxNGMopu/wIJ95FDc2lm4kasMc7O+oGseg+iZ3kvJDQIYQyh1qI40d0/lDt0Mc+Ff7/
iy94eXns027miEwpWejqySuToUd9PMwYbHnXb5ijTSdxMasLhovf4/1Pd7KEq78VUWAR92uI
4u0W3aVjxP1HMkic6fhbVTBliRZ+y7JyFro3Fa4vzYi2l2oyqY34v5371KwrAg==
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE "WMSYS"."LTPRIV" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
88e 24c
09XhLQdClLQXRREeqsC1q9dKuUIwgzun7UjWfI4C2sE+uclmAU1FZb64+9XUYeLNw1h11TLl
5SKqOvMbFHdsIRxWbLOtzs8i6q+lioUMRtCWTjr5smiY8l3IQmbD4ghvvUZVgZkOpcXH5tUW
s4jTST7YDNiGy+7bPgpX7Yo3UEIJ7m31G45hA10J/HhHt/+MUheC+ih8xNZ2mbljHUNjdBlk
owxdxeA7sgkledZzU0bAVGakny+6k2yRGTTee6NqA9ykSh8fqxlemGnijsuujmEmLusb1XBf
BJsfcaNxplCSqyWIi0Ev8gaXDRMme8KhtfPG0rYGub2/LMJ46/ULb7lQh3PTgl57xqH1xzFW
OF8E2nwbkkxlYRfMhEGx5iqD0i4EZIis7sdxipBIZUyxFa+iIuOkQmiwmRr45WChKAG8HUer
lwpfpzfkB8aaV/88OBBqC54IDFO0zMnN7G4cp0guVxW3IgYhKxOrnXl9cIfYmMP70qM9zxYs
ZafqXKOtcR2l3kWnDC8QuUOPeTXtN057+tQzTEc8Oau6wnm9v6p7BflPMrsEKctcQSJzpouc
s3w=
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE "WMSYS"."LT_EXPORT_PKG" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
8d2 2f6
1reSU2gLWDZdeVuS8TvVil3b+l8wg0NcACAFfC/Nig9ShDdXZ2kORHsBe8wXWH/p012z5Zi4
xXugZ9ZmhKo/JiA+QKT69lcxd+34MDQSF8x2S8rOc9Oq5BL5Tv5sIrWSvQQwlscvr60ldtZJ
WyUg7B1LmaNLIat9EypKC/Q88kzbjBrFPCyv81uwa8Vz+qrll9D6S2EYX4hU3qGhLq16/26U
23+AYP3y/QG8EGVYJvWez6JJM328emdFJVQl5Bub+krq/hB+pJdWN8F/NLRe9Mz8kPQ+sHn4
LPyCzmjdQwukk4a++TGSnSdiEEEN/5xULPo6e8Zjvn2in+hfV6Z13coqXjVITZ3+COw3txfF
gDkblGJHXgQ7oUsXnBk08O0WmqEQxHdUT8T8aHeWkTZDr/NwQbAZMrB5KW2zxbCkOZUmaWO5
ukhgWrFyeerOax2GUlIVTAdh4wEvwxDbqzKnfUyCosyaTCAN5v2AzGvBWv+IW1h/GGlPPRbZ
v2mMp1bM+rugpO+uw++0FCGJ21qzlCxBzJkY4Y3y8B+2Urq3AJVgN6dvGYF5rIEJA9M84wXC
r3q3TUPKfpU4BMKUoTw2/olZa5y9zejY8K2M9ZTax6MgqTN34o+9qZlKjPE7GK1sQirXx1Eg
qeoS8mrvjugB+dQMMRqK3icErSHh8/5NTiHFVfKQ8n0dFPOtNPmbOh5Ycki79Woh2JBKOjit
cUfeSiBAUrmMYMj/LCTkW9QMXbM=
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE "WMSYS"."UD_TRIGS" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
184a 58b
ZE00jJ9i4Vsv+XEOpDnPcwxCbfowgzvq2UgFV46QMrysbeEuqVFLATHAq/U1bYnmiWZcIoqf
lS43r37BCLWEAH5eUeAexZTIB96QxzBPNNhS+bKcjnP+2XP4/g+q+dZ1PzBnfd2J1VfRzNJd
CRHWAjVZBKMJArzP6fbSBn8ERqGjR6/mfN6wHRWK2qThwhexvTdnExlm6PsOTCDT56DcI4xW
No1+EgpnTc1FeG2pn1PyI2pnS5GNn6eT8YQl4IFodYtSOSxx6VyhVaF76dVCGtGc5NfjAZjc
lt2yOOs1BUh4kJauRf+wREntwpNkwhThGZoRwgw83sFpCQhOPIuilqG3EBcGoeUgRdStgcAC
UZKB5oKk3fWd158XwaUEgZ90TwOB37338U7WIIKo9WVfHsH1A/LGmKRrSfbPA5q7Ky2QOMqa
5dJW2fEyERYKJyZHUPq3MQMxSOugZCNHvoyAxVmObvo2lysx4q6DizVNS2Z4WZ6iqnx5oMzY
0rsiM6qQer21+OOUmyQ61Sv6SfX53I8Yy7wj5hirCjZ7Wvo+b5YdN+rYumE5K/gOwizQh9GP
zaDsZBdlZWsmZTtO0UfQkJYFcu5BBT37/kmiTf+UCrriWgg0fImK5gwagfWaOyHDgjgylqSl
DT816jtbIU7ebh7hrlYGU0UOSZOXsyBrEMkSTYu85xRJrEHU84vbsurk2gjyTpoBlYAm3af9
0szPzjCAugXW30dUhAXNgDqpyrl2EnDfSy0+NnI5QDow64Z5OmbD1Vhe4JTpovqDKjvd8d83
506QhV1k4kLpByK4xvrl56dPRbbN8ocJs7NBkxP5fHA2ASlnjjliGuV8ILY5BLYkpL0G5nov
GMcL7mkbgOuimsa57+3rJhVAe9XjdMiuzLhHKlZZjsK9Lsi5Z4Aqj0t9NY8eYCOe3td+uH2P
M5M5n1nmr+ySarf4KYnRabn/Dgp854qax0aLcYxEl/noIXER3YJOmZ0dHiDc2TKaN4F4JkNF
eEu2lFwLAtUsXgBMWYL24MKnyeCMJ6aRgHds+7RNLuYthvBy22BENIWHV5+gwUpwG9/8/aZV
TXmmS8yxVKx5SR0E33vxSHYMGIsYkr8TLWuQNVq9E+bkwvWA5fVXbg/JNTit0Gy7KMW/6Shh
Fk2XbGsX2dHsYJMjhMevGkSnTojqwELdNJ2sOnJA9JsI476kTJXgkdDelm0jMUS73BOkFjBt
syYlJIEXuVvA1CRP5ShfIR9ctdcwEmCUzX2jJ8G73L7Yxcl2qHZXvhmRgfp3R5Wypb/rkhNg
R552abAXC3yEA9ePUDd0juuAcpgEg7lhqTh3ox98X6uK4UDME0zdfOxQpk6X0nU5SQTXJ5mf
pYess3dhcFsg085FGqw05AgkUhNsLg==
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE "WMSYS"."WM_ERROR" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
2a4 10f
0gIO4sBwhGapzGrNsfDsGjpCf9kwg9dKLZ4VfC9AkPiOeGC4EQqQe6QpKjl/vZxN9ZddFuYf
D5ohrJ+ONQhA1rtT+J3HFr9N50icMBzGHueDHybKdEqpdWKAkdSoizczuEcW7MJxrM1Jibpd
o8MB7KDp0bh+bDJbG3B3QcBKMBqImYM2CdvrMxIT1WcrPeuNy/slbOUA4bco2AHjWQB/iKGH
NFEruGWQT0VOLPhlPLVRclNBqk7wtF8TLLpl38c+WOJMaPvaEuIf
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE "WMSYS"."OWM_DDL_PKG" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
a79 38c
/7Bv0ToA55+kbjc/CBK2nRIGV2owg5Cn2iAFfC/G2vheuOdw/XysGuk3UWBbGHo+Rj4JQ6RD
kQbTDoS6oLqdP64JilqnLMK+MSW7HLUSaY3D/ZOpzk67vyMQc435+eSoFP/J5lTyiWwwG396
l9oUKVp3ZU1JiCLRHCynBh54f66ni/YbDDpucVaC5yaeDnSruzkaUjZERv8ct0+8IVSpl6ts
9JrcInLzFnkAQa8crsww/zHBQBWyVA45JjmTQS7LQ8/dZRY791fpBPTvYZbNQp2k8nYK0XlR
cBgczznpnunZPLGxwkgnMW6/9DVJO3kGTwmc1PR59JYwID7xLf4Fm/8RuKBI93p7PYlGAImN
dHBuQMHFzp7hiN3phlc6O4ZvOLF2+tGpPVlxemKKkb0gioF87cN4rxSCmRCxsd0qGitA0bu6
7tRCJIpsnAfguPgkPB1zmT9NIcghbx8A/kzknO8wv3uthtwaCjRud4Hmn67CQGEeUwA7m9+n
uehWv1t4JxZO9cP9TVuKvo60qyjW4aQd43Sei6BMdp7Evz9NchnSIxH0Bzsh9Ud3S5zRFCrl
1CpLPm4oyNii8i+sLKVY/m8a2pWs2RBpyFGCmu8an9pE+pl2sAOvFnYAzwuAI0SPO9SieXBt
hLPcTaoJEtfZzTmC1WttOVUCFiFdZaPTvqDn1e473CpGM55Vf/i/caCfPsvh7vT+z4QESc01
SXbwYyy9lr8a8T2LQ7nv9MntIAZMA4FSXQcgMysiaumbQsc+7vdhEyJnhuIT/8l/cjFjm6tA
lJoM6agVAdqYbo4NOqD4ZPgjtDFCU37bDoE0SlAvdkdHGZfkAbx6qMH3HPxkrDH1+7B8kLi7
RaS3eXFCIHnUmvDEuVa4I3PuJKLIcPI=
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE "WMSYS"."OWM_REPUTIL" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
a22 374
9Hhs8f16bTuib8qRA9oWgL3XsKEwg2Ncr0gFfHRVrQ+vaqkaZ390BXmVy1/bV+aRoYxdUzGV
BBhI51DRTLFR+OT6oQuYnwl49Kl2ZjoAAPHQiYR/akZwgfW6aA+aACJWIGc6r6ap0aHOIEW4
fuk4fGymOPAoEeFH95WOOut9TsaCzpuUQK7Eu2S1TA+NjnjZCiwo2T27BrtPE+7pFOCTWpus
jZmXqxaxP1HUnLpL6jff/oQoMPgBokhvZyZBkdQ24PLg3y1ZR6dzlUpqrS3Q/p4Te3Qn2KCe
bfeFV7nqv5ANN1kEWiWiWOPJjVnWlq62n4zOuh4ZB40aPlAEAGOOaeBnYb4sf62JJmUqy4Nn
Q1LYKZNkZfoWibVtyacOrE8ojz1cVVsHCwsiRA0z1Dwn5rZqE3DoHVlpEvzvCfT0Yz4hkmnY
1fVWs45ze6tKtLeOOljAAmHhgYM3SUaL1jIrBZFS4ErJotGuwU2NaAyOVx5D+l+gAr8Wn3Vj
ZmVYPKRqwjKAowBmjHKg01RhYXJuA3afVO0Cbc1oC9J4ew0Lm3gG6C0jMsAGg4sXEdhrOCgj
TAoOJbduVyhfG953xa5zFaqF6xXz1dUPidiWbp+/du9N64jGyPVFBgTxSreakYZGUTeGdxk4
hSH/TyV+N+Q41kujvQVHKlsIr3R5ChxJazpdn8JlXZKQQA/+Csbazr5FWxOwakjC5u+uZSLD
8vjlmnkrv8atfsIflkItmsn1PAGrmCgPHoLo6vx3iHbBs5lX0IM8TmtvCU/4AvNyWxJ+4aRE
Y/odQ9hBLn9libFdleSP/tPYp7Ks8gg8c+3OTNAyXmfaMQF3XkoDTtp5HU1q3n1ATIx1XzQw
/izVXWfG
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE "WMSYS"."OWM_MIG_PKG" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
4fa 233
lGvA6wxWZPdXwFvUGIwVNBj600Awg2O3ACAFfC9AgsHquG10kfz8KVlBATxdpFIaFBIGBI7p
UEhz+GxDwwJsrdwvSjSccu3+r6aS52LlD6qHTh7QnOT4wW2szjCt8kQ48Oi2w49oGUFmCcJG
4oD0p6F5H2Z4BP04waUu4CZ508GqKCMvEKY66HS5a8ehzMFoyY3WIWqKAnPBNRX/zfKN/lUP
/a52tPGvXuWcUtG8wL+A9oPW8PRD2DEyQeBhiWnnaAkE2yPITvNy7yDRFulnv56A1463Z+4h
zCxQanfQFyojhTYcsNnXnoDZ3cBf+9IluL2qAAfBHFu7fzc3NrLuyJbNJj6cThIYwVQnEoNH
fKzsEEvL2VZC/qQyo7SQFO+1LtKo63LlrliE5QVpByVRfjx9Af8ZYeEBEIPz63Fwei/y0aA9
IQOpefREA9Z1ZRhLTaTHJm3oHIqv6XHfDsJm0lScVirrtItjS4JC8dfWDXN4rNWUsc6JsCaP
E5PVzmC4vfm1H5q6ndGJK/00+SEssyGGermKKTPz+n4s+eGjTl7f
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE "WMSYS"."OWM_BULK_LOAD_PKG" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
97e 30a
RJdoUsp6vBf8TGstPt1Sc84fGMkwgzunr0oFyi9AEv9eR2sJ0yawMzxNW3QL/VipKmduM6yj
XPw4xIOH5bw/9JBXLXhSpbnATg4gBM61+7Ff6thnMJL+2uTO+M4vHE+8tXSqHD/7A21EZ+is
d+AsuLsO/WgRHnWfSwvbDGAs6k88pTqZVpoXJ76ToB3K/uza3iGPh6MfN1nul1hg74GPW+M4
12G0gDxnfXrehV/MhdLJyPKDdGPRZWTFAXVnLSfrQN/2461AWIZHqDpw4CP7bdytATBsMkgr
19/1D3IpXnDruQ0basww5oVLyJLDD1aBkzdVfdlx3XcEzTgcaATlftdXy1H0SwHa2PB34kwQ
G0cMXVyFskTu9mytxxHu9Y+/VJMRhASOA9HK9ymfkNSDMI8INHZ/eZNJfVhMIEDyDenUq5aV
/NB+EVjz9KM09xVkULEFU2h1NEu1jtUaQ19Gsh9jSdHa5tCLWuZ/YY5S0nrq2H2MPpccofEd
IQJu9etUsXG5LgNDYDHoX+o8Kjjrq48Y2N6PlMzrjgJrxxdWvoTCLczRTI6YHJka3rl3+4D5
qUlSvG8Ie3yjEJSXFYl2DbDh0HLU2aOKAs0ydZzadp/GcYr1eRmV7NOMhL7gzOSIsdKUr5Z8
L3WCZHZWXFbeQoLZlIFyOX23EWR3146bzoJ8eyO+lQSaPFBa6mFPpdcRWdkx8nLAByFLccG3
IgLv0AvryMzFbaohv9F92weKKu3PhpKtEwAi7xO/tfsRpvtI
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE "WMSYS"."OWM_MP_PKG" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
3a1 1be
AYKIDZLZECNdTG1flxqIUFbGqzMwg5AJmEjhfy9Z1+pT412E5lpr7SctH0ulDB4A0cPRXqIW
9TpzBFpKmHFn89FxiiMXyRd2NXk48AaGTsgoxs/PqrbIG5zv2+UIGC6l4Q8uBl3g/RETZhaO
RmjIH9kvVqxkW2SxhfasUwg1C+Xyqo1k1trKDfujR9smkEIsfzLpa1JE8AGo1T6hl1iJi8+6
PrDAkmqDRaCux9my/dogVQOzfa2CVk4leuhs4ZDKRSvRO/gJLI6GlMOk2QzQUdXR1I6QAIRX
664awH8osfgNalWU2oYQC831bkhr8I6O/EBpqTzI0bjqkrVTgwXYHObF5nAh0aOMdLAR5K0N
BTeNIZRYMDPuG8Vrmdp29qSTgciL0nMN4Fo0hPLpl2LtqtdFVE3dqO9cHAXTB3kjtoE27eJP
vKYdk87n
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE "WMSYS"."OWM_IEXP_PKG" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
6c4 2a5
kJjIHTXdOt65650eYMgdHdEKZ6Qwg5DDLiAFfHRVrZ2sxm+0Y81QspkjcJF7lGb0QBQF+qGw
OARAOO15JKoJBs5esvEIyfztgMzQ9QLgB7qsmqo/Aiya+bwCxE+a+1UnRGf4GDso7JmT8sXm
Nxwd/TKpBKzwThF6WobeDG+8vN0d2Fvs5q7/rqFCg4Z1QGNJ/Xbfw1Lb3figrrbsmXGH6fjC
2BvajnEOAHqW2UxqEuz1sFIsq8Mqr1fANMGwhW2iJrXZRkqfCr2keYRsuuwkwfgbbpZCMr9P
Xsc+ppeD55YxZwoMlEmz59F94j1rqB4JvIwQX6lwEbsLHKugBpTNhn+TyBhEz80baUOUbVXn
WHx3qprWbA8Fh/kwqKmXwg5RYXetn8FSjBa49mY2YCewNDUAeZ82k69lUR+AJlBZDj5PGtwp
/XcJgJkWd9ErEQ8+oxaO1GQDuab7v7hB0jY9JA9hKz3904yqEXW7ZyxSixYKd/oakxmmfnWU
a/Tydiij1QBEgwzBYzEcwWEHaE9v4Lh9ITKCB4vwyRBFl4zYshewSLj6xxExuXECrKcjYwHt
V51NxLi/I51fZB/w6e8Glqx5GYfYxTLn3rdoZ60Sp7fvtqqkrCf3p0JAu647R6TBXfWUVgNP
NFBLFR6UWOBz7iyWwo0y
/

CREATE OR REPLACE NONEDITIONABLE PACKAGE "WMSYS"."OWM_DML_PKG" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
9
6b5 288
bjAVMTNauZ+feDpuUvmQCLu5rvAwg5DDLUoFfHTNzw9r7kBvUyYeLnr0YQKF8WeX3OsCDDfL
zWtVkvhjEK3a3F/U4klYZiws+oABS1tNs+SSTsWah6qXuyya8MEHCILo/FFiIunHfix5GHHn
z1ZWRIfhIissFxOJXmDrHTE5fU637uFjhpnW0MudVu0iiBUlzHeYrColTjLyX+1Ngvbo1NoH
t8FzhRxbQSIr3g69k+2/FEjUGP/pI59UNR+Xi4p5p+zKeMBZ9Y90b8GnLr9cqSPa77LZZ6N3
4ceRgFTzwNa5AM76bkz+Y8p+XtBI8NLy8bK4bubQ9rg+V+lqZOxQzXWeQtrECBRtj/2VVemG
t8JmEUTmaY0Cy0J/iohCsDN76oWxBjQGHwVa6JFbfbN7SpFJJZOVeAgKuivIZkYeMnb+OA+b
HPSBTawEEiLDDmwps8aj0sCzyryKnN/rmAa6buPF0pC7bOeE0K3ehUSJ7HnWM8pcZlJMyxnm
NYcjS2WeFpIv6UB4+RNcUB81UaIDV/78EemaIAanEyluzeoVAGHT8QBWO/7aYUXOX3p0Lrrp
fNNuSFb6quro0zNzw1WlxzUscR7ElsZfrfD4c6S2mstOgbUjFyx8RcEoqvsXJtvF
/

GRANT EXECUTE ON "WMSYS"."LT" TO PUBLIC;
CREATE OR REPLACE NONEDITIONABLE PROCEDURE "WMSYS"."VALIDATE_OWM" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
141 148
pXtd6jJqQQ6UMETs7H0NEzPl6mIwg3nQ1ydqfC9GEjNeii6fPqi/sfuTo8bFkr2DMl+uG1B2
4WK+RtKBmJ+DXgptcBfJwQWE3DnNyPO5sNDZ+CmfQWQPT49Npnz3r+nUAMlNbW/+0Zd3YTeL
N5C/enlZnlvBUhvrC1Bjqx0uGoePv+LtIJ+QM0aN2Mgha4BqUSj32cEnMU+nZvdFbuFacNzN
EzBvrC2AqAwLjqw5P2HWSiugxu88ei80uWekDb8rACdxW0Osmt1h4bl/4jeUANmk20KD2PkJ
Y39N5W+kApssE22qX7PyNUyFDyQQHd8SrlQ=
/


ALTER PROCEDURE "WMSYS"."VALIDATE_OWM"
  COMPILE
    PLSQL_OPTIMIZE_LEVEL=  2
    PLSQL_CODE_TYPE=  INTERPRETED
    PLSQL_DEBUG=  FALSE    PLSCOPE_SETTINGS=  'IDENTIFIERS:NONE'

 REUSE SETTINGS TIMESTAMP '2014-07-07 06:06:04'
/

CREATE INDEX "WMSYS"."SYS_FK0000019927N00034$" ON "WMSYS"."WM$EVENT_AUX_PARAMS_NT" ("NESTED_TABLE_ID")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$WORKSPACES_PK" ON "WMSYS"."WM$WORKSPACES_TABLE$" ("WORKSPACE")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$WORKSPACE_LOCK_ID_UNQ" ON "WMSYS"."WM$WORKSPACES_TABLE$" ("WORKSPACE_LOCK_ID")
  ;

CREATE INDEX "WMSYS"."WM$WORKSPACES_MP_IDX" ON "WMSYS"."WM$WORKSPACES_TABLE$" ("MP_ROOT")
  ;

CREATE INDEX "WMSYS"."WM$WS_TAB_PWS_IND" ON "WMSYS"."WM$WORKSPACES_TABLE$" ("PARENT_WORKSPACE#")
  ;

CREATE INDEX "WMSYS"."WM$WS_TAB_PVER_IND" ON "WMSYS"."WM$WORKSPACES_TABLE$" ("PARENT_VERSION")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$VER_TAB_VTID_UNQ" ON "WMSYS"."WM$VERSIONED_TABLES$" ("VTID#")
  ;

CREATE INDEX "WMSYS"."WM$VER_TAB_OWNER" ON "WMSYS"."WM$VERSIONED_TABLES$" ("OWNER")
  ;

CREATE INDEX "WMSYS"."WM$VER_TAB_BL_VERSION" ON "WMSYS"."WM$VERSIONED_TABLES$" ("BL_VERSION")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$VERSIONED_TABLES__PK" ON "WMSYS"."WM$VERSIONED_TABLES$" ("TABLE_NAME", "OWNER")
  ;

CREATE INDEX "WMSYS"."SYS_FK0000019983N00006$" ON "WMSYS"."WM$VERSIONED_TABLES_UNDO_CODE" ("NESTED_TABLE_ID")
  ;

CREATE INDEX "WMSYS"."WM$BCT_IDX" ON "WMSYS"."WM$BATCH_COMPRESSIBLE_TABLES$" ("WORKSPACE#", "VTID#")
  ;

CREATE INDEX "WMSYS"."WM$CONS_COLUMNS_IDX" ON "WMSYS"."WM$CONS_COLUMNS$" ("VTID#", "CONSTRAINT_NAME")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$ENV_VARS_PK" ON "WMSYS"."WM$ENV_VARS$" ("NAME")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$EVENTS_INFO_PK" ON "WMSYS"."WM$EVENTS_INFO$" ("EVENT_NAME")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$HASH_TABLE_INDEX" ON "WMSYS"."WM$HASH_TABLE$" ("HASH")
  ;

CREATE INDEX "WMSYS"."WM$LOCKROWS_INFO_IDX" ON "WMSYS"."WM$LOCKROWS_INFO$" ("WORKSPACE#")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$MODIFIED_TABLES_PK" ON "WMSYS"."WM$MODIFIED_TABLES$" ("WORKSPACE#", "VTID#", "VERSION")
  ;

CREATE INDEX "WMSYS"."WM$MODIFIED_TAB_VERSION" ON "WMSYS"."WM$MODIFIED_TABLES$" ("VERSION", "WORKSPACE#")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$MP_GRAPH_WORKSPACES_PK" ON "WMSYS"."WM$MP_GRAPH_WORKSPACES_TABLE$" ("MP_LEAF_WORKSPACE#", "MP_GRAPH_WORKSPACE#")
  ;

CREATE INDEX "WMSYS"."WM$MP_GRAPH_WORKSPACE_IDX" ON "WMSYS"."WM$MP_GRAPH_WORKSPACES_TABLE$" ("MP_GRAPH_WORKSPACE#")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$MP_PARENT_PK" ON "WMSYS"."WM$MP_PARENT_WORKSPACES_TABLE$" ("WORKSPACE#", "PARENT_WORKSPACE#")
  ;

CREATE INDEX "WMSYS"."WM$MP_PWS_TAB_PVER_IND" ON "WMSYS"."WM$MP_PARENT_WORKSPACES_TABLE$" ("PARENT_VERSION")
  ;

CREATE INDEX "WMSYS"."WM$MP_PWS_TAB_PWS_IND" ON "WMSYS"."WM$MP_PARENT_WORKSPACES_TABLE$" ("PARENT_WORKSPACE#")
  ;

CREATE INDEX "WMSYS"."WM$MW_TAB_WS_IDX" ON "WMSYS"."WM$MW_TABLE$" ("WORKSPACE#") ;
CREATE UNIQUE INDEX "WMSYS"."WM$NESTED_COLUMNS_PK" ON "WMSYS"."WM$NESTED_COLUMNS_TABLE$" ("VTID#", "COLUMN_NAME")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$NEXTVER_TABLE_INDX" ON "WMSYS"."WM$NEXTVER_TABLE$" ("VERSION", "NEXT_VERS")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$NEXTVER_TABLE_NV_INDX" ON "WMSYS"."WM$NEXTVER_TABLE$" ("NEXT_VERS", "VERSION", "WORKSPACE#")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$REMOVED_WORKSPACES_PK" ON "WMSYS"."WM$REMOVED_WORKSPACES_TABLE$" ("WORKSPACE_ID")
  ;

CREATE INDEX "WMSYS"."WM$RWT_WS_NAME" ON "WMSYS"."WM$REMOVED_WORKSPACES_TABLE$" ("WORKSPACE_NAME")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$REP_DETAILS_PK" ON "WMSYS"."WM$REPLICATION_TABLE$" ("GROUPNAME")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$RESOLVE_WORKSPACES_PK" ON "WMSYS"."WM$RESOLVE_WORKSPACES_TABLE$" ("WORKSPACE#")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$RIC_PK" ON "WMSYS"."WM$RIC_TABLE$" ("CT_VTID#", "RIC_NAME")
  ;

CREATE INDEX "WMSYS"."WM$RIC_TAB_PT" ON "WMSYS"."WM$RIC_TABLE$" ("PT_VTID#")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$RIC_TRIGGERS_PK" ON "WMSYS"."WM$RIC_TRIGGERS_TABLE$" ("PT_VTID#", "CT_VTID#")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$ENV_SYS_PK" ON "WMSYS"."WM$SYSPARAM_ALL_VALUES$" ("NAME", "VALUE")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$UDTRIG_DISPATCH_PROCS_PK" ON "WMSYS"."WM$UDTRIG_DISPATCH_PROCS$" ("VTID#")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$UDTRIG_INFO_PK" ON "WMSYS"."WM$UDTRIG_INFO$" ("TRIG_OWNER_NAME", "TRIG_NAME")
  ;

CREATE INDEX "WMSYS"."WM$UDTRIG_INFO_VTID" ON "WMSYS"."WM$UDTRIG_INFO$" ("VTID#")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$VERSION_HIERARCHY_PK" ON "WMSYS"."WM$VERSION_HIERARCHY_TABLE$" ("VERSION")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$VHT_IDX" ON "WMSYS"."WM$VERSION_HIERARCHY_TABLE$" ("WORKSPACE#", "VERSION")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$VERSION_PK" ON "WMSYS"."WM$VERSION_TABLE$" ("WORKSPACE#", "ANC_WORKSPACE#")
  ;

CREATE INDEX "WMSYS"."WM$VT_ANC_IDX" ON "WMSYS"."WM$VERSION_TABLE$" ("ANC_WORKSPACE#", "ANC_VERSION")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$VT_ERRORS_PK" ON "WMSYS"."WM$VT_ERRORS_TABLE$" ("VTID#")
  ;

CREATE INDEX "WMSYS"."WM$WS_PRIV_TAB_WS_GRTE_IND" ON "WMSYS"."WM$WORKSPACE_PRIV_TABLE$" ("WORKSPACE#", "GRANTEE")
  ;

CREATE INDEX "WMSYS"."WM$WS_PRIV_TAB_GRTOR_IND" ON "WMSYS"."WM$WORKSPACE_PRIV_TABLE$" ("GRANTOR")
  ;

CREATE INDEX "WMSYS"."WM$WS_PRIV_TAB_GRTE_IND" ON "WMSYS"."WM$WORKSPACE_PRIV_TABLE$" ("GRANTEE")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$WORKSPACE_SAVEPOINTS_PK" ON "WMSYS"."WM$WORKSPACE_SAVEPOINTS_TABLE$" ("WORKSPACE#", "SAVEPOINT")
  ;

CREATE INDEX "WMSYS"."WM$WS_SP_TAB_VER_IND" ON "WMSYS"."WM$WORKSPACE_SAVEPOINTS_TABLE$" ("VERSION")
  ;

CREATE INDEX "WMSYS"."WM$VER_TAB_FNAME" ON "WMSYS"."WM$VERSIONED_TABLES$" ("OWNER"||'.'||"TABLE_NAME")
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$CONSTRAINTS_TABLE_TAB_PK" ON "WMSYS"."WM$CONSTRAINTS_TABLE$" ("VTID#", "CONSTRAINT_NAME", BITAND("WM$FLAG",8))
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$HINT_TABLE_UNQ" ON "WMSYS"."WM$HINT_TABLE$" ("HINT_ID", "VTID#", BITAND("WM$FLAG",1))
  ;

CREATE UNIQUE INDEX "WMSYS"."WM$PRIV_TAB_PK" ON "WMSYS"."WM$WORKSPACE_PRIV_TABLE$" ("GRANTEE", "WORKSPACE#", BITAND("WM$FLAG",31))
  ;

ALTER TABLE "WMSYS"."WM$EVENT_QUEUE_TABLE" ADD PRIMARY KEY ("MSGID")
  USING INDEX  ENABLE;

ALTER TABLE "WMSYS"."AQ$_WM$EVENT_QUEUE_TABLE_S" ADD PRIMARY KEY ("SUBSCRIBER_ID")
  USING INDEX  ENABLE;

ALTER TABLE "WMSYS"."WM$WORKSPACES_TABLE$" ADD CONSTRAINT "WM$WORKSPACES_PK" PRIMARY KEY ("WORKSPACE")
  USING INDEX  ENABLE;

ALTER TABLE "WMSYS"."WM$WORKSPACES_TABLE$" ADD CONSTRAINT "WM$WORKSPACE_LOCK_ID_UNQ" UNIQUE ("WORKSPACE_LOCK_ID")
  USING INDEX  ENABLE;

ALTER TABLE "WMSYS"."WM$VERSIONED_TABLES$" ADD CONSTRAINT "WM$VERSIONED_TABLES__PK" PRIMARY KEY ("TABLE_NAME", "OWNER")
  USING INDEX  ENABLE;

ALTER TABLE "WMSYS"."WM$ENV_VARS$" ADD CONSTRAINT "WM$ENV_VARS_PK" PRIMARY KEY ("NAME")
  USING INDEX  ENABLE;

ALTER TABLE "WMSYS"."WM$EVENTS_INFO$" ADD CONSTRAINT "WM$EVENTS_INFO_PK" PRIMARY KEY ("EVENT_NAME")
  USING INDEX  ENABLE;

ALTER TABLE "WMSYS"."WM$MODIFIED_TABLES$" ADD CONSTRAINT "WM$MODIFIED_TABLES_PK" PRIMARY KEY ("WORKSPACE#", "VTID#", "VERSION")
  USING INDEX  ENABLE;

ALTER TABLE "WMSYS"."WM$MP_GRAPH_WORKSPACES_TABLE$" ADD CONSTRAINT "WM$MP_GRAPH_WORKSPACES_PK" PRIMARY KEY ("MP_LEAF_WORKSPACE#", "MP_GRAPH_WORKSPACE#")
  USING INDEX  ENABLE;

ALTER TABLE "WMSYS"."WM$MP_PARENT_WORKSPACES_TABLE$" ADD CONSTRAINT "WM$MP_PARENT_PK" PRIMARY KEY ("WORKSPACE#", "PARENT_WORKSPACE#")
  USING INDEX  ENABLE;

ALTER TABLE "WMSYS"."WM$NESTED_COLUMNS_TABLE$" ADD CONSTRAINT "WM$NESTED_COLUMNS_PK" PRIMARY KEY ("VTID#", "COLUMN_NAME")
  USING INDEX  ENABLE;

ALTER TABLE "WMSYS"."WM$REMOVED_WORKSPACES_TABLE$" ADD CONSTRAINT "WM$REMOVED_WORKSPACES_PK" PRIMARY KEY ("WORKSPACE_ID")
  USING INDEX  ENABLE;

ALTER TABLE "WMSYS"."WM$REPLICATION_TABLE$" ADD CONSTRAINT "WM$REP_DETAILS_PK" PRIMARY KEY ("GROUPNAME")
  USING INDEX  ENABLE;

ALTER TABLE "WMSYS"."WM$RESOLVE_WORKSPACES_TABLE$" ADD CONSTRAINT "WM$RESOLVE_WORKSPACES_PK" PRIMARY KEY ("WORKSPACE#")
  USING INDEX  ENABLE;

ALTER TABLE "WMSYS"."WM$RIC_TABLE$" ADD CONSTRAINT "WM$RIC_PK" PRIMARY KEY ("CT_VTID#", "RIC_NAME")
  USING INDEX  ENABLE;

ALTER TABLE "WMSYS"."WM$RIC_TRIGGERS_TABLE$" ADD CONSTRAINT "WM$RIC_TRIGGERS_PK" PRIMARY KEY ("PT_VTID#", "CT_VTID#")
  USING INDEX  ENABLE;

ALTER TABLE "WMSYS"."WM$SYSPARAM_ALL_VALUES$" ADD CONSTRAINT "WM$ENV_SYS_PK" PRIMARY KEY ("NAME", "VALUE")
  USING INDEX  ENABLE;

ALTER TABLE "WMSYS"."WM$UDTRIG_DISPATCH_PROCS$" ADD CONSTRAINT "WM$UDTRIG_DISPATCH_PROCS_PK" PRIMARY KEY ("VTID#")
  USING INDEX  ENABLE;

ALTER TABLE "WMSYS"."WM$UDTRIG_INFO$" ADD CONSTRAINT "WM$UDTRIG_INFO_PK" PRIMARY KEY ("TRIG_OWNER_NAME", "TRIG_NAME")
  USING INDEX  ENABLE;

ALTER TABLE "WMSYS"."WM$VERSION_HIERARCHY_TABLE$" ADD CONSTRAINT "WM$VERSION_HIERARCHY_PK" PRIMARY KEY ("VERSION")
  USING INDEX  ENABLE;

ALTER TABLE "WMSYS"."WM$VERSION_TABLE$" ADD CONSTRAINT "WM$VERSION_PK" PRIMARY KEY ("WORKSPACE#", "ANC_WORKSPACE#")
  USING INDEX  ENABLE;

ALTER TABLE "WMSYS"."WM$VT_ERRORS_TABLE$" ADD CONSTRAINT "WM$VT_ERRORS_PK" PRIMARY KEY ("VTID#")
  USING INDEX  ENABLE;

ALTER TABLE "WMSYS"."WM$WORKSPACE_SAVEPOINTS_TABLE$" ADD CONSTRAINT "WM$WORKSPACE_SAVEPOINTS_PK" PRIMARY KEY ("WORKSPACE#", "SAVEPOINT")
  USING INDEX  ENABLE;

-- [dbsrc POST-PROCESSED]:
-- (16) Handle sqlplus limitation by injecting newlines after commas
--      between double-quotes in "select *" view bodies (SP2-0027:
--      Input is too long (> 2499 characters) - line ignored).
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."AQ$WM$EVENT_QUEUE_TABLE_S" ("QUEUE",
"NAME",
"ADDRESS",
"PROTOCOL",
"TRANSFORMATION",
"QUEUE_TO_QUEUE") AS
  SELECT queue_name QUEUE, name NAME , address ADDRESS , protocol PROTOCOL, trans_name TRANSFORMATION, decode(bitand(SUBSCRIBER_TYPE, 512), 512, 'TRUE', 'FALSE') QUEUE_TO_QUEUE  FROM "AQ$_WM$EVENT_QUEUE_TABLE_S" s  WHERE (bitand(s.subscriber_type, 1) = 1)  WITH READ ONLY;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."AQ$WM$EVENT_QUEUE_TABLE" ("QUEUE",
"MSG_ID",
"CORR_ID",
"MSG_PRIORITY",
"MSG_STATE",
"DELAY",
"DELAY_TIMESTAMP",
"EXPIRATION",
"ENQ_TIME",
"ENQ_TIMESTAMP",
"ENQ_USER_ID",
"ENQ_TXN_ID",
"DEQ_TIME",
"DEQ_TIMESTAMP",
"DEQ_USER_ID",
"DEQ_TXN_ID",
"RETRY_COUNT",
"EXCEPTION_QUEUE_OWNER",
"EXCEPTION_QUEUE",
"USER_DATA",
"PROPAGATED_MSGID",
"SENDER_NAME",
"SENDER_ADDRESS",
"SENDER_PROTOCOL",
"ORIGINAL_MSGID",
"ORIGINAL_QUEUE_NAME",
"ORIGINAL_QUEUE_OWNER",
"EXPIRATION_REASON",
"CONSUMER_NAME",
"ADDRESS",
"PROTOCOL") AS
  SELECT  q_name QUEUE, qt.msgid MSG_ID, corrid CORR_ID,  priority MSG_PRIORITY,  decode(bitand(s.subscriber_type,2) , 2,'UNDELIVERABLE',
                                             decode(h.dequeue_time, NULL,decode(l.dequeue_time, NULL, decode(state, 0,   'READY',	
                              		                                          1,   'WAIT',	
                                                                                  2,   'PROCESSED',	
                                                                                  3,   'EXPIRED',
                                                                                  8,   'DEFERRED',
                                                                                 10,  'BUFFERED_EXPIRED'),(decode(l.transaction_id, NULL, 'UNDELIVERABLE', 'PROCESSED'))), (decode(h.transaction_id, NULL, 'UNDELIVERABLE', 'PROCESSED')))
                          )                         MSG_STATE,  cast(FROM_TZ(qt.delay, '00:00')
                 at time zone sessiontimezone as date) delay,  cast(FROM_TZ(qt.delay, '00:00')
                 at time zone sessiontimezone as timestamp) DELAY_TIMESTAMP, expiration,  cast(FROM_TZ(qt.enq_time, '00:00')
                 at time zone sessiontimezone as date) enq_time,  cast(FROM_TZ(qt.enq_time, '00:00')
                 at time zone sessiontimezone as timestamp)
                 enq_timestamp,   enq_uid ENQ_USER_ID,  qt.enq_tid ENQ_TXN_ID,  decode(h.transaction_id, NULL,
                 decode(l.transaction_id, NULL, TO_DATE(NULL), l.dequeue_time),
                        cast(FROM_TZ(h.dequeue_time, '00:00')
                 at time zone sessiontimezone as date)) DEQ_TIME,  decode(h.transaction_id, NULL,
            decode(l.transaction_id, NULL, TO_TIMESTAMP(NULL), l.dequeue_time),
                        cast(FROM_TZ(h.dequeue_time, '00:00')
                 at time zone sessiontimezone as timestamp))
                 DEQ_TIMESTAMP,  decode(h.dequeue_user, NULL, l.dequeue_user, h.dequeue_user)
	         DEQ_USER_ID,  decode(h.transaction_id, NULL, l.transaction_id,
                 h.transaction_id) DEQ_TXN_ID,  h.retry_count retry_count,  decode (state, 0, exception_qschema,
                                1, exception_qschema,
                                2, exception_qschema,
                                NULL) EXCEPTION_QUEUE_OWNER,  decode (state, 0, exception_queue,
                                1, exception_queue,
                                2, exception_queue,
                                NULL) EXCEPTION_QUEUE,  user_data,  h.propagated_msgid PROPAGATED_MSGID,  sender_name  SENDER_NAME, sender_address  SENDER_ADDRESS, sender_protocol  SENDER_PROTOCOL, dequeue_msgid ORIGINAL_MSGID,  decode (h.dequeue_time, NULL, decode (l.dequeue_time, NULL,
                   decode (state, 3, exception_queue, NULL),
                   decode (l.transaction_id, NULL, NULL, exception_queue)),
                   decode (h.transaction_id, NULL, NULL, exception_queue))
                                ORIGINAL_QUEUE_NAME,  decode (h.dequeue_time, NULL, decode (l.dequeue_time, NULL,
                   decode (state, 3, exception_qschema, NULL),
                   decode (l.transaction_id, NULL, NULL, exception_qschema)),
                   decode (h.transaction_id, NULL, NULL, exception_qschema))
                                ORIGINAL_QUEUE_OWNER,  decode(bitand(s.subscriber_type, 2), 2,
                                         'Messages to be cleaned up later',
                        decode(h.dequeue_time, NULL,
                               decode(state, 3,
                                           decode(h.transaction_id, NULL,
                                           decode (expiration , NULL ,
                                                   'MAX_RETRY_EXCEEDED',
                                                   'TIME_EXPIRATION'),
                                                   'INVALID_TRANSACTION', NULL,
                                                   'MAX_RETRY_EXCEEDED'), NULL),
                                           decode(h.transaction_id, NULL,
                                                 'PROPAGATION_FAILURE', NULL)))
                 EXPIRATION_REASON,  decode(h.subscriber#, 0, decode(h.name, '0', NULL,
							        h.name),
					  s.name) CONSUMER_NAME,  s.address ADDRESS,  s.protocol PROTOCOL  FROM "WM$EVENT_QUEUE_TABLE" qt, "AQ$_WM$EVENT_QUEUE_TABLE_H" h LEFT OUTER JOIN  (SELECT fv.MSGID MSGID, fv.SUBSCRIBER# SUBSCRIBER#, fv.NAME NAME, 0 ADDRESS#, fv.DEQUEUE_TIME DEQUEUE_TIME,fv.TRANSACTION_ID TRANSACTION_ID, fv.DEQUEUE_USER DEQUEUE_USER, fv.FLAGS FLAGS FROM AQ$_UNFLUSHED_DEQUEUES fv WHERE fv.QTOBJNO = 19927 union select dl.MSGID MSGID, dl.SUBSCRIBER# SUBSCRIBER#, dl.NAME NAME, dl.ADDRESS# ADDRESS#, dl.DEQUEUE_TIME DEQUEUE_TIME, dl.TRANSACTION_ID TRANSACTION_ID, dl.DEQUEUE_USER DEQUEUE_USER, dl.FLAGS FLAGS from "WMSYS"."AQ$_WM$EVENT_QUEUE_TABLE_L" dl )  l  ON h.msgid = l.msgid AND h.subscriber# = l.subscriber# AND h.name = l.name AND h.address# = l.address#, "AQ$_WM$EVENT_QUEUE_TABLE_S" s  WHERE  qt.msgid = h.msgid AND  ((h.subscriber# != 0 AND h.subscriber# = s.subscriber_id)  OR (h.subscriber# = 0 AND h.address# = s.subscriber_id)) AND (qt.state != 7 OR   qt.state != 9 )     WITH READ ONLY;

-- [dbsrc POST-PROCESSED]:
-- (16) Handle sqlplus limitation by injecting newlines after commas
--      between double-quotes in "select *" view bodies (SP2-0027:
--      Input is too long (> 2499 characters) - line ignored).
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."AQ$_WM$EVENT_QUEUE_TABLE_F" ("Q_NAME",
"ROW_ID",
"MSGID",
"CORRID",
"PRIORITY",
"STATE",
"DELAY",
"EXPIRATION",
"ENQ_TIME",
"ENQ_UID",
"ENQ_TID",
"DEQ_TIME",
"DEQ_UID",
"DEQ_TID",
"RETRY_COUNT",
"EXCEPTION_QSCHEMA",
"EXCEPTION_QUEUE",
"CSCN",
"DSCN",
"CHAIN_NO",
"LOCAL_ORDER_NO",
"TIME_MANAGER_INFO",
"STEP_NO",
"USER_DATA",
"SENDER_NAME",
"SENDER_ADDRESS",
"SENDER_PROTOCOL",
"DEQUEUE_MSGID",
"DELIVERY_MODE",
"SEQUENCE_NUM",
"MSG_NUM",
"QUEUE_ID",
"USER_PROP",
"SUBSCRIBER_ID",
"SUBSCRIBER_NAME",
"QUEUE_EVTID") AS
  SELECT  /*+ NO_MERGE (qo) USE_NL(iot) */ qt.q_name Q_NAME, qt.rowid ROW_ID, qt.msgid MSGID, qt.corrid CORRID, qt.priority PRIORITY, qt.state STATE, cast(FROM_TZ(qt.delay, '00:00') at time zone sessiontimezone as timestamp) DELAY, qt.expiration EXPIRATION, cast(FROM_TZ(qt.enq_time, '00:00') at time zone sessiontimezone as timestamp) ENQ_TIME, qt.enq_uid ENQ_UID, qt.enq_tid ENQ_TID, cast(FROM_TZ(qt.deq_time, '00:00') at time zone sessiontimezone as timestamp) DEQ_TIME, qt.deq_uid DEQ_UID, qt.deq_tid DEQ_TID, qt.retry_count RETRY_COUNT, qt.exception_qschema EXCEPTION_QSCHEMA, qt.exception_queue EXCEPTION_QUEUE, qt.cscn CSCN, qt.dscn DSCN, qt.chain_no CHAIN_NO, qt.local_order_no LOCAL_ORDER_NO, cast(FROM_TZ(qt.time_manager_info, '00:00') at time zone sessiontimezone as timestamp)   TIME_MANAGER_INFO, qt.step_no STEP_NO, qt.user_data USER_DATA, qt.sender_name SENDER_NAME, qt.sender_address SENDER_ADDRESS, qt.sender_protocol SENDER_PROTOCOL, qt.dequeue_msgid DEQUEUE_MSGID, 'PERSISTENT' DELIVERY_MODE, 0 SEQUENCE_NUM, 0 MSG_NUM, qo.qid QUEUE_ID, qt.user_prop USER_PROP, iot.subscriber# SUBSCRIBER_ID, iot.name SUBSCRIBER_NAME, iot.queue# QUEUE_EVTID FROM "WM$EVENT_QUEUE_TABLE" qt, "AQ$_WM$EVENT_QUEUE_TABLE_I" iot, SYS.ALL_INT_DEQUEUE_QUEUES qo WHERE qt.msgid=iot.msgid  and qt.q_name = qo.name  AND qo.owner = 'WMSYS' AND iot.msg_enq_time = qt.enq_time AND  iot.msg_step_no = qt.step_no AND iot.msg_local_order_no = qt.local_order_no AND   iot.msg_chain_no = qt.chain_no  WITH READ ONLY;

-- [dbsrc POST-PROCESSED]:
-- (16) Handle sqlplus limitation by injecting newlines after commas
--      between double-quotes in "select *" view bodies (SP2-0027:
--      Input is too long (> 2499 characters) - line ignored).
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."AQ$WM$EVENT_QUEUE_TABLE_R" ("QUEUE",
"NAME",
"ADDRESS",
"PROTOCOL",
"RULE",
"RULE_SET",
"TRANSFORMATION") AS
  SELECT queue_name QUEUE, s.name NAME , address ADDRESS , protocol PROTOCOL, rule_condition RULE, ruleset_name RULE_SET, trans_name TRANSFORMATION  FROM "AQ$_WM$EVENT_QUEUE_TABLE_S" s , sys.all_rules r WHERE (bitand(s.subscriber_type, 1) = 1) AND s.rule_name = r.rule_name and r.rule_owner = 'WMSYS'  WITH READ ONLY;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$WORKSPACES_TABLE" ("WORKSPACE",
"CURRENT_VERSION",
"PARENT_VERSION",
"POST_VERSION",
"VERLIST",
"OWNER",
"CREATETIME",
"DESCRIPTION",
"WORKSPACE_LOCK_ID",
"FREEZE_STATUS",
"FREEZE_MODE",
"FREEZE_WRITER",
"OPER_STATUS",
"WM_LOCKMODE",
"ISREFRESHED",
"FREEZE_OWNER",
"SESSION_DURATION",
"IMPLICIT_SP_CNT",
"CR_STATUS",
"SYNC_PARVER",
"LAST_CHANGE",
"DEPTH",
"MP_ROOT",
"PARENT_WORKSPACE#",
"PARENT_WORKSPACE",
"PARENT_CURRENT_VERSION") AS
  select wt1.workspace,
       wt1.current_version,
       wt1.parent_version,
       wt1.post_version,
       null verlist,
       wt1.owner,
       wt1.createtime,
       wt1.description,
       wt1.workspace_lock_id,
       decode(bitand(wt1.wm$flag, 1), 0, 'UNLOCKED', 1, 'LOCKED') freeze_status,
       decode(bitand(wt1.wm$flag, 14), 0, null, 2, '1WRITER', 4, '1WRITER_SESSION', 6, 'NO_ACCESS', 8, 'READ_ONLY', 10,'WM_ONLY') freeze_mode,
       wt1.freeze_writer,
       null oper_status,
       decode(bitand(wt1.wm$flag, 112), 0, null, 16, 'S', 32, 'E', 48, 'WE', 64, 'VE', 80, 'C', 96, 'D') ||
         decode(bitand(wt1.wm$flag, 496),  0, null, ',') ||
         decode(bitand(wt1.wm$flag, 384), 0, null, 128, 'Y', 256, 'N') wm_lockmode,
       decode(bitand(wt1.wm$flag, 512), 0, 0, 1) isRefreshed,
       wt1.freeze_owner,
       decode(bitand(wt1.wm$flag, 1024), 0, 0, 1) session_duration,
       (select nvl(max(to_number(substr(st.savepoint, 5))), 0)
        from wmsys.wm$workspace_savepoints_table$ st
        where st.workspace# = wt1.workspace_lock_id and st.savepoint like 'ICP-%') implicit_sp_cnt,
       decode(bitand(wt1.wm$flag, 6144), 0, 'CRS_ALLCR', 2048, 'CRS_ALLNONCR', 4096, 'CRS_LEAF', 6144, 'CRS_MIXED') cr_status,
       wt1.sync_parver,
       wt1.last_change,
       wt1.depth,
       wt1.mp_root,
       wt2.workspace_lock_id parent_workspace#,
       wt2.workspace parent_workspace,
       wt2.current_version parent_current_version
from wmsys.wm$workspaces_table$ wt1, wmsys.wm$workspaces_table$ wt2
where wt1.parent_workspace# = wt2.workspace_lock_id(+) ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$VERSIONED_TABLES$D" ("VTID",
"TABLE_NAME",
"OWNER",
"DISABLING_VER",
"BL_VERSION",
"BL_SAVEPOINT",
"BL_CHECK_FOR_DUPLICATES",
"BL_SINGLE_TRANSACTION",
"VALIDTIME") AS
  select vt.vtid# vtid,
       vt.table_name,
       vt.owner,
       decode(bitand(vt.wm$flag, 31), 0, 'UNDEFINED', 1, 'VERSIONED', 2, 'HIDDEN', 3, 'EV', 4, 'LWEV', 5, 'DV', 6, 'LWDV', 7, 'LW_DISABLED', 8, 'DDL',
                                      9, 'BDDL', 10, 'CDDL', 11, 'ODDL', 12, 'TDDL', 13, 'AVTDDL', 14, 'BL_F_BEGIN', 15, 'BL_P_BEGIN', 16, 'BL_P_END',
                                     17, 'BL_R_BEGIN', 18, 'ADD_VT', 19, 'SYNCVTV1', 20, 'SYNCVTV2', 21, 'RB_IND', 22, 'RN_CONS', 23, 'RN_IND',
                                     24, 'D_HIST_COLS', 25, 'U_HIST_COLS') disabling_ver,
       vt.bl_version,
       decode(bitand(vt.wm$flag,1536), 0, null, 512, 'ROOT_VERSION', 1024, 'LATEST') bl_savepoint,
       decode(bitand(vt.wm$flag,6144), 0, null, 2048, 'NO', 4096, 'YES') bl_check_for_duplicates,
       decode(bitand(vt.wm$flag,24576), 0, null, 8192, 'NO', 16384, 'YES') bl_single_transaction,
       decode(bitand(vt.wm$flag, 256), 0, 0, 256, 1) validtime
from wmsys.wm$versioned_tables$ vt ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$VERSIONED_TABLES$H" ("VTID",
"TABLE_NAME",
"OWNER",
"NOTIFICATION",
"NOTIFYWORKSPACES",
"DISABLING_VER",
"RICWEIGHT",
"ISFASTLIVE",
"ISWORKFLOW",
"HIST",
"PKEY_COLS",
"UNDO_CODE",
"SITESLIST",
"REPSITECOUNT",
"BL_WORKSPACE",
"BL_VERSION",
"BL_SAVEPOINT",
"BL_CHECK_FOR_DUPLICATES",
"BL_SINGLE_TRANSACTION",
"VALIDTIME") AS
  select vt.vtid# vtid,
       vt.table_name,
       vt.owner,
       0 notification,
       null notifyworkspaces,
       decode(bitand(vt.wm$flag, 31), 0, 'UNDEFINED', 1, 'VERSIONED', 2, 'HIDDEN', 3, 'EV', 4, 'LWEV', 5, 'DV', 6, 'LWDV', 7, 'LW_DISABLED', 8, 'DDL',
                                      9, 'BDDL', 10, 'CDDL', 11, 'ODDL', 12, 'TDDL', 13, 'AVTDDL', 14, 'BL_F_BEGIN', 15, 'BL_P_BEGIN', 16, 'BL_P_END',
                                     17, 'BL_R_BEGIN', 18, 'ADD_VT', 19, 'SYNCVTV1', 20, 'SYNCVTV2', 21, 'RB_IND', 22, 'RN_CONS', 23, 'RN_IND',
                                     24, 'D_HIST_COLS', 25, 'U_HIST_COLS') disabling_ver,
       vt.ricweight,
       0 isfastlive,
       0 isworkflow,
       decode(bitand(vt.wm$flag, 224), 0, 'NONE', 32, 'VIEW_W_OVERWRITE', 64, 'VIEW_W_OVERWRITE_PERF',
                                      96, 'VIEW_WO_OVERWRITE', 128, 'VIEW_WO_OVERWRITE_PERF') hist,
       vt.pkey_cols,
       vt.undo_code,
       vt.siteslist,
       vt.repsitecount,
       null bl_workspace,
       vt.bl_version,
       decode(bitand(vt.wm$flag,1536), 0, null, 512, 'ROOT_VERSION', 1024, 'LATEST') bl_savepoint,
       decode(bitand(vt.wm$flag,6144), 0, null, 2048, 'NO', 4096, 'YES') bl_check_for_duplicates,
       decode(bitand(vt.wm$flag,24576), 0, null, 8192, 'NO', 16384, 'YES') bl_single_transaction,
       decode(bitand(vt.wm$flag, 256), 0, 0, 256, 1) validtime
from wmsys.wm$versioned_tables$ vt ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$VERSIONED_TABLES" ("VTID",
"TABLE_NAME",
"OWNER",
"NOTIFICATION",
"NOTIFYWORKSPACES",
"DISABLING_VER",
"RICWEIGHT",
"ISFASTLIVE",
"ISWORKFLOW",
"HIST",
"PKEY_COLS",
"UNDO_CODE",
"SITESLIST",
"REPSITECOUNT",
"BL_WORKSPACE",
"BL_VERSION",
"BL_SAVEPOINT",
"BL_CHECK_FOR_DUPLICATES",
"BL_SINGLE_TRANSACTION",
"VALIDTIME") AS
  select vtid, table_name, owner, notification, notifyworkspaces, disabling_ver, ricweight, isfastlive, isworkflow,
       hist, pkey_cols, undo_code, siteslist, repsitecount, bl_workspace, bl_version, bl_savepoint,
       bl_check_for_duplicates, bl_single_transaction, validtime
from wmsys.wm$versioned_tables$h
where disabling_ver<>'HIDDEN' ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$BATCH_COMPRESSIBLE_TABLES" ("WORKSPACE",
"TABLE_NAME",
"BEGIN_VERSION",
"END_VERSION",
"WHERE_CLAUSE") AS
  select wt.workspace,
       vt.owner || '.' || vt.table_name table_name,
       bct.begin_version,
       bct.end_version,
       bct.where_clause
from wmsys.wm$batch_compressible_tables$ bct, wmsys.wm$workspaces_table$ wt, wmsys.wm$versioned_tables$ vt
where bct.workspace# = wt.workspace_lock_id and
      bct.vtid# = vt.vtid# ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$CONS_COLUMNS" ("OWNER",
"CONSTRAINT_NAME",
"TABLE_NAME",
"COLUMN_NAME",
"POSITION") AS
  select vt.owner, cc.constraint_name, vt.table_name, cc.column_name, cc.position
from wmsys.wm$cons_columns$ cc, wmsys.wm$versioned_tables$ vt
where cc.vtid# = vt.vtid# ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$CONSTRAINTS_TABLE" ("OWNER",
"CONSTRAINT_NAME",
"CONSTRAINT_TYPE",
"TABLE_NAME",
"SEARCH_CONDITION",
"STATUS",
"INDEX_OWNER",
"INDEX_NAME",
"INDEX_TYPE",
"ALIASEDCOLUMNS",
"NUMINDEXCOLS") AS
  select vt.owner,
       ct.constraint_name,
       decode(bitand(ct.wm$flag, 7), 0, 'P', 1, 'PN', 2, 'PU', 3, 'U', 4, 'UI', 5, 'UN', 6, 'UU', 7, 'C') constraint_type,
       vt.table_name,
       ct.search_condition,
       decode(bitand(ct.wm$flag, 8), 0, 'DISABLED', 8, 'ENABLED') status,
       ct.index_owner,
       ct.index_name,
       decode(bitand(ct.wm$flag, 112), 0, null, 16, 'NORMAL', 32, 'BITMAP', 48, 'FUNCTION-BASED NORMAL',
                                       64, 'FUNCTION-BASED NORMAL DESC', 80, 'FUNCTION-BASED BITMAP', 96, 'DOMAIN') index_type,
       ct.aliasedcolumns,
       ct.numindexcols
from wmsys.wm$constraints_table$ ct, wmsys.wm$versioned_tables$ vt
where ct.vtid# = vt.vtid# ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$ENV_VARS" ("NAME",
"VALUE",
"HIDDEN") AS
  select ev.name,
       ev.value,
       decode(bitand(ev.wm$flag, 1), 0, 0, 1, 1) hidden
from wmsys.wm$env_vars$ ev ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$EVENTS_INFO" ("EVENT_NAME",
"CAPTURE") AS
  select ei.event_name, decode(bitand(ei.wm$flag, 1), 0, 'OFF', 1, 'ON') capture
from wmsys.wm$events_info$ ei ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$HASH_TABLE" ("HASH") AS
  select hash
from wmsys.wm$hash_table$ ht ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$HINT_TABLE" ("HINT_ID",
"OWNER",
"TABLE_NAME",
"HINT_TEXT",
"ISDEFAULT") AS
  select ht.hint_id, vt.owner, vt.table_name, ht.hint_text, decode(bitand(ht.wm$flag, 1), 0, 0, 1, 1) isdefault
from wmsys.wm$hint_table$ ht, wmsys.wm$versioned_tables$ vt
where ht.vtid# = vt.vtid#(+) ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$INSTEADOF_TRIGS_TABLE" ("TABLE_OWNER",
"TABLE_NAME",
"INSERT_TRIGGER_NAME",
"UPDATE_TRIGGER_NAME",
"DELETE_TRIGGER_NAME") AS
  select vt.owner table_owner, vt.table_name,
       'WMSYS.WM$' || vt.vtid || '$INSERT$' insert_trigger_name,
       'WMSYS.WM$' || vt.vtid || '$UPDATE$' update_trigger_name,
       'WMSYS.WM$' || vt.vtid || '$DELETE$' delete_trigger_name
from wmsys.wm$versioned_tables vt ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$LOCKROWS_INFO" ("WORKSPACE",
"OWNER",
"TABLE_NAME",
"WHERE_CLAUSE") AS
  select wt.workspace, vt.owner, vt.table_name, li.where_clause
from wmsys.wm$lockrows_info$ li, wmsys.wm$workspaces_table$ wt, wmsys.wm$versioned_tables$ vt
where li.vtid# = vt.vtid# and
      li.workspace# = wt.workspace_lock_id ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$MODIFIED_TABLES" ("VTID",
"TABLE_NAME",
"VERSION",
"WORKSPACE") AS
  select mt.vtid# vtid, vt.owner || '.' || vt.table_name table_name, mt.version, wt.workspace
from wmsys.wm$modified_tables$ mt, wmsys.wm$versioned_tables$ vt, wmsys.wm$workspaces_table$ wt
where mt.vtid# = vt.vtid# and
      mt.workspace# = wt.workspace_lock_id ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$MP_GRAPH_WORKSPACES_TABLE" ("MP_LEAF_WORKSPACE",
"MP_GRAPH_WORKSPACE",
"ANC_VERSION",
"MP_GRAPH_FLAG") AS
  select wt1.workspace mp_leaf_workspace, wt2.workspace mp_graph_workspace, mgwt.anc_version,
       decode(bitand(mgwt.wm$flag, 3), 0, 'I', 1, 'L', 2, 'R') mp_graph_flag
from wmsys.wm$mp_graph_workspaces_table$ mgwt, wmsys.wm$workspaces_table$ wt1, wmsys.wm$workspaces_table$ wt2
where mgwt.mp_leaf_workspace# = wt1.workspace_lock_id and
      mgwt.mp_graph_workspace# = wt2.workspace_lock_id ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$MP_PARENT_WORKSPACES_TABLE" ("WORKSPACE",
"PARENT_WORKSPACE",
"PARENT_VERSION",
"CREATOR",
"CREATETIME",
"WORKSPACE_LOCK_ID",
"PARENT_WORKSPACE#",
"ISREFRESHED",
"PARENT_FLAG") AS
  select wt1.workspace,
       wt2.workspace parent_workspace,
       mpwt.parent_version,
       mpwt.creator,
       mpwt.createtime,
       mpwt.workspace# workspace_lock_id,
       mpwt.parent_workspace#,
       decode(bitand(mpwt.wm$flag, 1), 0, 0, 1, 1) isrefreshed,
       decode(bitand(mpwt.wm$flag, 2), 0, 'DP', 2, 'MP') parent_flag
from wmsys.wm$mp_parent_workspaces_table$ mpwt, wmsys.wm$workspaces_table$ wt1, wmsys.wm$workspaces_table$ wt2
where mpwt.workspace# = wt1.workspace_lock_id and
      mpwt.parent_workspace# = wt2.workspace_lock_id ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$MW_TABLE" ("WORKSPACE") AS
  select wt.workspace
from wmsys.wm$mw_table$ mt, wmsys.wm$workspaces_table$ wt
where mt.workspace# = wt.workspace_lock_id ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$NESTED_COLUMNS_TABLE" ("OWNER",
"TABLE_NAME",
"COLUMN_NAME",
"POSITION",
"TYPE_OWNER",
"TYPE_NAME",
"NT_OWNER",
"NT_NAME",
"NT_STORE") AS
  select vt.owner,
       vt.table_name,
       nct.column_name,
       nct.position,
       nct.type_owner,
       nct.type_name,
       nct.nt_owner,
       nct.nt_name,
       nct.nt_store
from wmsys.wm$nested_columns_table$ nct, wmsys.wm$versioned_tables$ vt
where nct.vtid# = vt.vtid# ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$NEXTVER_TABLE" ("VERSION",
"NEXT_VERS",
"WORKSPACE",
"SPLIT") AS
  select nt.version, nt.next_vers, wt.workspace, nt.split
from wmsys.wm$nextver_table$ nt, wmsys.wm$workspaces_table$ wt
where nt.workspace# = wt.workspace_lock_id ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$REMOVED_WORKSPACES_TABLE" ("OWNER",
"WORKSPACE_NAME",
"WORKSPACE_ID",
"PARENT_WORKSPACE_NAME",
"PARENT_WORKSPACE_ID",
"CREATETIME",
"RETIRETIME",
"DESCRIPTION",
"MP_ROOT_ID",
"ISREFRESHED") AS
  select rwt1.owner,
       rwt1.workspace_name,
       rwt1.workspace_id,
       rwt2.workspace_name parent_workspace_name,
       rwt2.workspace_id parent_workspace_id,
       rwt1.createtime,
       rwt1.retiretime,
       rwt1.description,
       rwt1.mp_root_id,
       decode(bitand(rwt1.wm$flag, 1), 0, 0, 1, 1) isrefreshed
from wmsys.wm$removed_workspaces_table$ rwt1,
     (select workspace_name, workspace_id
      from wmsys.wm$removed_workspaces_table$
     union
      select workspace, workspace_lock_id
      from wmsys.wm$workspaces_table$) rwt2
where rwt1.parent_workspace_id = rwt2.workspace_id(+) ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$REPLICATION_DETAILS_TABLE" ("NAME",
"VALUE") AS
  select rdt.name, rdt.value
from wmsys.wm$replication_details_table$ rdt ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$REPLICATION_TABLE" ("GROUPNAME",
"MASTERDEFSITE",
"ISWRITERSITE",
"STATUS") AS
  select cast(substr(value, 1, p1-1) as varchar2(128)) groupname,
       cast(substr(value, p1+1, p2-p1-1) as varchar2(128)) masterdefsite,
       cast(substr(value, p2+1) as varchar2(1)) iswritersite,
       cast('E' as varchar2(1)) status
from (select value, instr(value, '|', 1) p1, instr(value, '|', -1) p2
      from wmsys.wm$env_vars
      where name = 'REPLICATION_DETAILS') ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$RESOLVE_WORKSPACES_TABLE" ("WORKSPACE",
"RESOLVE_USER",
"UNDO_SP_VER",
"OLDFREEZEMODE",
"OLDFREEZEWRITER") AS
  select wt.workspace, rwt.resolve_user, rwt.undo_sp# undo_sp_ver,
       decode(bitand(rwt.wm$flag, 7), 0, null, 1, '1WRITER', 2, '1WRITER_SESSION', 3, 'NO_ACCESS', 4, 'READ_ONLY', 5, 'WM_ONLY') oldfreezemode,
       rwt.oldfreezewriter
from wmsys.wm$resolve_workspaces_table$ rwt, wmsys.wm$workspaces_table$ wt
where rwt.workspace# = wt.workspace_lock_id ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$RIC_LOCKING_TABLE" ("PT_OWNER",
"PT_NAME",
"SLOCKNO",
"ELOCKNO") AS
  select vt.owner pt_owner, vt.table_name pt_name, rlt.slockno, rlt.elockno
from wmsys.wm$ric_locking_table$ rlt, wmsys.wm$versioned_tables$ vt
where rlt.pt_vtid# = vt.vtid# ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$RIC_TABLE" ("CT_OWNER",
"CT_NAME",
"PT_OWNER",
"PT_NAME",
"RIC_NAME",
"CT_COLS",
"PT_COLS",
"PT_UNIQUE_CONST_NAME",
"MY_MODE",
"STATUS") AS
  select vt1.owner ct_owner,
       vt1.table_name ct_name,
       vt2.owner pt_owner,
       vt2.table_name pt_name,
       rt.ric_name,
       rt.ct_cols,
       rt.pt_cols,
       rt.pt_unique_const_name,
       decode(bitand(rt.wm$flag, 3), 0, 'C', 1, 'N', 2, 'R') my_mode,
       decode(bitand(rt.wm$flag, 4), 0, 'DISABLED', 4, 'ENABLED') status
from wmsys.wm$ric_table$ rt, wmsys.wm$versioned_tables$ vt1, wmsys.wm$versioned_tables$ vt2
where rt.ct_vtid# = vt1.vtid# and
      rt.pt_vtid# = vt2.vtid# ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$RIC_TRIGGERS_TABLE" ("PT_OWNER",
"PT_NAME",
"CT_OWNER",
"CT_NAME",
"UPDATE_TRIGGER_NAME",
"DELETE_TRIGGER_NAME") AS
  select vt2.owner pt_owner, vt2.table_name pt_name, vt1.owner ct_owner, vt1.table_name ct_name,
       'WMSYS.WM$' || vt1.vtid# || '$LT_AU_' || rtt.trig# update_trigger_name,
       'WMSYS.WM$' || vt1.vtid# || '$LT_AD_' || rtt.trig# delete_trigger_name
from wmsys.wm$ric_triggers_table$ rtt, wmsys.wm$versioned_tables$ vt1, wmsys.wm$versioned_tables$ vt2
where rtt.ct_vtid# = vt1.vtid# and
      rtt.pt_vtid# = vt2.vtid# ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$SYSPARAM_ALL_VALUES" ("NAME",
"VALUE",
"ISDEFAULT",
"HIDDEN") AS
  select sav.name, sav.value, decode(bitand(sav.wm$flag, 1), 0, 'NO', 1, 'YES') isdefault, decode(bitand(sav.wm$flag, 2), 0, 0, 2, 1) hidden
from wmsys.wm$sysparam_all_values$ sav ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$UDTRIG_DISPATCH_PROCS" ("TABLE_OWNER_NAME",
"TABLE_NAME",
"DISPATCHER_NAME",
"TRIG_FLAG") AS
  select vt.owner table_owner_name,
       vt.table_name,
       'WMSYS.WM$DSP_UDT_' || udp.proc# dispatcher_name,
       udp.wm$flag trig_flag
from wmsys.wm$udtrig_dispatch_procs$ udp, wmsys.wm$versioned_tables$ vt
where udp.vtid# = vt.vtid# ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$UDTRIG_INFO" ("TRIG_OWNER_NAME",
"TRIG_NAME",
"TABLE_OWNER_NAME",
"TABLE_NAME",
"TRIG_FLAG",
"STATUS",
"TRIG_PROCEDURE",
"WHEN_CLAUSE",
"DESCRIPTION",
"TRIG_CODE",
"INTERNAL_TYPE",
"EVENT_FLAG") AS
  select ui.trig_owner_name,
       ui.trig_name,
       vt.owner table_owner_name,
       vt.table_name,
       decode(bitand(ui.wm$flag, 1), 0, 0, 1, 1) +
       decode(bitand(ui.wm$flag, 2), 0, 0, 2, 2) +
       decode(bitand(ui.wm$flag, 4), 0, 0, 4, 4) +
       decode(bitand(ui.wm$flag, 8), 0, 0, 8, 8) +
       decode(bitand(ui.wm$flag, 16), 0, 0, 16, 16) +
       decode(bitand(ui.wm$flag, 32), 0, 0, 32, 32) +
       decode(bitand(ui.wm$flag, 64), 0, 0, 64, 64) +
       decode(bitand(ui.wm$flag, 128), 0, 0, 128, 128) +
       decode(bitand(ui.wm$flag, 256), 0, 0, 256, 256) +
       decode(bitand(ui.wm$flag, 512), 0, 0, 512, 512) +
       decode(bitand(ui.wm$flag, 1024), 0, 0, 1024, 1024) +
       decode(bitand(ui.wm$flag, 2048), 0, 0, 2048, 2048) +
       decode(bitand(ui.wm$flag, 4096), 0, 0, 4096, 4096) trig_flag,
       decode(bitand(ui.wm$flag, 8192), 0, 'DISABLED', 8192, 'ENABLED') status,
       decode(proc#, null, null,
              decode(bitand(ui.wm$flag, 16384), 0, ui.trig_owner_name || '.WM$PROC_UDT_' || proc#, 16384, 'WMSYS.WM$PROC_RIC_' || proc#)) trig_procedure,
       ui.when_clause,
       ui.description,
       ui.trig_code,
       decode(bitand(ui.wm$flag, 16384), 0, 'USER_DEFINED', 16384, 'RIC_CHECK') internal_type,
       decode(bitand(ui.wm$flag, 32768), 0, 0, 32768, 32768) +
       decode(bitand(ui.wm$flag, 65536), 0, 0, 65536, 65536) +
       decode(bitand(ui.wm$flag, 131072), 0, 0, 131072, 131072) +
       decode(bitand(ui.wm$flag, 262144), 0, 0, 262144, 262144) +
       decode(bitand(ui.wm$flag, 524288), 0, 0, 524288, 524288) +
       decode(bitand(ui.wm$flag, 1048576), 0, 0, 1048576, 1048576) +
       decode(bitand(ui.wm$flag, 2097152), 0, 0, 2097152, 2097152) +
       decode(bitand(ui.wm$flag, 4194304), 0, 0, 4194304, 4194304) +
       decode(bitand(ui.wm$flag, 8388608), 0, 0, 8388608, 8388608) +
       decode(bitand(ui.wm$flag, 16777216), 0, 0, 16777216, 16777216) +
       decode(bitand(ui.wm$flag, 33554432), 0, 0, 33554432, 33554432) event_flag
from wmsys.wm$udtrig_info$ ui, wmsys.wm$versioned_tables$ vt
where ui.vtid# = vt.vtid# ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$VERSION_HIERARCHY_TABLE" ("VERSION",
"PARENT_VERSION",
"WORKSPACE",
"WM_LOCKMODE") AS
  select vht.version, vht.parent_version, wt.workspace,
       decode(bitand(wt.wm$flag, 112), 0, null, 16, 'S', 32, 'E', 48, 'WE', 64, 'VE', 80, 'C', 96, 'D') ||
         decode(bitand(wt.wm$flag, 496),  0, null, ',') ||
         decode(bitand(wt.wm$flag, 384), 0, null, 128, 'Y', 256, 'N') wm_lockmode
from wmsys.wm$version_hierarchy_table$ vht, wmsys.wm$workspaces_table$ wt
where vht.workspace# = wt.workspace_lock_id ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$VERSION_TABLE" ("WORKSPACE",
"ANC_WORKSPACE",
"ANC_VERSION",
"ANC_DEPTH",
"REFCOUNT") AS
  select wt1.workspace, wt2.workspace anc_workspace, vt.anc_version, vt.anc_depth, vt.refcount
from wmsys.wm$version_table$ vt, wmsys.wm$workspaces_table$ wt1, wmsys.wm$workspaces_table$ wt2
where vt.workspace# = wt1.workspace_lock_id and
      vt.anc_workspace# = wt2.workspace_lock_id ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$VT_ERRORS_TABLE" ("OWNER",
"TABLE_NAME",
"INDEX_TYPE",
"INDEX_FIELD",
"STATUS",
"ERROR_MSG") AS
  select vt.owner,
       vt.table_name,
       vet.index_type,
       vet.index_field,
       decode(bitand(vet.wm$flag, 31), 0,  'EV STEP BEING EXECUTED',
                                       1,  'EV STEP EXECUTED WITH ERRORS',
                                       2,  'DV STEP BEING EXECUTED',
                                       3,  'DV STEP EXECUTED WITH ERRORS',
                                       4,  'CDDL STEP BEING EXECUTED',
                                       5,  'CDDL STEP EXECUTED WITH ERRORS',
                                       6,  'UNDO EV STEP BEING EXECUTED',
                                       7,  'UNDO EV STEP EXECUTED WITH ERRORS',
                                       8,  'STATEMENT BEING EXECUTED',
                                       9,  'STATEMENT EXECUTED WITH ERRORS',
                                       10, 'ADD VALID TIME STEP BEING EXECUTED',
                                       11, 'ADD VALID TIME STEP EXECUTED WITH ERRORS',
                                       12, 'ALTERVERSIONEDTABLE DDL STEP BEING EXECUTED',
                                       13, 'ALTERVERSIONEDTABLE DDL STEP EXECUTED WITH ERRORS',
                                       14, 'REBUILD INDEX STEP BEING EXECUTED',
                                       15, 'REBUILD INDEX STEP EXECUTED WITH ERRORS',
                                       16, 'RENAME CONSTRAINT STEP BEING EXECUTED',
                                       17, 'RENAME CONSTRAINT STEP EXECUTED WITH ERRORS',
                                       18, 'RENAME INDEX STEP BEING EXECUTED',
                                       19, 'RENAME INDEX STEP EXECUTED WITH ERRORS',
                                       20, 'SYNCRONIZE VT VIEWS STEP BEING EXECUTED',
                                       21, 'SYNCRONIZE VT VIEWS STEP EXECUTED WITH ERRORS') status,
       vet.error_msg
from wmsys.wm$vt_errors_table$ vet, wmsys.wm$versioned_tables$ vt
where vet.vtid# = vt.vtid# ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$WORKSPACE_PRIV_TABLE" ("GRANTEE",
"WORKSPACE",
"GRANTOR",
"PRIV",
"ADMIN") AS
  select wpt.grantee,
       wt.workspace,
       wpt.grantor,
       decode(bitand(wpt.wm$flag, 31), 0, 'U',
                                       1, 'A', 2, 'M', 3, 'R', 4, 'D', 5, 'C', 6, 'F', 13, 'G',
                                       7, 'AA', 8, 'MA', 9, 'RA', 10, 'DA', 11, 'CA', 12, 'FA', 14, 'GA',
                                       15, 'W') priv,
       decode(bitand(wpt.wm$flag, 32), 0, 0, 32, 1) admin
from wmsys.wm$workspace_priv_table$ wpt, wmsys.wm$workspaces_table$ wt
where wpt.workspace# = wt.workspace_lock_id(+) ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$WORKSPACE_SAVEPOINTS_TABLE" ("WORKSPACE",
"SAVEPOINT",
"VERSION",
"POSITION",
"IS_IMPLICIT",
"OWNER",
"CREATETIME",
"DESCRIPTION") AS
  select wt.workspace,
       wst.savepoint,
       wst.version,
       (select count(*)+1
        from wmsys.wm$workspace_savepoints_table$ wst2
        where wst2.workspace# = wst.workspace# and
              (wst2.version < wst.version or (wst2.version = wst.version and wst2.createtime < wst.createtime))) position,
       decode(bitand(wst.wm$flag, 1), 0, 0, 1, 1) is_implicit,
       wst.owner,
       wst.createtime,
       wst.description
from wmsys.wm$workspace_savepoints_table$ wst, wmsys.wm$workspaces_table$ wt
where wst.workspace# = wt.workspace_lock_id ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$ALL_LOCKS_VIEW" ("OWNER",
"TABLE_NAME",
"LOCK_MODE",
"LOCK_OWNER",
"LOCKING_STATE") AS
  select vt.owner, vt.table_name,
       decode(wmsys.lt_ctx_pkg.getltlockinfo(translate(t.info USING CHAR_CS), 'ROW_LOCKMODE'),
              'E', 'EXCLUSIVE', 'S', 'SHARED', 'VE', 'VERSION EXCLUSIVE', 'WE','WORKSPACE EXCLUSIVE') lock_mode,
       wmsys.lt_ctx_pkg.getltlockinfo(translate(t.info USING CHAR_CS),'ROW_LOCKUSER') lock_owner,
       wmsys.lt_ctx_pkg.getltlockinfo(translate(t.info USING CHAR_CS),'ROW_LOCKSTATE') locking_state
from wmsys.wm$versioned_tables vt,
     table(wmsys.ltadm.get_lock_table(vt.owner, vt.table_name)) t
with READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$ALL_VERSION_HVIEW_WDEPTH" ("VERSION",
"PARENT_VERSION",
"WORKSPACE",
"WORKSPACE_ID",
"DEPTH") AS
  select vht.version, vht.parent_version, wt.workspace, vht.workspace# workspace_id, wt.depth
from wmsys.wm$version_hierarchy_table$ vht, wmsys.wm$workspaces_table$ wt
where vht.workspace# = wt.workspace_lock_id
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$ANC_VERSION_VIEW" ("VERSION",
"PARENT_VERS",
"WORKSPACE") AS
  select vht1.version, vht2.version parent_vers, vht1.workspace
from wmsys.wm$version_hierarchy_table vht1, wmsys.wm$version_hierarchy_table vht2, wmsys.wm$version_table vt
where vht1.workspace = vt.workspace and
      vht2.workspace = vt.anc_workspace and
      vht2.version  <= vt.anc_version
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$BASE_VERSION_VIEW" ("VERSION",
"WORKSPACE#") AS
  select decode(sign(vt1.anc_version - vt2.anc_version), 1, vt2.anc_version, vt1.anc_version) version,
       decode(sign(vt1.anc_version - vt2.anc_version), 1, vt2.anc_workspace#, vt1.anc_workspace#) workspace#
from (select vt1.anc_version, vt1.anc_workspace#
      from wmsys.wm$version_table$ vt1
      where vt1.workspace# = sys_context('lt_ctx', 'diffWspc1_id') and
            vt1.anc_workspace# = sys_context('lt_ctx', 'anc_workspace_id')
      union all
      select decode(sys_context('lt_ctx', 'diffver1'),
                    -1, (select current_version
                         from wmsys.wm$workspaces_table$
                         where workspace_lock_id = sys_context('lt_ctx', 'diffWspc1_id')),
                     sys_context('lt_ctx', 'diffver1')) version,
              cast(sys_context('lt_ctx', 'diffWspc1_id') as number)
      from sys.dual
      where sys_context('lt_ctx', 'anc_workspace_id') = sys_context('lt_ctx', 'diffWspc1_id')
      ) vt1,
      (select vt2.anc_version, vt2.anc_workspace#
       from wmsys.wm$version_table$ vt2
       where vt2.workspace# = sys_context('lt_ctx', 'diffWspc2_id') and
             vt2.anc_workspace# = sys_context('lt_ctx', 'anc_workspace_id')
       union all
       select decode(sys_context('lt_ctx', 'diffver2'),
                     -1, (select current_version
                          from wmsys.wm$workspaces_table$
                          where workspace_lock_id = sys_context('lt_ctx', 'diffWspc2_id')),
                     sys_context('lt_ctx', 'diffver2')) version,
              cast(sys_context('lt_ctx', 'diffWspc2_id') as number)
       from sys.dual
       where sys_context('lt_ctx', 'anc_workspace_id') = sys_context('lt_ctx', 'diffWspc2_id')
      ) vt2
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$BASE_HIERARCHY_VIEW" ("VERSION") AS
  select vht.version
 from wmsys.wm$version_hierarchy_table$ vht, wmsys.wm$base_version_view bv
 where vht.workspace# = bv.workspace# and
       vht.version <= bv.version
union all
 select vht.version
 from wmsys.wm$version_table$ vt, wmsys.wm$version_hierarchy_table$ vht, wmsys.wm$base_version_view bv
 where vt.workspace# = bv.workspace# and
       vht.workspace# = vt.anc_workspace# and
       vht.version <= vt.anc_version
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$BASE_NEXTVER_VIEW" ("NEXT_VERS") AS
  select next_vers
from wmsys.wm$nextver_table$
where version in (select version from wmsys.wm$base_hierarchy_view)
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$CONF1_HIERARCHY_VIEW" ("VERSION") AS
  select vht.version
 from wmsys.wm$version_hierarchy_table$ vht
 where vht.workspace# = sys_context('lt_ctx', 'conflict_state_id')
union all
 select vht.version
 from wmsys.wm$version_table$ vt, wmsys.wm$version_hierarchy_table$ vht
 where vt.workspace# = sys_context('lt_ctx', 'conflict_state_id') and
       vht.workspace# = vt.anc_workspace# and
       vht.version <= vt.anc_version
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$CONF1_NEXTVER_VIEW" ("NEXT_VERS") AS
  select next_vers
from wmsys.wm$nextver_table
where version in (select version from wmsys.wm$conf1_hierarchy_view)
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$CONF2_HIERARCHY_VIEW" ("VERSION") AS
  select vht.version
 from wmsys.wm$version_hierarchy_table$ vht
 where vht.workspace# = sys_context('lt_ctx', 'parent_conflict_state_id')
union all
 select vht.version
 from wmsys.wm$version_table$ vt, wmsys.wm$version_hierarchy_table$ vht
 where vt.workspace# = sys_context('lt_ctx', 'parent_conflict_state_id') and
       vht.workspace# = vt.anc_workspace# and
       vht.version <= vt.anc_version
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$CONF2_NEXTVER_VIEW" ("NEXT_VERS") AS
  select next_vers
from wmsys.wm$nextver_table
where version in (select version from wmsys.wm$conf2_hierarchy_view)
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$CONF_BASE_HIERARCHY_VIEW" ("VERSION") AS
  select vht.version
 from wmsys.wm$version_hierarchy_table$ vht
 where vht.workspace# = sys_context('lt_ctx', 'confbasever_id') and
       vht.version <= sys_context('lt_ctx', 'confbasever')
union all
 select vht.version
 from wmsys.wm$version_table$ vt, wmsys.wm$version_hierarchy_table$ vht
 where vt.workspace# = sys_context('lt_ctx', 'confbasever_id') and
       vht.workspace# = vt.anc_workspace# and
       vht.version <= vt.anc_version
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$CONF_BASE_NEXTVER_VIEW" ("NEXT_VERS") AS
  select next_vers
from wmsys.wm$nextver_table
where version in (select version from wmsys.wm$conf_base_hierarchy_view)
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$CURCONFLICT_PARVERS_VIEW" ("PARENT_VERS",
"VTID") AS
  select mt.version parent_vers, mt.vtid# vtid
from wmsys.wm$modified_tables$ mt
where mt.workspace# = sys_context('lt_ctx','conflict_state_id')
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$CURCONFLICT_NEXTVERS_VIEW" ("VERSION",
"NEXT_VERS",
"SPLIT",
"VTID") AS
  select nt.version, nt.next_vers, nt.split, cpv.vtid
from wmsys.wm$nextver_table$ nt, wmsys.wm$curConflict_parvers_view cpv
where nt.version = cpv.parent_vers
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$CURRENT_CHILD_VERSIONS_VIEW" ("VERSION") AS
  select vht.version
 from wmsys.wm$version_hierarchy_table vht, wmsys.wm$version_table vt
 where
    vht.workspace = vt.workspace and
    vt.anc_workspace = nvl(sys_context('lt_ctx','state'),'LIVE') and
    vt.anc_version  >= decode(sys_context('lt_ctx','version'),
                               null, (select current_version
                                      from wmsys.wm$workspaces_table
                                      where workspace = 'LIVE'),
                               -1, (select current_version
                                    from wmsys.wm$workspaces_table
                                    where workspace = sys_context('lt_ctx','state')),
                               sys_context('lt_ctx','version')
                             )
union all
 select vht.version
 from wmsys.wm$version_hierarchy_table vht
 where vht.workspace = nvl(sys_context('lt_ctx','state'),'LIVE') and
       vht.version > decode(sys_context('lt_ctx','version'),
                             null, (select current_version
                                    from wmsys.wm$workspaces_table
                                    where workspace = 'LIVE'),
                             -1, (select current_version
                                  from wmsys.wm$workspaces_table
                                  where workspace = sys_context('lt_ctx','state')),
                             sys_context('lt_ctx','version')
                           )
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$CURRENT_CONS_NEXTVERS_VIEW" ("NEXT_VERS") AS
  select /*+ INDEX(nvt WM$NEXTVER_TABLE_NV_INDX) */ nvt.next_vers
from wmsys.wm$nextver_table nvt
where (nvt.workspace = nvl(sys_context('lt_ctx','state'),'LIVE') and
       nvt.version <= decode(sys_context('lt_ctx','version'),
                             null, (select current_version
                                    from wmsys.wm$workspaces_table
                                    where workspace = 'LIVE'),
                             -1, (select current_version
                                  from wmsys.wm$workspaces_table
                                  where workspace = sys_context('lt_ctx','state')),
                             sys_context('lt_ctx','version')
                            ) and
       not (nvl(sys_context('lt_ctx','rowlock_status'),'X') = 'F' and nvl(sys_context('lt_ctx','flip_version'),'N') = 'Y')
      )
      or
      (exists (select 1
               from wmsys.wm$version_table vt
               where vt.workspace  = nvl(sys_context('lt_ctx','state'),'LIVE') and
                     nvt.workspace = vt.anc_workspace and
                     nvt.version  <= vt.anc_version)
      )
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$CURRENT_PARVERS_VIEW" ("PARENT_VERS") AS
  select vht.version parent_vers
from wmsys.wm$version_hierarchy_table  vht
where (vht.workspace = nvl(sys_context('lt_ctx','state'),'LIVE') and
       vht.version <= decode(sys_context('lt_ctx','version'),
                             null, (select current_version
                                    from wmsys.wm$workspaces_table
                                    where workspace = 'LIVE'),
                            -1, (select current_version
                                 from wmsys.wm$workspaces_table
                                 where workspace = sys_context('lt_ctx','state')),
                            sys_context('lt_ctx','version'))
      )
      or
      (exists (select 1
               from wmsys.wm$version_table vt
               where vt.workspace  = nvl(sys_context('lt_ctx','state'),'LIVE') and
                     vht.workspace = vt.anc_workspace and
                     vht.version  <= vt.anc_version )
      )
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$MP_GRAPH_CONS_VERSIONS" ("VERSION",
"WORKSPACE") AS
  select vht.version, vht.workspace
from wmsys.wm$mp_graph_workspaces_table mpg, wmsys.wm$version_hierarchy_table vht
where instr(sys_context('lt_ctx','current_mp_leafs'), mpg.mp_leaf_workspace) > 0 and
      mpg.mp_graph_flag = 'I' and
      vht.workspace = mpg.mp_graph_workspace and
      vht.version <= mpg.anc_version and
      ((nvl(sys_context('lt_ctx','rowlock_status'),'X') = 'F' and nvl(sys_context('lt_ctx','flip_version'),'N') = 'Y')
       or
       (nvl(sys_context('lt_ctx','isrefreshed'),'0') = '1')
      )
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$CURRENT_CONS_VERSIONS_VIEW" ("VERSION") AS
  select version from wmsys.wm$current_child_versions_view
union all
 select parent_vers from wmsys.wm$current_parvers_view
union all
 select version from wmsys.wm$mp_graph_cons_versions
union all
 select version
 from wmsys.wm$version_hierarchy_table
 where workspace in (select workspace from wmsys.wm$version_table where anc_workspace = sys_context('lt_ctx','state')) and
       (nvl(sys_context('lt_ctx','rowlock_status'),'X') = 'F' and nvl(sys_context('lt_ctx','flip_version'),'N') = 'Y')
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$CURRENT_MP_JOIN_POINTS" ("WORKSPACE#",
"VERSION") AS
  select mpwst.mp_leaf_workspace# workspace#, vht.version
from wmsys.wm$mp_graph_workspaces_table$ mpwst, wmsys.wm$workspaces_table$ wt, wmsys.wm$version_hierarchy_table$ vht
where mpwst.mp_graph_workspace# = sys_context('lt_ctx','state_id')  and
      mpwst.mp_leaf_workspace# = wt.workspace_lock_id and
      wt.workspace_lock_id = vht.workspace# and
      wt.parent_version = vht.parent_version
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$CURRENT_NEXTVERS_VIEW" ("NEXT_VERS",
"VERSION") AS
  select nvt.next_vers, nvt.version
 from wmsys.wm$nextver_table$ nvt
 where nvt.workspace# = nvl(sys_context('lt_ctx', 'state_id'), 0) and
       nvt.version <= decode(sys_context('lt_ctx', 'version'),
                             null, (select current_version
                                    from wmsys.wm$workspaces_table$
                                    where workspace_lock_id = 0),
                             -1, (select current_version
                                  from wmsys.wm$workspaces_table$
                                  where workspace_lock_id = sys_context('lt_ctx', 'state_id')),
                             sys_context('lt_ctx', 'version'))
union all
 select nvt.next_vers, nvt.version
 from wmsys.wm$version_table$ vt, wmsys.wm$nextver_table$ nvt
 where vt.workspace# = nvl(sys_context('lt_ctx', 'state_id'), 0) and
       vt.anc_workspace# = nvt.workspace# and
       nvt.version <= vt.anc_version
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$CURRENT_WORKSPACE_VIEW" ("WORKSPACE",
"PARENT_WORKSPACE",
"CURRENT_VERSION",
"POST_VERSION",
"VERLIST",
"OWNER",
"CREATETIME",
"DESCRIPTION",
"WORKSPACE_LOCK_ID",
"FREEZE_STATUS",
"FREEZE_MODE",
"FREEZE_WRITER",
"OPER_STATUS",
"WM_LOCKMODE",
"ISREFRESHED",
"FREEZE_OWNER",
"SESSION_DURATION",
"IMPLICIT_SP_CNT",
"CR_STATUS",
"SYNC_PARVER",
"LAST_CHANGE") AS
  select workspace, parent_workspace, current_version, post_version, verlist, owner, createtime, description,
       workspace_lock_id, freeze_status, freeze_mode, freeze_writer, oper_status, wm_lockmode, isrefreshed, freeze_owner,
       session_duration, implicit_sp_cnt, cr_status, sync_parver, last_change
from wmsys.wm$workspaces_table
where workspace = nvl(sys_context('lt_ctx','state'),'LIVE')
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$DIFF1_HIERARCHY_VIEW" ("VERSION") AS
  select version
 from wmsys.wm$version_hierarchy_table$
 where workspace# = sys_context('lt_ctx', 'diffWspc1_id') and
       version <= decode(sys_context('lt_ctx', 'diffver1'),
                         -1, (select current_version
                              from wmsys.wm$workspaces_table$
                              where workspace_lock_id = sys_context('lt_ctx', 'diffWspc1_id')),
                         sys_context('lt_ctx', 'diffver1'))
union all
 select version
 from wmsys.wm$version_table$ vt, wmsys.wm$version_hierarchy_table$ vht
 where vt.workspace# = sys_context('lt_ctx', 'diffWspc1_id') and
       vt.anc_workspace# = vht.workspace# and
       vht.version <= vt.anc_version
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$DIFF1_NEXTVER_VIEW" ("NEXT_VERS") AS
  select next_vers
from wmsys.wm$nextver_table$
where version in (select version from wmsys.wm$diff1_hierarchy_view)
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$DIFF2_HIERARCHY_VIEW" ("VERSION") AS
  select version
 from wmsys.wm$version_hierarchy_table$
 where workspace# = sys_context('lt_ctx', 'diffWspc2_id') and
       version <= decode(sys_context('lt_ctx', 'diffver2'),
                         -1, (select current_version
                              from wmsys.wm$workspaces_table$
                              where workspace_lock_id = sys_context('lt_ctx', 'diffWspc2_id')),
                         sys_context('lt_ctx', 'diffver2'))
union all
 select version
 from wmsys.wm$version_table$ vt, wmsys.wm$version_hierarchy_table$ vht
 where vt.workspace# = sys_context('lt_ctx', 'diffWspc2_id') and
       vt.anc_workspace# = vht.workspace# and
       vht.version <= vt.anc_version
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$DIFF2_NEXTVER_VIEW" ("NEXT_VERS") AS
  select next_vers
from wmsys.wm$nextver_table$
where version in (select version from wmsys.wm$diff2_hierarchy_view)
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$EXP_MAP" ("CODE",
"NFIELD1",
"NFIELD2",
"NFIELD3",
"VFIELD1",
"VFIELD2",
"VFIELD3") AS
  select "CODE","NFIELD1","NFIELD2","NFIELD3","VFIELD1","VFIELD2","VFIELD3"
from table(wmsys.lt_export_pkg.export_mapping_view_func())
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$MODIFIED_TABLES_VIEW" ("VTID",
"VERSION",
"WORKSPACE#") AS
  select vtid# vtid, version, workspace#
from wmsys.wm$modified_tables$ mt
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$MP_GRAPH_NEW_VERSIONS" ("VERSION",
"WORKSPACE") AS
  select vht.version, vht.workspace
from wmsys.wm$version_hierarchy_table vht, wmsys.wm$version_table vt
where vt.workspace = sys_context('lt_ctx','new_mp_leaf') and
      vht.workspace = vt.anc_workspace and
      vht.version <= vt.anc_version and
      (vt.refCount < 0 or (vht.workspace = sys_context('lt_ctx','new_mp_root') and vht.version > sys_context('lt_ctx','old_root_anc_version')))
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$MP_GRAPH_OTHER_VERSIONS" ("VERSION",
"WORKSPACE") AS
  select vht.version, vht.workspace
 from wmsys.wm$version_hierarchy_table vht, wmsys.wm$version_table vt
 where vt.workspace = sys_context('lt_ctx','new_mp_leaf') and
       vht.workspace = vt.anc_workspace and
       vht.version <= vt.anc_version and
       vt.refCount > 0 and
       vt.anc_workspace not in
             (select sys_context('lt_ctx','new_mp_root')
              from sys.dual
             union all
              select anc_workspace
              from wmsys.wm$version_table root_anc
              where workspace = sys_context('lt_ctx','new_mp_root'))
union all
 select vht.version, vht.workspace
 from wmsys.wm$version_hierarchy_table vht, wmsys.wm$version_table vt
 where vt.anc_workspace = sys_context('lt_ctx','new_mp_leaf') and
        vht.workspace = vt.workspace
union all
 select vht.version, vht.workspace
 from wmsys.wm$version_hierarchy_table vht
 where vht.workspace = sys_context('lt_ctx','new_mp_leaf')
union all
 select version, workspace
 from wmsys.wm$mp_graph_cons_versions
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$MP_GRAPH_REMAINING_VERSIONS" ("VERSION") AS
  select vht.version
 from wmsys.wm$version_hierarchy_table vht, wmsys.wm$version_table vt
 where vt.anc_workspace = sys_context('lt_ctx','mp_workspace') and
       vht.workspace = vt.workspace
union all
 select vht.version
 from wmsys.wm$version_hierarchy_table vht
 where vht.workspace = sys_context('lt_ctx','mp_workspace')
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$MP_GRAPH_REMOVED_VERSIONS" ("VERSION",
"WORKSPACE") AS
  select vht.version, vht.workspace
from wmsys.wm$version_hierarchy_table vht, wmsys.wm$version_table vt
where vt.workspace = sys_context('lt_ctx','mp_workspace') and
      vht.workspace = vt.anc_workspace and
      vht.version <= vt.anc_version and
      (vt.refCount = 0 or (vht.workspace = sys_context('lt_ctx','mp_root') and
                           vht.version > sys_context('lt_ctx','new_root_anc_version')))
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$MP_JOIN_POINTS" ("WORKSPACE",
"VERSION") AS
  select mpwst.mp_leaf_workspace workspace, vht.version
from wmsys.wm$mp_graph_workspaces_table mpwst, wmsys.wm$workspaces_table wt, wmsys.wm$version_hierarchy_table vht
where mpwst.mp_graph_workspace = sys_context('lt_ctx','new_mp_leaf') and
      mpwst.mp_leaf_workspace = wt.workspace and
      wt.workspace = vht.workspace and
      wt.parent_version = vht.parent_version
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$MW_NEXTVERS_VIEW" ("NEXT_VERS") AS
  select nvt.next_vers
from wmsys.wm$nextver_table  nvt
where  nvt.workspace in (select workspace from wmsys.wm$mw_table)
       or
       exists (select 1
               from wmsys.wm$version_table vt
               where vt.workspace in (select workspace from wmsys.wm$mw_table) and
                     nvt.workspace = vt.anc_workspace and
                     nvt.version  <= vt.anc_version)
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$MW_VERSIONS_VIEW_9I" ("VERSION",
"MODIFIED_BY",
"SEEN_BY") AS
  select version, modified_by, wmsys.ltUtil.wm$concat(cast(collect(workspace) as wmsys.wm$ident_tab_type)) seen_by
from (select vht.version, vht.workspace modified_by, mw.workspace
      from wmsys.wm$mw_table mw, wmsys.wm$version_table vt, wmsys.wm$version_hierarchy_table vht
      where mw.workspace = vt.workspace and
            vt.anc_workspace = vht.workspace and
            vht.version <= vt.anc_version
     union all
      select vht.version, vht.workspace modified_by, mw.workspace
      from wmsys.wm$mw_table mw, wmsys.wm$version_hierarchy_table vht
      where mw.workspace = vht.workspace
     )
group by (version,modified_by)
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$NET_DIFF1_HIERARCHY_VIEW" ("VERSION") AS
  select version from wmsys.wm$diff1_hierarchy_view
minus
 select version from wmsys.wm$base_hierarchy_view
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$NET_DIFF2_HIERARCHY_VIEW" ("VERSION") AS
  select version from wmsys.wm$diff2_hierarchy_view
minus
 select version from wmsys.wm$base_hierarchy_view
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$PARCONFLICT_PARVERS_VIEW" ("PARENT_VERS",
"VTID") AS
  select mt.version parent_vers, mt.vtid# vtid
from wmsys.wm$modified_tables$ mt, wmsys.wm$workspaces_table$ wt
where mt.workspace# = sys_context('lt_ctx','parent_conflict_state_id') and
      wt.workspace_lock_id = sys_context('lt_ctx','conflict_state_id') and
      mt.version >= decode(sign(wt.parent_version - wt.sync_parver), -1, (wt.parent_version+1), sync_parver)
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$PARCONFLICT_NEXTVERS_VIEW" ("VERSION",
"NEXT_VERS",
"SPLIT",
"VTID") AS
  select nt.version, nt.next_vers, nt.split, ppv.vtid
from wmsys.wm$nextver_table$ nt, wmsys.wm$parConflict_parvers_view ppv
where nt.version = ppv.parent_vers
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$PARVERS_VIEW" ("PARENT_VERS") AS
  select version parent_vers
 from wmsys.wm$version_hierarchy_table$
 where workspace# = nvl(sys_context('lt_ctx','state_id'), 0)
union all
 select vht.version
 from wmsys.wm$version_hierarchy_table$ vht, wmsys.wm$version_table$ vt
 where vt.workspace# = nvl(sys_context('lt_ctx','state_id'), 0) and
       vht.workspace# = vt.anc_workspace# and
       vht.version <= vt.anc_version
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$TABLE_PARVERS_VIEW" ("VTID",
"PARENT_VERS") AS
  select vtid# vtid, mt.version parent_vers
 from wmsys.wm$modified_tables$ mt
 where mt.workspace# = nvl(sys_context('lt_ctx', 'state_id'), 0) and
       mt.version <= decode(sys_context('lt_ctx', 'version'),
                            null, (select current_version
                                   from wmsys.wm$workspaces_table$
                                   where workspace_lock_id = 0),
                            -1, (select current_version
                                 from wmsys.wm$workspaces_table$
                                 where workspace_lock_id = sys_context('lt_ctx', 'state_id')),
                            sys_context('lt_ctx', 'version'))
union all
 select vtid#, mt.version
 from wmsys.wm$version_table$ vt, wmsys.wm$modified_tables$ mt
 where vt.workspace# = nvl(sys_context('lt_ctx', 'state_id'), 0) and
       vt.anc_workspace# = mt.workspace# and
       mt.version <= vt.anc_version
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$TABLE_VERSIONS_IN_LIVE_VIEW" ("VTID",
"PARENT_VERS") AS
  select vtid# vtid, mt.version parent_vers
from wmsys.wm$modified_tables$ mt
where mt.workspace# = 0
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$TABLE_WS_PARVERS_VIEW" ("VTID",
"PARENT_VERS") AS
  select vtid# vtid, mt.version parent_vers
 from wmsys.wm$modified_tables$ mt
 where mt.workspace# = nvl(sys_context('lt_ctx', 'state_id'), 0)
union all
 select vtid#, mt.version
 from wmsys.wm$version_table$ vt, wmsys.wm$modified_tables$ mt
 where vt.workspace# = nvl(sys_context('lt_ctx', 'state_id'), 0) and
       vt.anc_workspace# = mt.workspace# and
       mt.version <= vt.anc_version
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$VERSION_VIEW" ("VERSION",
"PARENT_VERS",
"WORKSPACE") AS
  select vht1.version, vht2.version parent_vers, vht1.workspace
 from wmsys.wm$version_hierarchy_table vht1, wmsys.wm$version_hierarchy_table vht2, wmsys.wm$version_table vt
 where vht1.workspace = vt.workspace and
       vht2.workspace = vt.anc_workspace and
       vht2.version  <= vt.anc_version
union all
 select vht1.version, vht2.version parent_vers, vht1.workspace
 from wmsys.wm$version_hierarchy_table vht1, wmsys.wm$version_hierarchy_table vht2
 where vht2.version <= vht1.version and
       vht2.workspace = vht1.workspace
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM$WORKSPACE_SESSIONS_VIEW" ("USERNAME",
"WORKSPACE",
"SID",
"SERIAL#",
"SADDR",
"INST_ID",
"LOCKMODE",
"ISIMPLICIT") AS
  select st.username, wt.workspace, st.sid, st.serial#, st.saddr, st.inst_id, decode(dl.lmode, 2, 'SS', 4, 'S', 'U') lockMode, 0 isImplicit
  from gv$lock dl, wmsys.wm$workspaces_table wt, gv$session st
  where dl.type = 'UL' and
        dl.id1 - 1 = wt.workspace_lock_id and
        dl.sid = st.sid and
        dl.inst_id = st.inst_id
 union all
  select st.username, 'LIVE', st.sid, st.serial#, st.saddr, st.inst_id, 'S', 1
  from gv$session st
  where st.username is not null and
        not exists(select 1
                   from gv$lock dl, wmsys.wm$workspaces_table wt
                   where dl.type = 'UL' and
                         dl.lmode = 4 and
                         dl.id1 - 1 = wt.workspace_lock_id and
                         dl.sid = st.sid and
                         dl.inst_id = st.inst_id)
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."USER_WM_PRIVS" ("WORKSPACE",
"PRIVILEGE",
"GRANTOR",
"GRANTABLE") AS
  select distinct
       workspace,
       decode(priv,'A',  'ACCESS_WORKSPACE',
                   'C',  'CREATE_WORKSPACE',
                   'D',  'REMOVE_WORKSPACE',
                   'F',  'FREEZE_WORKSPACE',
                   'G',  'GRANTPRIV_WORKSPACE',
                   'M',  'MERGE_WORKSPACE',
                   'R',  'ROLLBACK_WORKSPACE',
                   'AA', 'ACCESS_ANY_WORKSPACE',
                   'CA', 'CREATE_ANY_WORKSPACE',
                   'DA', 'REMOVE_ANY_WORKSPACE',
                   'FA', 'FREEZE_ANY_WORKSPACE',
                   'GA', 'GRANTPRIV_ANY_WORKSPACE',
                   'MA', 'MERGE_ANY_WORKSPACE',
                   'RA', 'ROLLBACK_ANY_WORKSPACE',
                   'W',  'WM_ADMIN',
                         'UNKNOWN_PRIV') privilege,
       grantor,
       decode(admin, 0, 'NO', 1, 'YES') grantable
from wmsys.wm$workspace_priv_table
where grantee in
   (select role from session_roles
   union all
    select 'WM_ADMIN_ROLE' from sys.dual where sys_context('userenv', 'current_user') = 'SYS'
   union all
    select username from all_users where username = sys_context('userenv', 'current_user')
   union all
    select 'PUBLIC' from sys.dual)
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."ALL_WORKSPACES_INTERNAL" ("WORKSPACE",
"PARENT_WORKSPACE",
"CURRENT_VERSION",
"PARENT_VERSION",
"POST_VERSION",
"VERLIST",
"OWNER",
"CREATETIME",
"DESCRIPTION",
"WORKSPACE_LOCK_ID",
"FREEZE_STATUS",
"FREEZE_MODE",
"FREEZE_WRITER",
"OPER_STATUS",
"WM_LOCKMODE",
"ISREFRESHED",
"FREEZE_OWNER",
"SESSION_DURATION",
"MP_ROOT") AS
  select s.workspace, s.parent_workspace, s.current_version, s.parent_version, s.post_version, s.verlist, s.owner, s.createTime,
        s.description, s.workspace_lock_id, s.freeze_status, s.freeze_mode, s.freeze_writer, s.oper_status, s.wm_lockmode, s.isRefreshed,
        s.freeze_owner, s.session_duration, s.mp_root
 from wmsys.wm$workspaces_table s
 where exists (select 1 from wmsys.user_wm_privs where privilege = 'WM_ADMIN' or privilege like '%ANY%')
 union
 select s.workspace, s.parent_workspace, s.current_version, s.parent_version, s.post_version, s.verlist, s.owner, s.createTime,
        s.description, s.workspace_lock_id, s.freeze_status, s.freeze_mode, s.freeze_writer, s.oper_status, s.wm_lockmode, s.isRefreshed,
        s.freeze_owner, s.session_duration, s.mp_root
 from wmsys.wm$workspaces_table s,
      (select distinct workspace from wmsys.user_wm_privs) u
 where u.workspace = s.workspace
union
 select s.workspace, s.parent_workspace, s.current_version, s.parent_version, s.post_version, s.verlist, s.owner, s.createTime,
        s.description, s.workspace_lock_id, s.freeze_status, s.freeze_mode, s.freeze_writer, s.oper_status, s.wm_lockmode, s.isRefreshed,
        s.freeze_owner, s.session_duration, s.mp_root
from wmsys.wm$workspaces_table s where owner = sys_context('userenv', 'current_user')
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."ALL_WORKSPACES" ("WORKSPACE",
"WORKSPACE_ID",
"PARENT_WORKSPACE",
"PARENT_SAVEPOINT",
"OWNER",
"CREATETIME",
"DESCRIPTION",
"FREEZE_STATUS",
"FREEZE_MODE",
"FREEZE_WRITER",
"FREEZE_OWNER",
"SESSION_DURATION",
"CURRENT_SESSION",
"RESOLVE_STATUS",
"RESOLVE_USER",
"CONTINUALLY_REFRESHED",
"WORKSPACE_LOCKMODE",
"WORKSPACE_LOCKMODE_OVERRIDE",
"MP_ROOT_WORKSPACE") AS
  select asp.workspace, asp.workspace_lock_id workspace_id, asp.parent_workspace, ssp.savepoint parent_savepoint,
       asp.owner, asp.createTime, asp.description,
       decode(asp.freeze_status,'LOCKED','FROZEN', 'UNLOCKED','UNFROZEN') freeze_status,
       decode(asp.oper_status, null, asp.freeze_mode,'INTERNAL') freeze_mode,
       decode(asp.freeze_mode, '1WRITER_SESSION', s.username, asp.freeze_writer) freeze_writer,
       decode(rst.workspace, null, decode(asp.session_duration, 0, asp.freeze_owner, s.username), null) freeze_owner,
       decode(asp.freeze_status, 'UNLOCKED', null, decode(asp.session_duration, 1, 'YES', 'NO')) session_duration,
       decode(asp.session_duration, 1,
              decode((select 1 from sys.dual
                      where s.sid = sys_context('lt_ctx', 'cid') and
                            s.serial# = sys_context('lt_ctx', 'serial#') and
                            s.inst_id = dbms_utility.current_instance),
                     1, 'YES', 'NO'),
              null) current_session,
       decode(rst.workspace, null, 'INACTIVE', 'ACTIVE') resolve_status,
       rst.resolve_user,
       decode(asp.isRefreshed, 1, 'YES', 'NO') continually_refreshed,
       decode(substr(asp.wm_lockmode, 1, instr(asp.wm_lockmode, ',')-1),
              'C', 'CARRY',
              'D', 'DISREGARD',
              'E', 'EXCLUSIVE',
              'S', 'SHARED',
              'VE', 'VERSION EXCLUSIVE',
              'WE', 'WORKSPACE EXCLUSIVE',
              null) workspace_lockmode,
       decode(substr(asp.wm_lockmode, instr(asp.wm_lockmode, ',')+1, 1), 'Y', 'YES', 'N', 'NO', NULL) workspace_lockmode_override,
       mp_root mp_root_workspace
from   wmsys.all_workspaces_internal asp, wmsys.wm$workspace_savepoints_table ssp,
       wmsys.wm$resolve_workspaces_table rst, gv$session s
where  (ssp.position is null or ssp.position = (select min(position) from wmsys.wm$workspace_savepoints_table where version = ssp.version)) and
       asp.parent_version = ssp.version (+) and
       asp.workspace = rst.workspace (+) and
       to_char(s.sid(+)) = substr(asp.freeze_owner, 1, instr(asp.freeze_owner, ',')-1)  and
       to_char(s.serial#(+)) = substr(asp.freeze_owner, instr(asp.freeze_owner, ',')+1, instr(asp.freeze_owner, ',',1,2)-instr(asp.freeze_owner, ',')-1) and
       to_char(s.inst_id(+)) = substr(asp.freeze_owner, instr(asp.freeze_owner, ',', 1, 2)+1)
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."USER_WORKSPACES" ("WORKSPACE",
"WORKSPACE_ID",
"PARENT_WORKSPACE",
"PARENT_SAVEPOINT",
"OWNER",
"CREATETIME",
"DESCRIPTION",
"FREEZE_STATUS",
"FREEZE_MODE",
"FREEZE_WRITER",
"FREEZE_OWNER",
"SESSION_DURATION",
"CURRENT_SESSION",
"RESOLVE_STATUS",
"RESOLVE_USER",
"CONTINUALLY_REFRESHED",
"WORKSPACE_LOCKMODE",
"WORKSPACE_LOCKMODE_OVERRIDE",
"MP_ROOT_WORKSPACE") AS
  select st.workspace, st.workspace_lock_id workspace_id, st.parent_workspace, ssp.savepoint parent_savepoint,
       st.owner, st.createTime, st.description,
       decode(st.freeze_status,'LOCKED','FROZEN', 'UNLOCKED','UNFROZEN') freeze_status,
       decode(st.oper_status, null, st.freeze_mode,'INTERNAL') freeze_mode,
       decode(st.freeze_mode, '1WRITER_SESSION', s.username, st.freeze_writer) freeze_writer,
       decode(rst.workspace, null, decode(st.session_duration, 0, st.freeze_owner, s.username), null) freeze_owner,
       decode(st.freeze_status, 'UNLOCKED', null, decode(st.session_duration, 1, 'YES', 'NO')) session_duration,
       decode(st.session_duration, 1,
              decode((select 1 from sys.dual
                      where s.sid = sys_context('lt_ctx', 'cid') and
                            s.serial# = sys_context('lt_ctx', 'serial#') and
                            s.inst_id = dbms_utility.current_instance),
                     1, 'YES', 'NO'),
              null) current_session,
       decode(rst.workspace, null, 'INACTIVE', 'ACTIVE') resolve_status,
       rst.resolve_user,
       decode(st.isRefreshed, 1, 'YES', 'NO') continually_refreshed,
       decode(substr(st.wm_lockmode, 1, instr(st.wm_lockmode, ',')-1),
              'C', 'CARRY',
              'D', 'DISREGARD',
              'E', 'EXCLUSIVE',
              'S', 'SHARED',
              'VE', 'VERSION EXCLUSIVE',
              'WE', 'WORKSPACE EXCLUSIVE',
              null) workspace_lockmode,
       decode(substr(st.wm_lockmode, instr(st.wm_lockmode, ',')+1, 1), 'Y', 'YES', 'N', 'NO', NULL) workspace_lockmode_override,
       mp_root mp_root_workspace
from wmsys.wm$workspaces_table st,
     wmsys.wm$workspace_savepoints_table ssp,
     wmsys.wm$resolve_workspaces_table rst, gv$session s
where st.owner = sys_context('userenv', 'current_user') and
      (ssp.position is null or ssp.position = (select min(position) from wmsys.wm$workspace_savepoints_table where version = ssp.version)) and
      st.parent_version = ssp.version (+) and
      st.workspace = rst.workspace (+) and
      to_char(s.sid(+)) = substr(st.freeze_owner, 1, instr(st.freeze_owner, ',')-1)  and
      to_char(s.serial#(+)) = substr(st.freeze_owner, instr(st.freeze_owner, ',')+1, instr(st.freeze_owner, ',',1,2)-instr(st.freeze_owner, ',')-1) and
      to_char(s.inst_id(+)) = substr(st.freeze_owner, instr(st.freeze_owner, ',', 1, 2)+1)
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."ALL_MP_GRAPH_WORKSPACES" ("MP_LEAF_WORKSPACE",
"GRAPH_WORKSPACE",
"GRAPH_FLAG") AS
  select mpg.mp_leaf_workspace, mpg.mp_graph_workspace GRAPH_WORKSPACE,
       decode(mpg.mp_graph_flag,'R','ROOT_WORKSPACE','I','INTERMEDIATE_WORKSPACE','L','LEAF_WORKSPACE') GRAPH_FLAG
from wmsys.wm$mp_graph_workspaces_table mpg, wmsys.all_workspaces uw
where mpg.mp_leaf_workspace = uw.workspace
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."ALL_MP_PARENT_WORKSPACES" ("MP_LEAF_WORKSPACE",
"PARENT_WORKSPACE",
"CREATOR",
"CREATETIME",
"ISREFRESHED",
"PARENT_FLAG") AS
  select mp.workspace mp_leaf_workspace,mp.parent_workspace,mp.creator,mp.createtime,
       decode(mp.isRefreshed,0,'NO','YES') ISREFRESHED, decode(mp.parent_flag,'DP','DEFAULT_PARENT','ADDITIONAL_PARENT') PARENT_FLAG
from wmsys.wm$mp_parent_workspaces_table mp, wmsys.all_workspaces aw
where mp.workspace = aw.workspace
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."ALL_REMOVED_WORKSPACES" ("OWNER",
"WORKSPACE_NAME",
"WORKSPACE_ID",
"PARENT_WORKSPACE_NAME",
"PARENT_WORKSPACE_ID",
"CREATETIME",
"RETIRETIME",
"DESCRIPTION",
"MP_ROOT_WORKSPACE_ID",
"CONTINUALLY_REFRESHED") AS
  select owner, workspace_name, workspace_id, parent_workspace_name, parent_workspace_id,
        createtime, retiretime, description, mp_root_id mp_root_workspace_id, decode(rwt.isRefreshed, 1, 'YES', 'NO') continually_refreshed
 from wmsys.wm$removed_workspaces_table rwt
 where exists (select 1 from wmsys.user_wm_privs where privilege = 'WM_ADMIN' or privilege like '%ANY%')
union
 select owner, workspace_name, workspace_id, parent_workspace_name, parent_workspace_id,
        createtime, retiretime, description, mp_root_id mp_root_workspace_id, decode(rwt.isRefreshed, 1, 'YES', 'NO') continually_refreshed
 from wmsys.wm$removed_workspaces_table rwt,
      (select distinct workspace from wmsys.user_wm_privs) u
 where rwt.workspace_name = u.workspace
union
 select owner, workspace_name, workspace_id, parent_workspace_name, parent_workspace_id,
        createtime, retiretime, description, mp_root_id mp_root_workspace_id, decode(rwt.isRefreshed, 1, 'YES', 'NO') continually_refreshed
 from wmsys.wm$removed_workspaces_table rwt
 where rwt.owner = sys_context('userenv', 'current_user')
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."ALL_VERSION_HVIEW" ("VERSION",
"PARENT_VERSION",
"WORKSPACE",
"WORKSPACE_ID") AS
  select vht.version, vht.parent_version, wt.workspace, vht.workspace# workspace_id
from wmsys.wm$version_hierarchy_table$ vht, wmsys.wm$workspaces_table$ wt
where vht.workspace# = wt.workspace_lock_id
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."ALL_WM_CONSTRAINTS" ("OWNER",
"CONSTRAINT_NAME",
"CONSTRAINT_TYPE",
"TABLE_NAME",
"SEARCH_CONDITION",
"STATUS",
"INDEX_OWNER",
"INDEX_NAME",
"INDEX_TYPE") AS
  select /*+ LEADING(ct) */ ct.owner, constraint_name, constraint_type, table_name, search_condition, status, index_owner, index_name, index_type
from wmsys.wm$constraints_table ct, all_views av
where ct.owner = av.owner and
      ct.table_name = av.view_name
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."ALL_WM_CONS_COLUMNS" ("OWNER",
"CONSTRAINT_NAME",
"TABLE_NAME",
"COLUMN_NAME",
"POSITION") AS
  select /*+ LEADING(t1) */ t1.owner, t1.constraint_name, t1.table_name, t1.column_name, t1.position
from wmsys.wm$cons_columns t1, all_views t2
where t1.owner = t2.owner and
      t1.table_name = t2.view_name
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."ALL_WM_IND_COLUMNS" ("INDEX_OWNER",
"INDEX_NAME",
"OWNER",
"TABLE_NAME",
"COLUMN_NAME",
"COLUMN_POSITION",
"COLUMN_LENGTH",
"DESCEND") AS
  select /*+ USE_NL(t1 t2) */ t2.index_owner, t2.index_name, t1.owner, t1.table_name, t2.column_name, t2.column_position, t2.column_length,  t2.descend
 from wmsys.wm$constraints_table t1, all_ind_columns t2
 where t1.index_owner = t2.index_owner and
       t1.index_name = t2.index_name and
       t1.constraint_type not in ('P', 'PN', 'PU')
union
 select /*+ USE_NL(t1 t2) */ t2.index_owner, t2.index_name, t1.owner, t1.table_name, t2.column_name, t2.column_position-1, t2.column_length, t2.descend
 from wmsys.wm$constraints_table t1, all_ind_columns t2
 where t1.index_owner = t2.index_owner and
       t1.index_name = t2.index_name and
       t1.constraint_type in ('P', 'PN', 'PU') and
       t2.column_name not in ('WM_VERSION','WM_DELSTATUS')
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."ALL_WM_IND_EXPRESSIONS" ("INDEX_OWNER",
"INDEX_NAME",
"OWNER",
"TABLE_NAME",
"COLUMN_EXPRESSION",
"COLUMN_POSITION") AS
  select /*+ USE_NL(t1 t2) */ t2.index_owner,t2.index_name, t1.owner, t1.table_name, t2.column_expression, t2.column_position
from wmsys.wm$constraints_table t1, all_ind_expressions t2
where t1.index_owner = t2.index_owner and
      t1.index_name = t2.index_name
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."ALL_WM_LOCKED_TABLES" ("TABLE_OWNER",
"TABLE_NAME",
"LOCK_MODE",
"LOCK_OWNER",
"LOCKING_STATE") AS
  select /*+ LEADING(t) */ t.owner table_owner, t.table_name, t.lock_mode, t.lock_owner, t.locking_state
from wmsys.wm$all_locks_view t, all_views s
where t.owner = s.owner and t.table_name = s.view_name
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."ALL_WM_MODIFIED_TABLES" ("TABLE_NAME",
"WORKSPACE",
"SAVEPOINT") AS
  select table_name, workspace, savepoint
from
     (select distinct o.table_name, o.workspace,
             nvl(s.savepoint, 'LATEST') savepoint,
             min(s.is_implicit) imp, count(s.version) counter
      from wmsys.wm$modified_tables o, wmsys.wm$workspace_savepoints_table s, all_views a
      where substr(o.table_name, 1, instr(table_name,'.')-1) = a.owner and
            substr(o.table_name, instr(table_name,'.')+1) = a.view_name and
            o.version = s.version (+)
      group by o.table_name, o.workspace, savepoint)
where (imp = 0 or imp is null or counter = 1)
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."ALL_WM_POLICIES" ("OBJECT_OWNER",
"OBJECT_NAME",
"POLICY_GROUP",
"POLICY_NAME",
"PF_OWNER",
"PACKAGE",
"FUNCTION",
"SEL",
"INS",
"UPD",
"DEL",
"IDX",
"CHK_OPTION",
"ENABLE",
"STATIC_POLICY",
"POLICY_TYPE",
"LONG_PREDICATE") AS
  select ap.object_owner, ap.object_name, ap.policy_group, ap.policy_name, ap.pf_owner,ap. package, ap.function,
       ap.sel, ap.ins, ap.upd, ap.del, ap.idx, ap.chk_option, enable, ap.static_policy, ap.policy_type, ap.long_predicate
from wmsys.wm$versioned_tables vt, all_policies ap
where ap.object_owner = vt.owner and
      ap.object_name in (vt.table_name, vt.table_name || '_CONF', vt.table_name || '_DIFF',
                         vt.table_name || '_HIST', vt.table_name || '_LOCK', vt.table_name || '_MW')
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."ALL_WM_RIC_INFO" ("CT_OWNER",
"CT_NAME",
"PT_OWNER",
"PT_NAME",
"RIC_NAME",
"CT_COLS",
"PT_COLS",
"R_CONSTRAINT_NAME",
"DELETE_RULE",
"STATUS") AS
  select /*+ LEADING(rt) */ ct_owner, ct_name, pt_owner, pt_name, ric_name, rtrim(ct_cols,',') ct_cols, rtrim(pt_cols,',') pt_cols,
                          pt_unique_const_name r_constraint_name, my_mode delete_rule, status
from wmsys.wm$ric_table rt, all_views uv
where uv.view_name = rt.ct_name and
      uv.owner = rt.ct_owner
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."ALL_WM_TAB_TRIGGERS" ("TRIGGER_OWNER",
"TRIGGER_NAME",
"TABLE_OWNER",
"TABLE_NAME",
"TRIGGER_TYPE",
"STATUS",
"WHEN_CLAUSE",
"DESCRIPTION",
"TRIGGER_BODY",
"TAB_MERGE_WO_REMOVE",
"TAB_MERGE_W_REMOVE",
"WSPC_MERGE_WO_REMOVE",
"WSPC_MERGE_W_REMOVE",
"DML",
"TABLE_IMPORT") AS
  select trig_owner_name trigger_owner,
       trig_name trigger_name,
       table_owner_name table_owner,
       table_name table_name,
       wmsys.ltUtil.getTrigTypes(trig_flag) trigger_type,
       status,
       when_clause,
       description,
       trig_code trigger_body,
       decode(bitand(event_flag, 32768), 0, 'OFF', 'ON') tab_merge_wo_remove,
       decode(bitand(event_flag, 65536), 0, 'OFF', 'ON') tab_merge_w_remove,
       decode(bitand(event_flag, 131072), 0, 'OFF', 'ON') wspc_merge_wo_remove,
       decode(bitand(event_flag, 262144), 0, 'OFF', 'ON') wspc_merge_w_remove,
       decode(bitand(event_flag, 524288), 0, 'OFF', 'ON') dml,
       decode(bitand(event_flag, 33554432), 0, 'OFF', 'ON') table_import
from wmsys.wm$udtrig_info
where (trig_owner_name  = sys_context('userenv', 'current_user') or
       table_owner_name = sys_context('userenv', 'current_user') or
       exists (select 1
               from user_sys_privs
               where privilege = 'CREATE ANY TRIGGER') or
       exists (select 1
               from session_roles sr, role_sys_privs rsp
               where sr.role = rsp.role and
                     rsp.privilege = 'CREATE ANY TRIGGER')) and
     internal_type = 'USER_DEFINED'
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."ALL_WM_VERSIONED_TABLES" ("TABLE_NAME",
"OWNER",
"STATE",
"HISTORY",
"NOTIFICATION",
"NOTIFYWORKSPACES",
"CONFLICT",
"DIFF",
"VALIDTIME") AS
  select /*+ LEADING(t) */ t.table_name, t.owner,
        disabling_ver state,
        t.hist history,
        decode(t.notification, 0, 'NO', 1, 'YES') notification,
        substr(notifyWorkspaces,2,length(notifyworkspaces)-2) notifyworkspaces,
        wmsys.ltadm.AreThereConflicts(t.owner, t.table_name) conflict,
        wmsys.ltadm.AreThereDiffs(t.owner, t.table_name) diff,
        decode(t.validtime, 0, 'NO', 1, 'YES') validtime
 from wmsys.wm$versioned_tables t, all_views av
 where t.table_name = av.view_name and t.owner = av.owner
union all
 select /*+ LEADING(t) */ t.table_name, t.owner,
        disabling_ver state,
        t.hist history,
        decode(t.notification, 0, 'NO', 1, 'YES') notification,
        substr(notifyWorkspaces,2,length(notifyworkspaces)-2) notifyworkspaces,
        wmsys.ltadm.AreThereConflicts(t.owner, t.table_name) conflict,
        wmsys.ltadm.AreThereDiffs(t.owner, t.table_name) diff,
        decode(t.validtime, 0, 'NO', 1, 'YES') validtime
 from wmsys.wm$versioned_tables t, all_tables at
 where t.table_name = at.table_name and t.owner = at.owner
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."ALL_WM_VT_ERRORS" ("OWNER",
"TABLE_NAME",
"STATE",
"SQL_STR",
"STATUS",
"ERROR_MSG") AS
  select distinct vt.owner,vt.table_name,vt.state,vt.sql_str,et.status,et.error_msg
 from (select t1.owner,t1.table_name,t1.disabling_ver state,nt.index_type,nt.index_field,dbms_lob.substr(nt.sql_str,4000,1) sql_str
       from wmsys.wm$versioned_tables t1, table(t1.undo_code) nt) vt,
      wmsys.wm$vt_errors_table et, all_tables at
 where vt.owner = et.owner and
       vt.table_name = et.table_name and
       vt.index_type = et.index_type and
       vt.index_field = et.index_field and
       vt.owner = at.owner and
       at.table_name in (vt.table_name, vt.table_name || '_LT')
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."ALL_WORKSPACE_PRIVS" ("GRANTEE",
"WORKSPACE",
"PRIVILEGE",
"GRANTOR",
"GRANTABLE") AS
  select spt.grantee,
       spt.workspace,
       decode(spt.priv,'A',  'ACCESS_WORKSPACE',
                       'C',  'CREATE_WORKSPACE',
                       'D',  'REMOVE_WORKSPACE',
                       'F',  'FREEZE_WORKSPACE',
                       'G',  'GRANTPRIV_WORKSPACE',
                       'M',  'MERGE_WORKSPACE',
                       'R',  'ROLLBACK_WORKSPACE',
                       'AA', 'ACCESS_ANY_WORKSPACE',
                       'CA', 'CREATE_ANY_WORKSPACE',
                       'DA', 'REMOVE_ANY_WORKSPACE',
                       'FA', 'FREEZE_ANY_WORKSPACE',
                       'GA', 'GRANTPRIV_ANY_WORKSPACE',
                       'MA', 'MERGE_ANY_WORKSPACE',
                       'RA', 'ROLLBACK_ANY_WORKSPACE',
                       'W',  'WM_ADMIN',
                             'UNKNOWN_PRIV') privilege,
       spt.grantor,
       decode(spt.admin, 0, 'NO',
                         1, 'YES') grantable
from wmsys.all_workspaces_internal alt, wmsys.wm$workspace_priv_table spt
where alt.workspace = spt.workspace
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."ALL_WORKSPACE_SAVEPOINTS" ("SAVEPOINT",
"WORKSPACE",
"IMPLICIT",
"POSITION",
"OWNER",
"CREATETIME",
"DESCRIPTION",
"CANROLLBACKTO",
"REMOVABLE",
"VERSION") AS
  select t.savepoint, t.workspace,
       decode(t.is_implicit, 0, 'NO', 1, 'YES') implicit, t.position,
       t.owner, t.createTime, t.description,
       decode(sign(t.version - max.pv), -1, 'NO', 'YES') canRollbackTo,
       decode(t.is_implicit || decode(parent_vers.parent_version, null, 'NOT_EXISTS', 'EXISTS'), '1EXISTS', 'NO', 'YES') removable,
       t.version
from wmsys.wm$workspace_savepoints_table t,
     wmsys.all_workspaces_internal asi,
     (select max(parent_version) pv, parent_workspace pw from wmsys.wm$workspaces_table group by parent_workspace) max,
     (select unique parent_version from wmsys.wm$workspaces_table) parent_vers
where t.workspace = asi.workspace and
      t.workspace = max.pw (+) and
      t.version = parent_vers.parent_version (+)
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."DBA_REMOVED_WORKSPACES" ("OWNER",
"WORKSPACE_NAME",
"WORKSPACE_ID",
"PARENT_WORKSPACE_NAME",
"PARENT_WORKSPACE_ID",
"CREATETIME",
"RETIRETIME",
"DESCRIPTION",
"MP_ROOT_WORKSPACE_ID",
"CONTINUALLY_REFRESHED") AS
  select owner, workspace_name, workspace_id, parent_workspace_name, parent_workspace_id,
       createtime, retiretime, description, mp_root_id mp_root_workspace_id, decode(rwt.isRefreshed, 1, 'YES', 'NO') continually_refreshed
from wmsys.wm$removed_workspaces_table rwt
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."CDB_REMOVED_WORKSPACES"  CONTAINER_DATA
 ("OWNER",
"WORKSPACE_NAME",
"WORKSPACE_ID",
"PARENT_WORKSPACE_NAME",
"PARENT_WORKSPACE_ID",
"CREATETIME",
"RETIRETIME",
"DESCRIPTION",
"MP_ROOT_WORKSPACE_ID",
"CONTINUALLY_REFRESHED",
"CON_ID") AS
  SELECT "OWNER","WORKSPACE_NAME","WORKSPACE_ID","PARENT_WORKSPACE_NAME","PARENT_WORKSPACE_ID","CREATETIME","RETIRETIME","DESCRIPTION","MP_ROOT_WORKSPACE_ID","CONTINUALLY_REFRESHED","CON_ID" FROM CONTAINERS("WMSYS"."DBA_REMOVED_WORKSPACES");

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."DBA_WM_SYS_PRIVS" ("GRANTEE",
"PRIVILEGE",
"GRANTOR",
"GRANTABLE") AS
  select spt.grantee,
       decode(spt.priv,'A',  'ACCESS_WORKSPACE',
                       'C',  'CREATE_WORKSPACE',
                       'D',  'REMOVE_WORKSPACE',
                       'F',  'FREEZE_WORKSPACE',
                       'G',  'GRANTPRIV_WORKSPACE',
                       'M',  'MERGE_WORKSPACE',
                       'R',  'ROLLBACK_WORKSPACE',
                       'AA', 'ACCESS_ANY_WORKSPACE',
                       'CA', 'CREATE_ANY_WORKSPACE',
                       'DA', 'REMOVE_ANY_WORKSPACE',
                       'FA', 'FREEZE_ANY_WORKSPACE',
                       'GA', 'GRANTPRIV_ANY_WORKSPACE',
                       'MA', 'MERGE_ANY_WORKSPACE',
                       'RA', 'ROLLBACK_ANY_WORKSPACE',
                       'W',  'WM_ADMIN',
                             'UNKNOWN_PRIV') privilege,
       spt.grantor,
       decode(spt.admin, 0, 'NO', 1, 'YES') grantable
from wmsys.wm$workspace_priv_table spt
where spt.workspace is null
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."CDB_WM_SYS_PRIVS"  CONTAINER_DATA
 ("GRANTEE",
"PRIVILEGE",
"GRANTOR",
"GRANTABLE",
"CON_ID") AS
  SELECT "GRANTEE","PRIVILEGE","GRANTOR","GRANTABLE","CON_ID" FROM CONTAINERS("WMSYS"."DBA_WM_SYS_PRIVS");

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."DBA_WM_VERSIONED_TABLES" ("TABLE_NAME",
"OWNER",
"STATE",
"HISTORY",
"NOTIFICATION",
"NOTIFYWORKSPACES",
"CONFLICT",
"DIFF",
"VALIDTIME") AS
  select /*+ LEADING(t) */ t.table_name, t.owner,
       disabling_ver state,
       t.hist history,
       decode(t.notification, 0, 'NO', 1, 'YES') notification,
       substr(notifyWorkspaces,2,length(notifyworkspaces)-2) notifyworkspaces,
       wmsys.ltadm.AreThereConflicts(t.owner, t.table_name) conflict,
       wmsys.ltadm.AreThereDiffs(t.owner, t.table_name) diff,
       decode(t.validtime, 0, 'NO', 1, 'YES') validtime
from wmsys.wm$versioned_tables t, dba_views u
where t.table_name = u.view_name and t.owner = u.owner
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."CDB_WM_VERSIONED_TABLES"  CONTAINER_DATA
 ("TABLE_NAME",
"OWNER",
"STATE",
"HISTORY",
"NOTIFICATION",
"NOTIFYWORKSPACES",
"CONFLICT",
"DIFF",
"VALIDTIME",
"CON_ID") AS
  SELECT "TABLE_NAME","OWNER","STATE","HISTORY","NOTIFICATION","NOTIFYWORKSPACES","CONFLICT","DIFF","VALIDTIME","CON_ID" FROM CONTAINERS("WMSYS"."DBA_WM_VERSIONED_TABLES");

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."DBA_WM_VT_ERRORS" ("OWNER",
"TABLE_NAME",
"STATE",
"SQL_STR",
"STATUS",
"ERROR_MSG") AS
  select decode(vt.owner, 'WMSYS', null, vt.owner) owner,
       decode(vt.owner, 'WMSYS', null, vt.table_name) table_name,
       decode(vt.owner, 'WMSYS', decode(vt.index_type, 10, 'DROP USER COMMAND', 11, 'EXPORT', 12, 'IMPORT', 'UNKNOWN OPERATION'), vt.state) state,
       vt.sql_str, et.status, et.error_msg
from (select t1.owner, t1.table_name, t1.disabling_ver state, nt.index_type, nt.index_field, dbms_lob.substr(nt.sql_str,4000, 1) sql_str
      from wmsys.wm$versioned_tables$h t1, table(t1.undo_code) nt) vt,
      wmsys.wm$vt_errors_table et
where (vt.state<>'HIDDEN' or vt.table_name in ('WM$IMP_EXP', 'WM$LOG_TABLE')) and
      vt.owner = et.owner and
      vt.table_name = et.table_name and
      vt.index_type = et.index_type and
      vt.index_field = et.index_field
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."CDB_WM_VT_ERRORS"  CONTAINER_DATA
 ("OWNER",
"TABLE_NAME",
"STATE",
"SQL_STR",
"STATUS",
"ERROR_MSG",
"CON_ID") AS
  SELECT "OWNER","TABLE_NAME","STATE","SQL_STR","STATUS","ERROR_MSG","CON_ID" FROM CONTAINERS("WMSYS"."DBA_WM_VT_ERRORS");

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."DBA_WORKSPACE_PRIVS" ("GRANTEE",
"WORKSPACE",
"PRIVILEGE",
"GRANTOR",
"GRANTABLE") AS
  select spt.grantee,
       spt.workspace,
       decode(spt.priv,'A',  'ACCESS_WORKSPACE',
                       'C',  'CREATE_WORKSPACE',
                       'D',  'REMOVE_WORKSPACE',
                       'F',  'FREEZE_WORKSPACE',
                       'G',  'GRANTPRIV_WORKSPACE',
                       'M',  'MERGE_WORKSPACE',
                       'R',  'ROLLBACK_WORKSPACE',
                       'AA', 'ACCESS_ANY_WORKSPACE',
                       'CA', 'CREATE_ANY_WORKSPACE',
                       'DA', 'REMOVE_ANY_WORKSPACE',
                       'FA', 'FREEZE_ANY_WORKSPACE',
                       'GA', 'GRANTPRIV_ANY_WORKSPACE',
                       'MA', 'MERGE_ANY_WORKSPACE',
                       'RA', 'ROLLBACK_ANY_WORKSPACE',
                       'W',  'WM_ADMIN',
                             'UNKNOWN_PRIV') privilege,
       spt.grantor,
       decode(spt.admin, 0, 'NO', 1, 'YES') grantable
from wmsys.wm$workspaces_table alt, wmsys.wm$workspace_priv_table spt
where alt.workspace = spt.workspace
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."CDB_WORKSPACE_PRIVS"  CONTAINER_DATA
 ("GRANTEE",
"WORKSPACE",
"PRIVILEGE",
"GRANTOR",
"GRANTABLE",
"CON_ID") AS
  SELECT "GRANTEE","WORKSPACE","PRIVILEGE","GRANTOR","GRANTABLE","CON_ID" FROM CONTAINERS("WMSYS"."DBA_WORKSPACE_PRIVS");

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."DBA_WORKSPACE_SAVEPOINTS" ("SAVEPOINT",
"WORKSPACE",
"IMPLICIT",
"POSITION",
"OWNER",
"CREATETIME",
"DESCRIPTION",
"CANROLLBACKTO",
"REMOVABLE",
"VERSION") AS
  select t.savepoint, t.workspace,
       decode(t.is_implicit, 0, 'NO', 1, 'YES') implicit, t.position,
       t.owner, t.createTime, t.description,
       decode(sign(t.version - max.pv), -1, 'NO', 'YES') canRollbackTo,
       decode(t.is_implicit || decode(parent_vers.parent_version, null, 'NOT_EXISTS', 'EXISTS'), '1EXISTS','NO','YES') removable,
       t.version
from wmsys.wm$workspace_savepoints_table t, wmsys.wm$workspaces_table asi,
     (select max(parent_version) pv, parent_workspace pw from wmsys.wm$workspaces_table group by parent_workspace) max,
     (select unique parent_version from wmsys.wm$workspaces_table) parent_vers
where t.workspace = asi.workspace and
      t.workspace = max.pw (+) and
      t.version = parent_vers.parent_version (+)
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."CDB_WORKSPACE_SAVEPOINTS"  CONTAINER_DATA
 ("SAVEPOINT",
"WORKSPACE",
"IMPLICIT",
"POSITION",
"OWNER",
"CREATETIME",
"DESCRIPTION",
"CANROLLBACKTO",
"REMOVABLE",
"VERSION",
"CON_ID") AS
  SELECT "SAVEPOINT","WORKSPACE","IMPLICIT","POSITION","OWNER","CREATETIME","DESCRIPTION","CANROLLBACKTO","REMOVABLE","VERSION","CON_ID" FROM CONTAINERS("WMSYS"."DBA_WORKSPACE_SAVEPOINTS");

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."DBA_WORKSPACE_SESSIONS" ("USERNAME",
"WORKSPACE",
"SID",
"STATUS",
"ISIMPLICIT") AS
  select sut.username, sut.workspace, sut.sid, decode(t.ses_addr, null, 'INACTIVE', 'ACTIVE') status, decode(isImplicit, 1, 'YES', 'NO') isImplicit
from wmsys.wm$workspace_sessions_view sut, gv$transaction t
where sut.lockMode = 'S' and sut.inst_id = t.inst_id(+) and sut.saddr = t.ses_addr(+)
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."CDB_WORKSPACE_SESSIONS"  CONTAINER_DATA
 ("USERNAME",
"WORKSPACE",
"SID",
"STATUS",
"ISIMPLICIT",
"CON_ID") AS
  SELECT "USERNAME","WORKSPACE","SID","STATUS","ISIMPLICIT","CON_ID" FROM CONTAINERS("WMSYS"."DBA_WORKSPACE_SESSIONS");

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."DBA_WORKSPACES" ("WORKSPACE",
"WORKSPACE_ID",
"PARENT_WORKSPACE",
"PARENT_SAVEPOINT",
"OWNER",
"CREATETIME",
"DESCRIPTION",
"FREEZE_STATUS",
"FREEZE_MODE",
"FREEZE_WRITER",
"SID",
"SERIAL#",
"INST_ID",
"FREEZE_OWNER",
"SESSION_DURATION",
"CURRENT_SESSION",
"RESOLVE_STATUS",
"RESOLVE_USER",
"MP_ROOT_WORKSPACE") AS
  select asp.workspace, asp.workspace_lock_id workspace_id, asp.parent_workspace, ssp.savepoint parent_savepoint,
       asp.owner, asp.createTime, asp.description,
       decode(asp.freeze_status,'LOCKED','FROZEN', 'UNLOCKED','UNFROZEN') freeze_status,
       decode(asp.oper_status, null, asp.freeze_mode,'INTERNAL') freeze_mode,
       decode(asp.freeze_mode, '1WRITER_SESSION', s.username, asp.freeze_writer) freeze_writer,
       to_number(decode(asp.freeze_mode, '1WRITER_SESSION', substr(asp.freeze_writer, 1, instr(asp.freeze_writer, ',')-1), null)) sid,
       to_number(decode(asp.freeze_mode, '1WRITER_SESSION', substr(asp.freeze_owner, instr(asp.freeze_owner, ',')+1,
                                                                   instr(asp.freeze_owner, ',',1,2)-instr(asp.freeze_owner, ',')-1), null)) serial#,
       to_number(decode(asp.freeze_mode, '1WRITER_SESSION', substr(asp.freeze_writer, instr(asp.freeze_writer, ',', 1, 2)+1), null)) inst_id,
       decode(asp.session_duration, 0, asp.freeze_owner, s.username) freeze_owner,
       decode(asp.freeze_status, 'UNLOCKED', null, decode(asp.session_duration, 1, 'YES', 'NO')) session_duration,
       decode(asp.session_duration, 1,
              decode((select 1 from sys.dual
                      where s.sid = sys_context('lt_ctx', 'cid') and
                            s.serial# = sys_context('lt_ctx', 'serial#') and
                            s.inst_id = dbms_utility.current_instance),
                     1, 'YES', 'NO'),
              null) current_session,
       decode(rst.workspace,null,'INACTIVE','ACTIVE') resolve_status,
       rst.resolve_user,
       mp_root mp_root_workspace
from   wmsys.wm$workspaces_table asp, wmsys.wm$workspace_savepoints_table ssp,
       wmsys.wm$resolve_workspaces_table rst, gv$session s
where  asp.parent_version = ssp.version (+) and
       nvl(ssp.is_implicit,1) = 1 and
       asp.workspace = rst.workspace (+) and
       to_char(s.sid(+)) = substr(asp.freeze_owner, 1, instr(asp.freeze_owner, ',')-1)  and
       to_char(s.serial#(+)) = substr(asp.freeze_owner, instr(asp.freeze_owner, ',')+1, instr(asp.freeze_owner, ',',1,2)-instr(asp.freeze_owner, ',')-1) and
       to_char(s.inst_id(+)) = substr(asp.freeze_owner, instr(asp.freeze_owner, ',', 1, 2)+1)
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."CDB_WORKSPACES"  CONTAINER_DATA
 ("WORKSPACE",
"WORKSPACE_ID",
"PARENT_WORKSPACE",
"PARENT_SAVEPOINT",
"OWNER",
"CREATETIME",
"DESCRIPTION",
"FREEZE_STATUS",
"FREEZE_MODE",
"FREEZE_WRITER",
"SID",
"SERIAL#",
"INST_ID",
"FREEZE_OWNER",
"SESSION_DURATION",
"CURRENT_SESSION",
"RESOLVE_STATUS",
"RESOLVE_USER",
"MP_ROOT_WORKSPACE",
"CON_ID") AS
  SELECT "WORKSPACE","WORKSPACE_ID","PARENT_WORKSPACE","PARENT_SAVEPOINT","OWNER","CREATETIME","DESCRIPTION","FREEZE_STATUS","FREEZE_MODE","FREEZE_WRITER","SID","SERIAL#","INST_ID","FREEZE_OWNER","SESSION_DURATION","CURRENT_SESSION","RESOLVE_STATUS","RESOLVE_USER","MP_ROOT_WORKSPACE","CON_ID" FROM CONTAINERS("WMSYS"."DBA_WORKSPACES");

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."ROLE_WM_PRIVS" ("ROLE",
"WORKSPACE",
"PRIVILEGE",
"GRANTABLE") AS
  select grantee role,
       workspace,
       decode(priv,'A',  'ACCESS_WORKSPACE',
                   'C',  'CREATE_WORKSPACE',
                   'D',  'REMOVE_WORKSPACE',
                   'F',  'FREEZE_WORKSPACE',
                   'G',  'GRANTPRIV_WORKSPACE',
                   'M',  'MERGE_WORKSPACE',
                   'R',  'ROLLBACK_WORKSPACE',
                   'AA', 'ACCESS_ANY_WORKSPACE',
                   'CA', 'CREATE_ANY_WORKSPACE',
                   'DA', 'REMOVE_ANY_WORKSPACE',
                   'FA', 'FREEZE_ANY_WORKSPACE',
                   'GA', 'GRANTPRIV_ANY_WORKSPACE',
                   'MA', 'MERGE_ANY_WORKSPACE',
                   'RA', 'ROLLBACK_ANY_WORKSPACE',
                   'W',  'WM_ADMIN',
                         'UNKNOWN_PRIV') privilege,
       decode(admin, 0, 'NO', 1, 'YES') grantable
from wmsys.wm$workspace_priv_table
where grantee in (select role from session_roles
                 union all
                  select 'WM_ADMIN_ROLE' from sys.dual where sys_context('userenv', 'current_user') = 'SYS')
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."USER_MP_GRAPH_WORKSPACES" ("MP_LEAF_WORKSPACE",
"GRAPH_WORKSPACE",
"GRAPH_FLAG") AS
  select mpg.mp_leaf_workspace, mpg.mp_graph_workspace graph_workspace,
       decode(mpg.mp_graph_flag,'R', 'ROOT_WORKSPACE', 'I', 'INTERMEDIATE_WORKSPACE', 'L', 'LEAF_WORKSPACE') graph_flag
from wmsys.wm$mp_graph_workspaces_table mpg, wmsys.user_workspaces uw
where mpg.mp_leaf_workspace = uw.workspace
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."USER_MP_PARENT_WORKSPACES" ("MP_LEAF_WORKSPACE",
"PARENT_WORKSPACE",
"CREATOR",
"CREATETIME",
"ISREFRESHED",
"PARENT_FLAG") AS
  select mp.workspace mp_leaf_workspace,mp.parent_workspace,mp.creator,mp.createtime,
       decode(mp.isRefreshed,0,'NO','YES') IsRefreshed, decode(mp.parent_flag, 'DP', 'DEFAULT_PARENT', 'ADDITIONAL_PARENT') parent_flag
from wmsys.wm$mp_parent_workspaces_table mp, wmsys.user_workspaces uw
where mp.workspace = uw.workspace
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."USER_REMOVED_WORKSPACES" ("OWNER",
"WORKSPACE_NAME",
"WORKSPACE_ID",
"PARENT_WORKSPACE_NAME",
"PARENT_WORKSPACE_ID",
"CREATETIME",
"RETIRETIME",
"DESCRIPTION",
"MP_ROOT_WORKSPACE_ID",
"CONTINUALLY_REFRESHED") AS
  select owner, workspace_name, workspace_id, parent_workspace_name, parent_workspace_id,
       createtime, retiretime, description, mp_root_id mp_root_workspace_id, decode(rwt.isRefreshed, 1, 'YES', 'NO') continually_refreshed
from wmsys.wm$removed_workspaces_table rwt
where rwt.owner = sys_context('userenv', 'current_user')
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."USER_WM_CONS_COLUMNS" ("OWNER",
"CONSTRAINT_NAME",
"TABLE_NAME",
"COLUMN_NAME",
"POSITION") AS
  select /*+ LEADING(t1) */ t1.owner, t1.constraint_name, t1.table_name, t1.column_name, t1.position
from wmsys.wm$cons_columns t1, user_views t2
where t1.owner = sys_context('userenv', 'current_user') and
      t1.table_name = t2.view_name
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."USER_WM_CONSTRAINTS" ("CONSTRAINT_NAME",
"CONSTRAINT_TYPE",
"TABLE_NAME",
"SEARCH_CONDITION",
"STATUS",
"INDEX_OWNER",
"INDEX_NAME",
"INDEX_TYPE") AS
  select /*+ LEADING(ct) */ constraint_name, constraint_type, table_name, search_condition, status, index_owner, index_name, index_type
from wmsys.wm$constraints_table ct, user_views uv
where ct.owner = sys_context('userenv', 'current_user') and
      ct.table_name = uv.view_name
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."USER_WM_IND_COLUMNS" ("INDEX_NAME",
"TABLE_NAME",
"COLUMN_NAME",
"COLUMN_POSITION",
"COLUMN_LENGTH",
"DESCEND") AS
  select /*+ LEADING(t1) */ t2.index_name, t1.table_name, t2.column_name, t2.column_position, t2.column_length, t2.descend
 from wmsys.wm$constraints_table t1, user_ind_columns t2
 where t1.index_owner = sys_context('userenv', 'current_user') and
       t1.index_name = t2.index_name and
       t1.constraint_type not in ('P', 'PN', 'PU')
union
 select /*+ LEADING(t1) */ t2.index_name, t1.table_name, t2.column_name, t2.column_position-1, t2.column_length, t2.descend
 from wmsys.wm$constraints_table t1, user_ind_columns t2
 where t1.index_owner = sys_context('userenv', 'current_user') and
       t1.index_name = t2.index_name and
       t1.constraint_type in ('P', 'PN', 'PU') and
       t2.column_name not in ('WM_VERSION','WM_DELSTATUS')
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."USER_WM_IND_EXPRESSIONS" ("INDEX_NAME",
"TABLE_NAME",
"COLUMN_EXPRESSION",
"COLUMN_POSITION") AS
  select /*+ LEADING(t1) */ t2.index_name, t1.table_name, t2.column_expression, t2.column_position
from wmsys.wm$constraints_table t1, user_ind_expressions t2
where t1.index_owner = sys_context('userenv', 'current_user') and
      t1.index_name = t2.index_name
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."USER_WM_LOCKED_TABLES" ("TABLE_OWNER",
"TABLE_NAME",
"LOCK_MODE",
"LOCK_OWNER",
"LOCKING_STATE") AS
  select t.owner table_owner, t.table_name, t.Lock_mode, t.Lock_owner, t.Locking_state
from wmsys.wm$all_locks_view t
where t.owner = sys_context('userenv', 'current_user')
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."USER_WM_MODIFIED_TABLES" ("TABLE_NAME",
"WORKSPACE",
"SAVEPOINT") AS
  select table_name, workspace, savepoint
from
      (select distinct o.table_name, o.workspace,
              nvl(s.savepoint, 'LATEST') savepoint,
              min(s.is_implicit) imp, count(s.version) counter
      from wmsys.wm$modified_tables o, wmsys.wm$workspace_savepoints_table s
      where substr(o.table_name, 1, instr(table_name,'.')-1) = sys_context('userenv', 'current_user') and
            o.version = s.version (+)
      group by o.table_name, o.workspace, savepoint)
where (imp = 0 or imp is null or counter = 1)
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."USER_WM_POLICIES" ("OBJECT_NAME",
"POLICY_GROUP",
"POLICY_NAME",
"PF_OWNER",
"PACKAGE",
"FUNCTION",
"SEL",
"INS",
"UPD",
"DEL",
"IDX",
"CHK_OPTION",
"ENABLE",
"STATIC_POLICY",
"POLICY_TYPE",
"LONG_PREDICATE") AS
  select object_name, policy_group, policy_name, pf_owner, package, function, sel, ins, upd, del, idx,
       chk_option, enable, static_policy, policy_type, long_predicate
from wmsys.all_wm_policies
where object_owner = sys_context('userenv', 'current_user')
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."USER_WM_RIC_INFO" ("CT_OWNER",
"CT_NAME",
"PT_OWNER",
"PT_NAME",
"RIC_NAME",
"CT_COLS",
"PT_COLS",
"R_CONSTRAINT_NAME",
"DELETE_RULE",
"STATUS") AS
  select ct_owner, ct_name, pt_owner, pt_name, ric_name, rtrim(ct_cols,',') ct_cols, rtrim(pt_cols,',') pt_cols,
       pt_unique_const_name r_constraint_name, my_mode delete_rule, status
from wmsys.wm$ric_table rt, user_views uv
where uv.view_name = rt.ct_name and
      rt.ct_owner = sys_context('userenv', 'current_user')
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."USER_WM_TAB_TRIGGERS" ("TRIGGER_NAME",
"TABLE_OWNER",
"TABLE_NAME",
"TRIGGER_TYPE",
"STATUS",
"WHEN_CLAUSE",
"DESCRIPTION",
"TRIGGER_BODY",
"TAB_MERGE_WO_REMOVE",
"TAB_MERGE_W_REMOVE",
"WSPC_MERGE_WO_REMOVE",
"WSPC_MERGE_W_REMOVE",
"DML",
"TABLE_IMPORT") AS
  select trig_name trigger_name,
       table_owner_name table_owner,
       table_name,
       wmsys.ltUtil.getTrigTypes(trig_flag) trigger_type,
       status,
       when_clause,
       description,
       trig_code trigger_body,
       decode(bitand(event_flag, 32768), 0, 'OFF', 'ON') tab_merge_wo_remove,
       decode(bitand(event_flag, 65536), 0, 'OFF', 'ON') tab_merge_w_remove,
       decode(bitand(event_flag, 131072), 0, 'OFF', 'ON') wspc_merge_wo_remove,
       decode(bitand(event_flag, 262144), 0, 'OFF', 'ON') wspc_merge_w_remove,
       decode(bitand(event_flag, 524288), 0, 'OFF', 'ON') dml,
       decode(bitand(event_flag, 33554432), 0, 'OFF', 'ON') table_import
from wmsys.wm$udtrig_info
where trig_owner_name = sys_context('userenv', 'current_user') and
      internal_type = 'USER_DEFINED'
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."USER_WM_VERSIONED_TABLES" ("TABLE_NAME",
"OWNER",
"STATE",
"HISTORY",
"NOTIFICATION",
"NOTIFYWORKSPACES",
"CONFLICT",
"DIFF",
"VALIDTIME") AS
  select t.table_name, t.owner,
       disabling_ver state,
       t.hist history,
       decode(t.notification, 0, 'NO', 1, 'YES') notification,
       substr(notifyWorkspaces,2,length(notifyworkspaces)-2) notifyworkspaces,
       wmsys.ltadm.AreThereConflicts(t.owner, t.table_name) conflict,
       wmsys.ltadm.AreThereDiffs(t.owner, t.table_name) diff,
       decode(t.validtime, 0, 'NO', 1, 'YES') validtime
from wmsys.wm$versioned_tables t
where t.owner = sys_context('userenv', 'current_user')
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."USER_WM_VT_ERRORS" ("OWNER",
"TABLE_NAME",
"STATE",
"SQL_STR",
"STATUS",
"ERROR_MSG") AS
  select vt.owner,vt.table_name,vt.state,vt.sql_str,et.status,et.error_msg
from (select t1.owner, t1.table_name, t1.disabling_ver state, nt.index_type, nt.index_field, dbms_lob.substr(nt.sql_str,4000,1) sql_str
      from wmsys.wm$versioned_tables t1, table(t1.undo_code) nt) vt,
     wmsys.wm$vt_errors_table et
where vt.owner = et.owner and
      vt.table_name = et.table_name and
      vt.index_type = et.index_type and
      vt.index_field = et.index_field and
      vt.owner = sys_context('userenv', 'current_user')
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."USER_WORKSPACE_PRIVS" ("GRANTEE",
"WORKSPACE",
"PRIVILEGE",
"GRANTOR",
"GRANTABLE") AS
  select spt.grantee,
       spt.workspace,
       decode(spt.priv,'A',  'ACCESS_WORKSPACE',
                       'C',  'CREATE_WORKSPACE',
                       'D',  'REMOVE_WORKSPACE',
                       'F',  'FREEZE_WORKSPACE',
                       'G',  'GRANTPRIV_WORKSPACE',
                       'M',  'MERGE_WORKSPACE',
                       'R',  'ROLLBACK_WORKSPACE',
                       'AA', 'ACCESS_ANY_WORKSPACE',
                       'CA', 'CREATE_ANY_WORKSPACE',
                       'DA', 'REMOVE_ANY_WORKSPACE',
                       'FA', 'FREEZE_ANY_WORKSPACE',
                       'GA', 'GRANTPRIV_ANY_WORKSPACE',
                       'MA', 'MERGE_ANY_WORKSPACE',
                       'RA', 'ROLLBACK_ANY_WORKSPACE',
                       'W',  'WM_ADMIN',
                             'UNKNOWN_PRIV') privilege,
       spt.grantor,
       decode(spt.admin, 0, 'NO', 1, 'YES') grantable
from user_workspaces ult, wmsys.wm$workspace_priv_table spt
where ult.workspace = spt.workspace
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."USER_WORKSPACE_SAVEPOINTS" ("SAVEPOINT",
"WORKSPACE",
"IMPLICIT",
"POSITION",
"OWNER",
"CREATETIME",
"DESCRIPTION",
"CANROLLBACKTO",
"REMOVABLE",
"VERSION") AS
  select t.savepoint, t.workspace,
       decode(t.is_implicit, 0, 'NO', 1, 'YES') implicit, t.position,
       t.owner, t.createTime, t.description,
       decode(sign(t.version - max.pv), -1, 'NO', 'YES') canRollbackTo,
       decode(t.is_implicit || decode(parent_vers.parent_version, null, 'NOT_EXISTS', 'EXISTS'), '1EXISTS', 'NO', 'YES') removable,
       t.version
from wmsys.wm$workspace_savepoints_table t, wmsys.wm$workspaces_table u,
     (select max(parent_version) pv, parent_workspace pw from wmsys.wm$workspaces_table group by parent_workspace) max,
     (select unique parent_version from wmsys.wm$workspaces_table) parent_vers
where t.workspace = u.workspace and
      u.owner = sys_context('userenv', 'current_user') and
      t.workspace = max.pw (+) and
      t.version = parent_vers.parent_version (+)
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM_COMPRESS_BATCH_SIZES" ("OWNER",
"TABLE_NAME",
"BATCH_SIZE",
"NUM_BATCHES") AS
  select /*+ RULE */ vt.owner, vt.table_name,
       decode(dt.data_type,
              'CHAR',decode(dt.num_buckets,null,'TABLE',0,'TABLE',1,'TABLE','TABLE/PRIMARY_KEY_RANGE'),
              'VARCHAR2',decode(dt.num_buckets,null,'TABLE',0,'TABLE',1,'TABLE','TABLE/PRIMARY_KEY_RANGE'),
              'NUMBER',decode(dt.num_buckets,null,'TABLE',0,'TABLE','TABLE/PRIMARY_KEY_RANGE'),
              'DATE',decode(dt.num_buckets,null,'TABLE',0,'TABLE','TABLE/PRIMARY_KEY_RANGE'),
              'TIMESTAMP',decode(dt.num_buckets,null,'TABLE',0,'TABLE','TABLE/PRIMARY_KEY_RANGE'),
              'TABLE') batch_size,
       decode(dt.data_type,
              'CHAR',decode(dt.num_buckets,null,1,0,1,1,1,dt.num_buckets),
              'VARCHAR2',decode(dt.num_buckets,null,1,0,1,1,1,dt.num_buckets),
              'NUMBER',decode(dt.num_buckets,null,1,0,1,1,(wmsys.ltadm.GetSystemParameter('NUMBER_OF_COMPRESS_BATCHES')),dt.num_buckets),
              'DATE',decode(dt.num_buckets,null,1,0,1,1,(wmsys.ltadm.GetSystemParameter('NUMBER_OF_COMPRESS_BATCHES')),dt.num_buckets),
              'TIMESTAMP',decode(dt.num_buckets,null,1,0,1,1,(wmsys.ltadm.GetSystemParameter('NUMBER_OF_COMPRESS_BATCHES')),dt.num_buckets),
              1) num_batches
from wmsys.wm$versioned_tables vt, dba_ind_columns di, dba_tab_columns dt
where di.table_owner = vt.owner and
      di.table_name = vt.table_name || '_LT' and
      di.index_name = vt.table_name || '_PKI$' and
      di.column_position = 1 and
      dt.owner = vt.owner and
      dt.table_name = vt.table_name || '_LT' and
      dt.column_name = di.column_name
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM_COMPRESSIBLE_TABLES" ("OWNER",
"TABLE_NAME",
"WORKSPACE",
"BEGIN_SAVEPOINT",
"END_SAVEPOINT") AS
  select vt.owner, vt.table_name,
        sys_context('lt_ctx','compress_workspace') workspace,
        sys_context('lt_ctx','compress_beginsp') begin_savepoint,
        sys_context('lt_ctx','compress_endsp') end_savepoint
 from wmsys.wm$versioned_tables vt
 where exists
      (select 1
       from wmsys.wm$modified_tables mt
       where mt.table_name = vt.owner || '.' || vt.table_name and
             mt.workspace = sys_context('lt_ctx','compress_workspace') and
             mt.version > sys_context('lt_ctx','compress_beginver') and
             mt.version <= sys_context('lt_ctx','compress_endver') and
             substr(vt.hist,1,17) != 'VIEW_WO_OVERWRITE' and
             mt.version in
               (select v.version
                from wmsys.wm$version_hierarchy_table v,
                     (select w1.beginver, w2.endver
                      from (select rownum rn,beginver
                            from (select distinct beginver
                                  from (select to_number(sys_context('lt_ctx','compress_beginver')) beginver
                                        from sys.dual
                                        where not exists
                                             (select parent_version
                                              from wmsys.wm$workspaces_table
                                              where parent_workspace = sys_context('lt_ctx','compress_workspace') and
                                                    to_number(sys_context('lt_ctx','compress_beginver')) = parent_version
                                             )
                                       union all
                                        select min(version) beginver
                                        from wmsys.wm$version_hierarchy_table,
                                             (select distinct parent_version
                                              from wmsys.wm$workspaces_table
                                              where parent_workspace = sys_context('lt_ctx','compress_workspace') and
                                                    parent_version >= sys_context('lt_ctx','compress_beginver') and
                                                    parent_version < sys_context('lt_ctx','compress_endver')) pv
                                        where workspace = sys_context('lt_ctx','compress_workspace') and
                                              version > pv.parent_version
                                        group by (pv.parent_version)
                                       )
                                  order by beginver
                                 )
                           ) w1,
                          (select rownum rn, endver
                           from (select distinct endver
                                 from (select parent_version endver
                                       from wmsys.wm$workspaces_table
                                       where parent_workspace = sys_context('lt_ctx','compress_workspace') and
                                             parent_version > sys_context('lt_ctx','compress_beginver') and
                                             parent_version <= sys_context('lt_ctx','compress_endver')
                                      union all
                                       select to_number(sys_context('lt_ctx','compress_endver')) endver
                                       from sys.dual
                                      )
                                 order by endver
                                )
                          ) w2
                      where w1.rn = w2.rn and
                            w2.endver > w1.beginver
                     ) p
                where v.workspace = sys_context('lt_ctx','compress_workspace') and
                      v.version > p.beginver and
                      v.version <= p.endver
               )
      union all
       select 1
       from wmsys.wm$modified_tables mt
       where mt.table_name = vt.owner || '.' || vt.table_name and
             mt.workspace = sys_context('lt_ctx','compress_workspace') and
             mt.version >= sys_context('lt_ctx','compress_beginver') and
             mt.version <= sys_context('lt_ctx','compress_endver') and
             substr(vt.hist,1,17) = 'VIEW_WO_OVERWRITE'
      )
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM_EVENTS_INFO" ("EVENT_NAME",
"CAPTURE") AS
  select event_name, capture
from wmsys.wm$events_info
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM_INSTALLATION" ("NAME",
"VALUE") AS
  select name, value
 from wmsys.wm$env_vars
 where hidden = 0
union
 select name, value
 from wmsys.wm$sysparam_all_values sv
 where isdefault = 'YES' and
       hidden = 0 and
       not exists (select 1 from wmsys.wm$env_vars ev where ev.name = sv.name)
union
 select 'OWM_VERSION', version from dba_registry where comp_id='OWM'
WITH READ ONLY ;

-- [dbsrc POST-PROCESSED]:
-- (17) Handle sqlplus limitation by injecting newlines after commas in
--      view column specs (SP2-0027: Input is too long (> 2499 characters)
--      - line ignored).
CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "WMSYS"."WM_REPLICATION_INFO" ("GROUPNAME",
"WRITERSITE") AS
  select groupName, masterdefsite writerSite
from wmsys.wm$replication_table
WITH READ ONLY ;

GRANT SELECT ON "WMSYS"."AQ$WM$EVENT_QUEUE_TABLE" TO "WM_ADMIN_ROLE";
GRANT SELECT ON "WMSYS"."WM_REPLICATION_INFO" TO PUBLIC;
GRANT SELECT ON "WMSYS"."WM_INSTALLATION" TO PUBLIC;
GRANT SELECT ON "WMSYS"."WM_EVENTS_INFO" TO PUBLIC;
GRANT SELECT ON "WMSYS"."USER_WORKSPACE_SAVEPOINTS" TO PUBLIC;
GRANT SELECT ON "WMSYS"."USER_WORKSPACE_PRIVS" TO PUBLIC;
GRANT SELECT ON "WMSYS"."USER_WM_VT_ERRORS" TO PUBLIC;
GRANT SELECT ON "WMSYS"."USER_WM_VERSIONED_TABLES" TO PUBLIC;
GRANT SELECT ON "WMSYS"."USER_WM_TAB_TRIGGERS" TO PUBLIC;
GRANT SELECT ON "WMSYS"."USER_WM_RIC_INFO" TO PUBLIC;
GRANT SELECT ON "WMSYS"."USER_WM_POLICIES" TO PUBLIC;
GRANT SELECT ON "WMSYS"."USER_WM_MODIFIED_TABLES" TO PUBLIC;
GRANT SELECT ON "WMSYS"."USER_WM_LOCKED_TABLES" TO PUBLIC;
GRANT SELECT ON "WMSYS"."USER_WM_IND_EXPRESSIONS" TO PUBLIC;
GRANT SELECT ON "WMSYS"."USER_WM_IND_COLUMNS" TO PUBLIC;
GRANT SELECT ON "WMSYS"."USER_WM_CONSTRAINTS" TO PUBLIC;
GRANT SELECT ON "WMSYS"."USER_WM_CONS_COLUMNS" TO PUBLIC;
GRANT SELECT ON "WMSYS"."USER_REMOVED_WORKSPACES" TO PUBLIC;
GRANT SELECT ON "WMSYS"."USER_MP_PARENT_WORKSPACES" TO PUBLIC;
GRANT SELECT ON "WMSYS"."USER_MP_GRAPH_WORKSPACES" TO PUBLIC;
GRANT SELECT ON "WMSYS"."ROLE_WM_PRIVS" TO PUBLIC;
GRANT SELECT ON "WMSYS"."ALL_WORKSPACE_SAVEPOINTS" TO PUBLIC;
GRANT SELECT ON "WMSYS"."ALL_WORKSPACE_PRIVS" TO PUBLIC;
GRANT SELECT ON "WMSYS"."ALL_WM_VT_ERRORS" TO PUBLIC;
GRANT SELECT ON "WMSYS"."ALL_WM_VERSIONED_TABLES" TO PUBLIC;
GRANT SELECT ON "WMSYS"."ALL_WM_TAB_TRIGGERS" TO PUBLIC;
GRANT SELECT ON "WMSYS"."ALL_WM_RIC_INFO" TO PUBLIC;
GRANT SELECT ON "WMSYS"."ALL_WM_POLICIES" TO PUBLIC;
GRANT SELECT ON "WMSYS"."ALL_WM_MODIFIED_TABLES" TO PUBLIC;
GRANT SELECT ON "WMSYS"."ALL_WM_LOCKED_TABLES" TO PUBLIC;
GRANT SELECT ON "WMSYS"."ALL_WM_IND_EXPRESSIONS" TO PUBLIC;
GRANT SELECT ON "WMSYS"."ALL_WM_IND_COLUMNS" TO PUBLIC;
GRANT SELECT ON "WMSYS"."ALL_WM_CONS_COLUMNS" TO PUBLIC;
GRANT SELECT ON "WMSYS"."ALL_WM_CONSTRAINTS" TO PUBLIC;
GRANT SELECT ON "WMSYS"."ALL_VERSION_HVIEW" TO PUBLIC;
GRANT SELECT ON "WMSYS"."ALL_REMOVED_WORKSPACES" TO PUBLIC;
GRANT SELECT ON "WMSYS"."ALL_MP_PARENT_WORKSPACES" TO PUBLIC;
GRANT SELECT ON "WMSYS"."ALL_MP_GRAPH_WORKSPACES" TO PUBLIC;
GRANT SELECT ON "WMSYS"."USER_WORKSPACES" TO PUBLIC;
GRANT SELECT ON "WMSYS"."ALL_WORKSPACES" TO PUBLIC;
GRANT SELECT ON "WMSYS"."USER_WM_PRIVS" TO PUBLIC;
GRANT SELECT ON "WMSYS"."AQ$WM$EVENT_QUEUE_TABLE" TO "AQ_ADMINISTRATOR_ROLE";
COMMENT ON COLUMN "WMSYS"."CDB_REMOVED_WORKSPACES"."CON_ID" IS 'container id';
COMMENT ON TABLE "WMSYS"."CDB_REMOVED_WORKSPACES"  IS ' in all containers';
COMMENT ON COLUMN "WMSYS"."CDB_WM_SYS_PRIVS"."CON_ID" IS 'container id';
COMMENT ON TABLE "WMSYS"."CDB_WM_SYS_PRIVS"  IS ' in all containers';
COMMENT ON COLUMN "WMSYS"."CDB_WM_VERSIONED_TABLES"."CON_ID" IS 'container id';
COMMENT ON TABLE "WMSYS"."CDB_WM_VERSIONED_TABLES"  IS ' in all containers';
COMMENT ON COLUMN "WMSYS"."CDB_WM_VT_ERRORS"."CON_ID" IS 'container id';
COMMENT ON TABLE "WMSYS"."CDB_WM_VT_ERRORS"  IS ' in all containers';
COMMENT ON COLUMN "WMSYS"."CDB_WORKSPACE_PRIVS"."CON_ID" IS 'container id';
COMMENT ON TABLE "WMSYS"."CDB_WORKSPACE_PRIVS"  IS ' in all containers';
COMMENT ON COLUMN "WMSYS"."CDB_WORKSPACE_SAVEPOINTS"."CON_ID" IS 'container id';
COMMENT ON TABLE "WMSYS"."CDB_WORKSPACE_SAVEPOINTS"  IS ' in all containers';
COMMENT ON COLUMN "WMSYS"."CDB_WORKSPACE_SESSIONS"."CON_ID" IS 'container id';
COMMENT ON TABLE "WMSYS"."CDB_WORKSPACE_SESSIONS"  IS ' in all containers';
COMMENT ON COLUMN "WMSYS"."CDB_WORKSPACES"."CON_ID" IS 'container id';
COMMENT ON TABLE "WMSYS"."CDB_WORKSPACES"  IS ' in all containers';
CREATE OR REPLACE NONEDITIONABLE TYPE BODY "WMSYS"."WM_PERIOD" wrapped
a000000
1
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
e
db ef
IQMBRbtfSUi1VSiJ59958/Z/MQIwgxDwa8sVfI7ps/gYwUVsFnZY/IN4FpMFQ4F5aVwdDC82
rK+KhpOEfOfiU+pubnFKAOaGMkaxYgDRch5zdBuOpiszcLPfWlDL3C0Iy0rfgVrUHok+qChd
cIkaM/HfLDuvkFLZFR8DroicqEBGSRsmV7LYl8yfYMRdeQ05Uuet66CUlEeC45NdOgrCKUUP
DYdKsylFhQ0jHdFt2m4=
/

CREATE OR REPLACE OPERATOR "WMSYS"."WM_OVERLAPS" BINDING
	("WMSYS"."WM_PERIOD", "WMSYS"."WM_PERIOD") RETURN INTEGER
	   USING "WMSYS"."OWM_VT_PKG"."WM_OVERLAPS";

CREATE OR REPLACE OPERATOR "WMSYS"."WM_INTERSECTION" BINDING
	("WMSYS"."WM_PERIOD", "WMSYS"."WM_PERIOD") RETURN "WMSYS"."WM_PERIOD"
	   USING "WMSYS"."OWM_VT_PKG"."WM_INTERSECTION";

CREATE OR REPLACE OPERATOR "WMSYS"."WM_LDIFF" BINDING
	("WMSYS"."WM_PERIOD", "WMSYS"."WM_PERIOD") RETURN "WMSYS"."WM_PERIOD"
	   USING "WMSYS"."OWM_VT_PKG"."WM_LDIFF";

CREATE OR REPLACE OPERATOR "WMSYS"."WM_RDIFF" BINDING
	("WMSYS"."WM_PERIOD", "WMSYS"."WM_PERIOD") RETURN "WMSYS"."WM_PERIOD"
	   USING "WMSYS"."OWM_VT_PKG"."WM_RDIFF";

CREATE OR REPLACE OPERATOR "WMSYS"."WM_CONTAINS" BINDING
	("WMSYS"."WM_PERIOD", "WMSYS"."WM_PERIOD") RETURN INTEGER
	   USING "WMSYS"."OWM_VT_PKG"."WM_CONTAINS";

CREATE OR REPLACE OPERATOR "WMSYS"."WM_MEETS" BINDING
	("WMSYS"."WM_PERIOD", "WMSYS"."WM_PERIOD") RETURN INTEGER
	   USING "WMSYS"."OWM_VT_PKG"."WM_MEETS";

CREATE OR REPLACE OPERATOR "WMSYS"."WM_LESSTHAN" BINDING
	("WMSYS"."WM_PERIOD", "WMSYS"."WM_PERIOD") RETURN INTEGER
	   USING "WMSYS"."OWM_VT_PKG"."WM_LESSTHAN";

CREATE OR REPLACE OPERATOR "WMSYS"."WM_GREATERTHAN" BINDING
	("WMSYS"."WM_PERIOD", "WMSYS"."WM_PERIOD") RETURN INTEGER
	   USING "WMSYS"."OWM_VT_PKG"."WM_GREATERTHAN";

CREATE OR REPLACE OPERATOR "WMSYS"."WM_EQUALS" BINDING
	("WMSYS"."WM_PERIOD", "WMSYS"."WM_PERIOD") RETURN INTEGER
	   USING "WMSYS"."OWM_VT_PKG"."WM_EQUALS";

GRANT EXECUTE ON "WMSYS"."WM_OVERLAPS" TO PUBLIC;
GRANT EXECUTE ON "WMSYS"."WM_EQUALS" TO PUBLIC;
GRANT EXECUTE ON "WMSYS"."WM_GREATERTHAN" TO PUBLIC;
GRANT EXECUTE ON "WMSYS"."WM_LESSTHAN" TO PUBLIC;
GRANT EXECUTE ON "WMSYS"."WM_MEETS" TO PUBLIC;
GRANT EXECUTE ON "WMSYS"."WM_CONTAINS" TO PUBLIC;
GRANT EXECUTE ON "WMSYS"."WM_RDIFF" TO PUBLIC;
GRANT EXECUTE ON "WMSYS"."WM_LDIFF" TO PUBLIC;
GRANT EXECUTE ON "WMSYS"."WM_INTERSECTION" TO PUBLIC;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$WST_I_TRIG" instead of insert on wmsys.wm$workspace_savepoints_table for each row
declare
  flag_v integer := 0;
  ws#    integer := wmsys.ltUtil.getWorkspaceLockId(:new.workspace) ;
begin
  flag_v := wmsys.owm_dml_pkg.wm$workspace_savepoints_t$f(:new.is_implicit) ;

  insert into wmsys.wm$workspace_savepoints_table$(workspace#, savepoint, version, owner, createtime, description, wm$flag)
  values (ws#, :new.savepoint, :new.version, :new.owner, :new.createtime, :new.description, flag_v) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$WST_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$WT_I_TRIG" instead of insert on wmsys.wm$workspaces_table for each row
declare
  flag_v integer := 0;
  ws#    integer := wmsys.ltUtil.getWorkspaceLockId(:new.parent_workspace) ;


  last_change     timestamp with time zone := :new.last_change ;
begin
  flag_v := wmsys.owm_dml_pkg.wm$workspaces_table$f(:new.freeze_status, :new.freeze_mode, :new.wm_lockmode,
                                                    :new.isrefreshed, :new.session_duration, :new.cr_status) ;

  if (last_change is null) then
    last_change := systimestamp ;
  end if ;

  insert into wmsys.wm$workspaces_table$(workspace, parent_workspace#, current_version, parent_version, post_version,
                                         owner, createtime, description, workspace_lock_id, freeze_writer, freeze_owner,
                                         sync_parver, last_change, depth, mp_root, wm$flag)
  values (:new.workspace, ws#, :new.current_version, :new.parent_version, :new.post_version, :new.owner, :new.createtime,
          :new.description, :new.workspace_lock_id, :new.freeze_writer, :new.freeze_owner,
          :new.sync_parver, last_change, :new.depth, :new.mp_root, flag_v) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$WT_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$WT_U_TRIG" instead of update on wmsys.wm$workspaces_table for each row
declare
  sqlstr  varchar2(32000) ;
  flag_v  integer := 0;
begin
  if (updating('FREEZE_STATUS') or updating('FREEZE_MODE') or updating('WM_LOCKMODE') or
     updating('ISREFRESHED') or updating('SESSION_DURATION') or updating('CR_STATUS')) then
    flag_v := wmsys.owm_dml_pkg.wm$workspaces_table$f(:new.freeze_status, :new.freeze_mode, :new.wm_lockmode,
                                                      :new.isrefreshed, :new.session_duration, :new.cr_status) ;
    sqlstr := sqlstr || ' wm$flag=:1' ;
  end if ;

  if (updating('CURRENT_VERSION')) then
    sqlstr := sqlstr || (case when sqlstr is not null then ',' else null end) || ' current_version=:2' ;
  end if;

  if (updating('PARENT_VERSION')) then
    sqlstr := sqlstr || (case when sqlstr is not null then ',' else null end) || ' parent_version=:3' ;
  end if;

  if (updating('POST_VERSION')) then
    sqlstr := sqlstr || (case when sqlstr is not null then ',' else null end) || ' post_version=:4' ;
  end if;

  if (updating('DESCRIPTION')) then
    sqlstr := sqlstr || (case when sqlstr is not null then ',' else null end) || ' description=:5' ;
  end if;

  if (updating('FREEZE_WRITER')) then
    sqlstr := sqlstr || (case when sqlstr is not null then ',' else null end) || ' freeze_writer=:6' ;
  end if;

  if (updating('FREEZE_OWNER')) then
    sqlstr := sqlstr || (case when sqlstr is not null then ',' else null end) || ' freeze_owner=:7' ;
  end if;

  if (updating('SYNC_PARVER')) then
    sqlstr := sqlstr || (case when sqlstr is not null then ',' else null end) || ' sync_parver=:8' ;
  end if;

  if (updating('LAST_CHANGE')) then
    sqlstr := sqlstr || (case when sqlstr is not null then ',' else null end) || ' last_change=:9' ;
  end if;

  if (updating('MP_ROOT')) then
    sqlstr := sqlstr || (case when sqlstr is not null then ',' else null end) || ' mp_root=:10' ;
  end if;

  if (sqlstr is not null) then
    execute immediate
      'begin
         if (1=2 and (:1 is null or :2 is null or :3 is null or :4 is null or :5 is null or :6 is null or
                      :7 is null or :8 is null or :9 is null or :10 is null or :11 is null)) then
           null ;
         end if;

         update wmsys.wm$workspaces_table$
         set ' || substr(sqlstr, 2) || '
         where workspace_lock_id=:11;
       end;' using flag_v, :new.current_version, :new.parent_version, :new.post_version, :new.description, :new.freeze_writer,
                   :new.freeze_owner, :new.sync_parver, :new.last_change, :new.mp_root, :old.workspace_lock_id ;
  end if ;
end;
/

ALTER TRIGGER "WMSYS"."WM$WT_U_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$WT_D_TRIG" instead of delete on wmsys.wm$workspaces_table for each row
begin
  delete wmsys.wm$batch_compressible_tables$
  where workspace#=:old.workspace_lock_id ;

  delete wmsys.wm$lockrows_info$
  where workspace#=:old.workspace_lock_id ;

  delete wmsys.wm$mp_graph_workspaces_table$
  where mp_leaf_workspace#=:old.workspace_lock_id ;

  delete wmsys.wm$mp_graph_workspaces_table$
  where mp_graph_workspace#=:old.workspace_lock_id ;

  delete wmsys.wm$mp_parent_workspaces_table$
  where workspace#=:old.workspace_lock_id ;

  delete wmsys.wm$mp_parent_workspaces_table$
  where parent_workspace#=:old.workspace_lock_id ;

  delete wmsys.wm$mw_table$
  where workspace#=:old.workspace_lock_id ;

  delete wmsys.wm$resolve_workspaces_table$
  where workspace#=:old.workspace_lock_id ;

  delete wmsys.wm$version_hierarchy_table$
  where workspace#=:old.workspace_lock_id ;

  delete wmsys.wm$version_table$
  where workspace#=:old.workspace_lock_id ;

  delete wmsys.wm$version_table$
  where anc_workspace#=:old.workspace_lock_id ;

  delete wmsys.wm$workspace_priv_table$
  where workspace#=:old.workspace_lock_id ;

  delete wmsys.wm$workspace_savepoints_table$
  where workspace#=:old.workspace_lock_id ;

  delete wmsys.wm$workspaces_table$
  where workspace_lock_id=:old.workspace_lock_id ;
end;
/

ALTER TRIGGER "WMSYS"."WM$WT_D_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$VTH_I_TRIG" instead of insert on wmsys.wm$versioned_tables$h for each row
declare
  flag_v integer := 0;


  repsitecount integer := :new.repsitecount ;
begin
  flag_v := wmsys.owm_dml_pkg.wm$versioned_tables$f(:new.disabling_ver, :new.hist, :new.validtime, :new.bl_savepoint,
                                                    :new.bl_check_for_duplicates, :new.bl_single_transaction) ;

  if (repsitecount is null) then
    repsitecount := 0 ;
  end if ;

  insert into wmsys.wm$versioned_tables$(vtid#, table_name, owner, ricweight,
                                         pkey_cols, undo_code, siteslist, repsitecount, bl_version, wm$flag)
  values (:new.vtid, :new.table_name, :new.owner, :new.ricweight, :new.pkey_cols, :new.undo_code,
          :new.siteslist, repsitecount, :new.bl_version, flag_v) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$VTH_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$VTH_U_TRIG" instead of update on wmsys.wm$versioned_tables$h for each row
declare
  sqlstr  varchar2(32000) ;
  flag_v  integer := 0;
begin
  if (updating('DISABLING_VER') or updating('HIST') or updating('VALIDTIME') or
      updating('BL_SAVEPOINT') or updating('BL_CHECK_FOR_DUPLICATES') or updating('BL_SINGLE_TRANSACTION')) then
    flag_v := wmsys.owm_dml_pkg.wm$versioned_tables$f(:new.disabling_ver, :new.hist, :new.validtime, :new.bl_savepoint,
                                                      :new.bl_check_for_duplicates, :new.bl_single_transaction) ;
    sqlstr := sqlstr || ' wm$flag=:1' ;
  end if ;

  if (updating('RICWEIGHT')) then
    sqlstr := sqlstr || (case when sqlstr is not null then ',' else null end) || ' ricweight=:2' ;
  end if;

  if (updating('PKEY_COLS')) then
    sqlstr := sqlstr || (case when sqlstr is not null then ',' else null end) || ' pkey_cols=:3' ;
  end if;

  if (updating('UNDO_CODE')) then
    sqlstr := sqlstr || (case when sqlstr is not null then ',' else null end) || ' undo_code=:4' ;
  end if;

  if (updating('SITESLIST')) then
    sqlstr := sqlstr || (case when sqlstr is not null then ',' else null end) || ' siteslist=:5' ;
  end if;

  if (updating('REPSITECOUNT')) then
    sqlstr := sqlstr || (case when sqlstr is not null then ',' else null end) || ' repsitecount=:6' ;
  end if;

  if (updating('BL_VERSION')) then
    sqlstr := sqlstr || (case when sqlstr is not null then ',' else null end) || ' bl_version=:7' ;
  end if;

  if (sqlstr is not null) then
    execute immediate
      'begin
         if (1=2 and (:1 is null or :2 is null or :3 is null or :4 is null or :5 is null or
                      :6 is null or :7 is null or :8 is null or :9 is null)) then
           null ;
         end if;

         update wmsys.wm$versioned_tables$
         set ' || substr(sqlstr, 2) || '
         where owner=:8 and table_name=:9;
       end;' using flag_v, :new.ricweight, :new.pkey_cols, :new.undo_code, :new.siteslist, :new.repsitecount, :new.bl_version,
                   :old.owner, :old.table_name ;
  end if ;
end;
/

ALTER TRIGGER "WMSYS"."WM$VTH_U_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$VTH_D_TRIG" instead of delete on wmsys.wm$versioned_tables$h for each row
begin
  delete wmsys.wm$batch_compressible_tables$
  where vtid#=:old.vtid ;

  delete wmsys.wm$constraints_table$
  where vtid#=:old.vtid ;

  delete wmsys.wm$cons_columns$
  where vtid#=:old.vtid ;

  delete wmsys.wm$hint_table$
  where vtid#=:old.vtid ;

  delete wmsys.wm$lockrows_info$
  where vtid#=:old.vtid ;

  delete wmsys.wm$modified_tables$
  where vtid#=:old.vtid ;

  delete wmsys.wm$nested_columns_table$
  where vtid#=:old.vtid ;

  delete wmsys.wm$ric_table$
  where ct_vtid#=:old.vtid ;

  delete wmsys.wm$ric_triggers_table$
  where ct_vtid#=:old.vtid ;

  delete wmsys.wm$udtrig_dispatch_procs$
  where vtid#=:old.vtid ;

  delete wmsys.wm$udtrig_info$
  where vtid#=:old.vtid ;

  delete wmsys.wm$vt_errors_table$
  where vtid#=:old.vtid ;

  delete wmsys.wm$versioned_tables$
  where vtid#=:old.vtid ;
end;
/

ALTER TRIGGER "WMSYS"."WM$VTH_D_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$VTH_NT_I_TRIG" instead of insert on nested table undo_code of wmsys.wm$versioned_tables$h for each row
begin
  insert into table(select undo_code from wmsys.wm$versioned_tables$ where owner=:parent.owner and table_name=:parent.table_name)
  values(:new.index_type, :new.index_field, :new.sql_str) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$VTH_NT_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$VTH_NT_U_TRIG" instead of update on nested table undo_code of wmsys.wm$versioned_tables$h for each row
begin
  update table (select undo_code from wmsys.wm$versioned_tables$ where owner=:parent.owner and table_name=:parent.table_name)
  set sql_str = :new.sql_str
  where index_type  = index_type and
        index_field = index_field ;
end;
/

ALTER TRIGGER "WMSYS"."WM$VTH_NT_U_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$VTH_NT_D_TRIG" instead of delete on nested table undo_code of wmsys.wm$versioned_tables$h for each row
begin
  delete table (select undo_code from wmsys.wm$versioned_tables$ where owner=:parent.owner and table_name=:parent.table_name)
  where index_type  = :old.index_type and
        index_field = :old.index_field ;
end;
/

ALTER TRIGGER "WMSYS"."WM$VTH_NT_D_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$BCT_I_TRIG" instead of insert on wmsys.wm$batch_compressible_tables for each row
declare
  flag_v integer := 0;
  ws#    integer := wmsys.ltUtil.getWorkspaceLockId(:new.workspace) ;
  vtid   integer := wmsys.ltUtil.getVtid(substr(upper(:new.table_name), 1, instr(:new.table_name, '.')-1),
                                         substr(upper(:new.table_name), instr(:new.table_name, '.')+1)) ;
begin
  insert into wmsys.wm$batch_compressible_tables$(workspace#, vtid#, begin_version, end_version, where_clause)
  values (ws#, vtid, :new.begin_version, :new.end_version, :new.where_clause) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$BCT_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$CC_I_TRIG" instead of insert on wmsys.wm$cons_columns for each row
declare
  flag_v integer := 0;
  vtid   integer := wmsys.ltUtil.getVtid(:new.owner, :new.table_name) ;
begin
  insert into wmsys.wm$cons_columns$(vtid#, constraint_name, column_name, position)
  values (vtid, :new.constraint_name, :new.column_name, :new.position) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$CC_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$CT_I_TRIG" instead of insert on wmsys.wm$constraints_table for each row
declare
  flag_v integer := 0;
  vtid   integer := wmsys.ltUtil.getVtid(:new.owner, :new.table_name) ;
begin
  flag_v := wmsys.owm_dml_pkg.wm$constraints_table$f(:new.constraint_type, :new.status, :new.index_type) ;

  insert into wmsys.wm$constraints_table$(vtid#, constraint_name, search_condition, index_owner, index_name, aliasedcolumns, numindexcols, wm$flag)
  values (vtid, :new.constraint_name, :new.search_condition, :new.index_owner, :new.index_name, :new.aliasedcolumns, :new.numindexcols, flag_v) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$CT_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$CT_U_TRIG" instead of update on wmsys.wm$constraints_table for each row
declare
  sqlstr  varchar2(32000) ;
  flag_v  integer := 0;
  vtid    integer := wmsys.ltUtil.getVtid(:old.owner, :old.table_name) ;
begin
  if (updating('STATUS')) then
    flag_v := wmsys.owm_dml_pkg.wm$constraints_table$f(:new.constraint_type, :new.status, :new.index_type) ;
    sqlstr := sqlstr || ' wm$flag=:1' ;
  end if ;

  if (updating('CONSTRAINT_NAME')) then
    sqlstr := sqlstr || (case when sqlstr is not null then ',' else null end) || ' constraint_name=:2' ;
  end if;

  if (updating('INDEX_NAME')) then
    sqlstr := sqlstr || (case when sqlstr is not null then ',' else null end) || ' index_name=:3' ;
  end if;

  if (updating('ALIASEDCOLUMNS')) then
    sqlstr := sqlstr || (case when sqlstr is not null then ',' else null end) || ' aliasedcolumns=:4' ;
  end if;

  if (updating('NUMINDEXCOLS')) then
    sqlstr := sqlstr || (case when sqlstr is not null then ',' else null end) || ' numindexcols=:5' ;
  end if;

  if (sqlstr is not null) then
    execute immediate
      'begin
         if (1=2 and (:1 is null or :2 is null or :3 is null or :4 is null or :5 is null or :6 is null or :7 is null or :8 is null)) then
           null ;
         end if;

         update wmsys.wm$constraints_table$
         set ' || substr(sqlstr, 2) || '
         where vtid#=:6 and constraint_name=:7 and bitand(wm$flag, 8)=decode(:8, ''DISABLED'', 0, ''ENABLED'', 8);
       end;' using flag_v, :new.constraint_name, :new.index_name, :new.aliasedcolumns, :new.numindexcols,
                   vtid, :old.constraint_name, :old.status ;
  end if ;
end;
/

ALTER TRIGGER "WMSYS"."WM$CT_U_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$EV_I_TRIG" instead of insert on wmsys.wm$env_vars for each row
declare
  flag_v integer := 0;
begin
  flag_v := wmsys.owm_dml_pkg.wm$env_vars$f(:new.hidden) ;

  insert into wmsys.wm$env_vars$(name, value, wm$flag)
  values (:new.name, :new.value, flag_v) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$EV_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$EI_I_TRIG" instead of insert on wmsys.wm$events_info for each row
declare
  flag_v integer := 0;
begin
  flag_v := wmsys.owm_dml_pkg.wm$events_info$f(:new.capture) ;

  insert into wmsys.wm$events_info$(event_name, wm$flag)
  values (:new.event_name, flag_v) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$EI_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$EI_U_TRIG" instead of update on wmsys.wm$events_info for each row
declare
  sqlstr  varchar2(32000) ;
  flag_v  integer := 0;
begin
  if (updating('CAPTURE')) then
    flag_v := wmsys.owm_dml_pkg.wm$events_info$f(:new.capture) ;
    sqlstr := sqlstr || ' wm$flag=:1' ;
  end if ;

  if (sqlstr is not null) then
    execute immediate
      'begin
         if (1=2 and (:1 is null or :2 is null)) then
           null ;
         end if;

         update wmsys.wm$events_info$
         set ' || substr(sqlstr, 2) || '
         where event_name=:2;
       end;' using flag_v, :old.event_name ;
  end if ;
end;
/

ALTER TRIGGER "WMSYS"."WM$EI_U_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$HT_I_TRIG" instead of insert on wmsys.wm$hint_table for each row
declare
  flag_v integer := 0;
  vtid   integer := wmsys.ltUtil.getVtid(:new.owner, :new.table_name) ;
begin
  flag_v := wmsys.owm_dml_pkg.wm$hint_table$f(:new.isdefault) ;

  insert into wmsys.wm$hint_table$(hint_id, vtid#, hint_text, wm$flag)
  values (:new.hint_id, vtid, :new.hint_text, flag_v) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$HT_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$LI_I_TRIG" instead of insert on wmsys.wm$lockrows_info for each row
declare
  flag_v integer := 0;
  ws#    integer := wmsys.ltUtil.getWorkspaceLockId(:new.workspace) ;
  vtid   integer := wmsys.ltUtil.getVtid(:new.owner, :new.table_name) ;
begin
  insert into wmsys.wm$lockrows_info$(workspace#, vtid#, where_clause)
  values (ws#, vtid, :new.where_clause) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$LI_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$MT_I_TRIG" instead of insert on wmsys.wm$modified_tables for each row
declare
  flag_v integer := 0;
  ws#    integer := wmsys.ltUtil.getWorkspaceLockId(:new.workspace) ;
  vtid   integer := wmsys.ltUtil.getVtid(substr(upper(:new.table_name), 1, instr(:new.table_name, '.')-1),
                                         substr(upper(:new.table_name), instr(:new.table_name, '.')+1)) ;
begin
  insert into wmsys.wm$modified_tables$(vtid#, version, workspace#)
  values (vtid, :new.version, ws#) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$MT_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$MGWT_I_TRIG" instead of insert on wmsys.wm$mp_graph_workspaces_table for each row
declare
  flag_v integer := 0;
  ws#1   integer := wmsys.ltUtil.getWorkspaceLockId(:new.mp_leaf_workspace) ;
  ws#2   integer := wmsys.ltUtil.getWorkspaceLockId(:new.mp_graph_workspace) ;
begin
  flag_v := wmsys.owm_dml_pkg.wm$mp_graph_workspaces_table$f(:new.mp_graph_flag) ;

  insert into wmsys.wm$mp_graph_workspaces_table$(mp_leaf_workspace#, mp_graph_workspace#, anc_version, wm$flag)
  values (ws#1, ws#2, :new.anc_version, flag_v) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$MGWT_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$MPWT_I_TRIG" instead of insert on wmsys.wm$mp_parent_workspaces_table for each row
declare
  flag_v integer := 0;
  ws#1   integer := wmsys.ltUtil.getWorkspaceLockId(:new.workspace) ;
  ws#2   integer := wmsys.ltUtil.getWorkspaceLockId(:new.parent_workspace) ;
begin
  flag_v := wmsys.owm_dml_pkg.wm$mp_parent_workspaces_t$f(:new.isrefreshed, :new.parent_flag) ;

  insert into wmsys.wm$mp_parent_workspaces_table$(workspace#, parent_workspace#, parent_version, creator, createtime, wm$flag)
  values (ws#1, ws#2, :new.parent_version, :new.creator, :new.createtime, flag_v) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$MPWT_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$MW_I_TRIG" instead of insert on wmsys.wm$mw_table for each row
declare
  flag_v integer := 0;
  ws#    integer := wmsys.ltUtil.getWorkspaceLockId(:new.workspace) ;
begin
  insert into wmsys.wm$mw_table$(workspace#)
  values (ws#) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$MW_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$NCT_I_TRIG" instead of insert on wmsys.wm$nested_columns_table for each row
declare
  flag_v integer := 0;
  vtid   integer := wmsys.ltUtil.getVtid(:new.owner, :new.table_name) ;
begin
  insert into wmsys.wm$nested_columns_table$(vtid#, column_name, position, type_owner, type_name, nt_owner, nt_name, nt_store)
  values (vtid, :new.column_name, :new.position, :new.type_owner, :new.type_name, :new.nt_owner, :new.nt_name, :new.nt_store) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$NCT_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$NT_I_TRIG" instead of insert on wmsys.wm$nextver_table for each row
declare
  flag_v integer := 0;
  ws#    integer := wmsys.ltUtil.getWorkspaceLockId(:new.workspace) ;
begin
  insert into wmsys.wm$nextver_table$(version, workspace#, next_vers, split)
  values (:new.version, ws#, :new.next_vers, :new.split) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$NT_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$RWST_I_TRIG" instead of insert on wmsys.wm$removed_workspaces_table for each row
declare
  flag_v integer := 0;
begin
  flag_v := wmsys.owm_dml_pkg.wm$removed_workspaces_table$f(:new.isrefreshed) ;

  insert into wmsys.wm$removed_workspaces_table$(owner, workspace_name, workspace_id, parent_workspace_id,
                                                 createtime, retiretime, description, mp_root_id, wm$flag)
  values (:new.owner, :new.workspace_name, :new.workspace_id, :new.parent_workspace_id,
          :new.createtime, :new.retiretime, :new.description, :new.mp_root_id, flag_v) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$RWST_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$REPT_I_TRIG" instead of insert on wmsys.wm$replication_table for each row
declare
  flag_v integer := 0;
begin
  flag_v := wmsys.owm_dml_pkg.wm$env_vars$f(1) ;

  insert into wmsys.wm$env_vars$ values('REPLICATION_DETAILS',
                                       :new.groupname || '|' || :new.masterdefsite || '|' || (case :new.iswritersite when 'Y' then 'Y' else 'N' end),
                                       flag_v) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$REPT_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$RT_U_TRIG" instead of update on wmsys.wm$replication_table for each row
declare
  sqlstr  varchar2(32000) ;
  flag_v  integer := 0;
begin
  update wmsys.wm$env_vars$
  set value = :new.groupname || '|' || :new.masterdefsite || '|' || (case :new.iswritersite when 'Y' then 'Y' else 'N' end)
  where name = 'REPLICATION_DETAILS' ;
end;
/

ALTER TRIGGER "WMSYS"."WM$RT_U_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$RWT_I_TRIG" instead of insert on wmsys.wm$resolve_workspaces_table for each row
declare
  flag_v integer := 0;
  ws#    integer := wmsys.ltUtil.getWorkspaceLockId(:new.workspace) ;
begin
  flag_v := wmsys.owm_dml_pkg.wm$resolve_workspaces_table$f(:new.oldfreezemode) ;

  insert into wmsys.wm$resolve_workspaces_table$(workspace#, resolve_user, undo_sp#, oldfreezewriter, wm$flag)
  values (ws#, :new.resolve_user, :new.undo_sp_ver, :new.oldfreezewriter, flag_v) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$RWT_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$RLT_I_TRIG" instead of insert on wmsys.wm$ric_locking_table for each row
declare
  flag_v integer := 0;
  vtid   integer := wmsys.ltUtil.getVtid(:new.pt_owner, :new.pt_name) ;
begin
  insert into wmsys.wm$ric_locking_table$(pt_vtid#, slockno, elockno)
  values (vtid, :new.slockno, :new.elockno) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$RLT_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$RT_I_TRIG" instead of insert on wmsys.wm$ric_table for each row
declare
  flag_v integer := 0;
  vtid1  integer := wmsys.ltUtil.getVtid(:new.ct_owner, :new.ct_name) ;
  vtid2  integer := wmsys.ltUtil.getVtid(:new.pt_owner, :new.pt_name) ;
begin
  flag_v := wmsys.owm_dml_pkg.wm$ric_table$f(:new.my_mode, :new.status) ;

  insert into wmsys.wm$ric_table$(ct_vtid#, pt_vtid#, ric_name, ct_cols, pt_cols, pt_unique_const_name, wm$flag)
  values (vtid1, vtid2, :new.ric_name, :new.ct_cols, :new.pt_cols, :new.pt_unique_const_name, flag_v) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$RT_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$RTT_I_TRIG" instead of insert on wmsys.wm$ric_triggers_table for each row
declare
  flag_v integer := 0;
  vtid1  integer := wmsys.ltUtil.getVtid(:new.pt_owner, :new.pt_name) ;
  vtid2  integer := wmsys.ltUtil.getVtid(:new.ct_owner, :new.ct_name) ;
begin
  insert into wmsys.wm$ric_triggers_table$(pt_vtid#, ct_vtid#, trig#)
  values (vtid1, vtid2, regexp_substr(:new.update_trigger_name, '[[:digit:]]+$')) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$RTT_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$SAV_I_TRIG" instead of insert on wmsys.wm$sysparam_all_values for each row
declare
  flag_v integer := 0;
begin
  flag_v := wmsys.owm_dml_pkg.wm$sysparam_all_values$f(:new.isdefault, :new.hidden) ;

  insert into wmsys.wm$sysparam_all_values$(name, value, wm$flag)
  values (:new.name, :new.value, flag_v) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$SAV_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$UDP_I_TRIG" instead of insert on wmsys.wm$udtrig_dispatch_procs for each row
declare
  flag_v integer := 0;
  vtid   integer := wmsys.ltUtil.getVtid(:new.table_owner_name, :new.table_name) ;
begin
  flag_v := wmsys.owm_dml_pkg.wm$udtrig_dispatch_procs$f(:new.trig_flag) ;

  insert into wmsys.wm$udtrig_dispatch_procs$(vtid#, proc#, wm$flag)
  values (vtid, regexp_substr(:new.dispatcher_name, '[[:digit:]]+$'), flag_v) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$UDP_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$UI_I_TRIG" instead of insert on wmsys.wm$udtrig_info for each row
declare
  flag_v integer := 0;
  vtid   integer := wmsys.ltUtil.getVtid(:new.table_owner_name, :new.table_name) ;
  trig_t integer ;
  u_flag boolean ;
begin
  flag_v := wmsys.owm_dml_pkg.wm$udtrig_info$f(:new.trig_flag, :new.status, :new.internal_type, :new.event_flag) ;

  insert into wmsys.wm$udtrig_info$(trig_owner_name, trig_name, vtid#, proc#, when_clause, description, trig_code, wm$flag)
  values (:new.trig_owner_name, :new.trig_name, vtid, regexp_substr(:new.trig_procedure, '[[:digit:]]+$'),
          :new.when_clause, :new.description, :new.trig_code, flag_v) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$UI_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$UD_U_TRIG" instead of update on wmsys.wm$udtrig_info for each row
declare
  sqlstr  varchar2(32000) ;
  flag_v  integer := 0;
  vtid    integer := wmsys.ltUtil.getVtid(:new.table_owner_name, :new.table_name) ;
  trig_t  integer ;
  u_flag  boolean ;
begin
  if (updating('TRIG_FLAG') or updating('EVENT_FLAG')) then
    flag_v := wmsys.owm_dml_pkg.wm$udtrig_info$f(:new.trig_flag, :new.status, :new.internal_type, :new.event_flag) ;
    sqlstr := sqlstr || ' wm$flag=:1' ;
  end if ;

  if (updating('TRIG_PROCEDURE')) then
    sqlstr := sqlstr || (case when sqlstr is not null then ',' else null end) || ' proc#=:2' ;
  end if;

  if (updating('DESCRIPTION')) then
    sqlstr := sqlstr || (case when sqlstr is not null then ',' else null end) || ' description=:3' ;
  end if;

  if (sqlstr is not null) then
    execute immediate
      'begin
         if (1=2 and (:1 is null or :2 is null or :3 is null or :4 is null or :5 is null)) then
           null ;
         end if;

         update wmsys.wm$udtrig_info$
         set ' || substr(sqlstr, 2) || '
         where trig_owner_name=:4 and trig_name=:5;
       end;' using flag_v, regexp_substr(:new.trig_procedure, '[[:digit:]]+$'), :new.description, :old.trig_owner_name, :old.trig_name ;
  end if ;
end;
/

ALTER TRIGGER "WMSYS"."WM$UD_U_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$VHT_I_TRIG" instead of insert on wmsys.wm$version_hierarchy_table for each row
declare
  flag_v integer := 0;
  ws#    integer := wmsys.ltUtil.getWorkspaceLockId(:new.workspace) ;
begin
  insert into wmsys.wm$version_hierarchy_table$(version, parent_version, workspace#)
  values (:new.version, :new.parent_version, ws#) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$VHT_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$VT_I_TRIG" instead of insert on wmsys.wm$version_table for each row
declare
  flag_v integer := 0;
  ws#1   integer := wmsys.ltUtil.getWorkspaceLockId(:new.workspace) ;
  ws#2   integer := wmsys.ltUtil.getWorkspaceLockId(:new.anc_workspace) ;


  refcount integer := :new.refcount ;
begin
  if (refcount is null) then
    refcount := 0 ;
  end if ;

  insert into wmsys.wm$version_table$(workspace#, anc_workspace#, anc_version, anc_depth, refcount)
  values (ws#1, ws#2, :new.anc_version, :new.anc_depth, refcount) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$VT_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$VET_I_TRIG" instead of insert on wmsys.wm$vt_errors_table for each row
declare
  flag_v integer := 0;
  vtid   integer := wmsys.ltUtil.getVtid(:new.owner, :new.table_name) ;
begin
  flag_v := wmsys.owm_dml_pkg.wm$vt_errors_table$f(:new.status) ;

  insert into wmsys.wm$vt_errors_table$(vtid#, index_type, index_field, error_msg, wm$flag)
  values (vtid, :new.index_type, :new.index_field, :new.error_msg, flag_v) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$VET_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$VET_U_TRIG" instead of update on wmsys.wm$vt_errors_table for each row
declare
  sqlstr  varchar2(32000) ;
  flag_v  integer := 0;
  vtid    integer := wmsys.ltUtil.getVtid(:old.owner, :old.table_name) ;
begin
  if (updating('STATUS')) then
    flag_v := wmsys.owm_dml_pkg.wm$vt_errors_table$f(:new.status) ;
    sqlstr := sqlstr || ' wm$flag=:1' ;
  end if ;

  if (updating('ERROR_MSG')) then
    sqlstr := sqlstr || (case when sqlstr is not null then ',' else null end) || ' error_msg=:2' ;
  end if;

  if (sqlstr is not null) then
    execute immediate
      'begin
         if (1=2 and (:1 is null or :2 is null or :3 is null)) then
           null ;
         end if;

         update wmsys.wm$vt_errors_table$
         set ' || substr(sqlstr, 2) || '
         where vtid#=:3;
       end;' using flag_v, :new.error_msg, vtid ;
  end if ;
end;
/

ALTER TRIGGER "WMSYS"."WM$VET_U_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$WPT_I_TRIG" instead of insert on wmsys.wm$workspace_priv_table for each row
declare
  flag_v integer := 0;
  ws#    integer := wmsys.ltUtil.getWorkspaceLockId(:new.workspace) ;
begin
  flag_v := wmsys.owm_dml_pkg.wm$workspace_priv_table$f(:new.priv, :new.admin) ;

  insert into wmsys.wm$workspace_priv_table$(grantee, workspace#, grantor, wm$flag)
  values (:new.grantee, ws#, :new.grantor, flag_v) ;
end;
/

ALTER TRIGGER "WMSYS"."WM$WPT_I_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$WPT_U_TRIG" instead of update on wmsys.wm$workspace_priv_table for each row
declare
  sqlstr  varchar2(32000) ;
  flag_v  integer := 0;
  ws#     integer := wmsys.ltUtil.getWorkspaceLockId(:old.workspace) ;
begin
  if (updating('ADMIN')) then
    flag_v := wmsys.owm_dml_pkg.wm$workspace_priv_table$f(:new.priv, :new.admin) ;
    sqlstr := sqlstr || (case when sqlstr is not null then ',' else null end) || ' wm$flag=:1' ;
  end if ;

  if (sqlstr is not null) then
    execute immediate
      'begin
         if (1=2 and (:1 is null or :2 is null or :3 is null or :4 is null)) then
           null ;
         end if;

         if (:3 is not null) then
           update wmsys.wm$workspace_priv_table$
           set ' || substr(sqlstr, 2) || '
           where grantee = :2 and
                 workspace# = :3 and
                 bitand(wm$flag, 31) = decode(:4, null, 0, ''U'', 0,
                                                  ''A'', 1, ''M'', 2, ''R'', 3, ''D'', 4, ''C'', 5, ''F'', 6, ''G'', 13,
                                                  ''AA'', 7, ''MA'', 8, ''RA'', 9, ''DA'', 10, ''CA'', 11, ''FA'', 12, ''GA'', 14,
                                                  ''W'', 15) ;
         else
           update wmsys.wm$workspace_priv_table$
           set ' || substr(sqlstr, 2) || '
           where grantee = :2 and
                 workspace# is null and
                 bitand(wm$flag, 31) = decode(:4, null, 0, ''U'', 0,
                                                  ''A'', 1, ''M'', 2, ''R'', 3, ''D'', 4, ''C'', 5, ''F'', 6, ''G'', 13,
                                                  ''AA'', 7, ''MA'', 8, ''RA'', 9, ''DA'', 10, ''CA'', 11, ''FA'', 12, ''GA'', 14,
                                                  ''W'', 15) ;
         end if ;
       end;' using flag_v, :old.grantee, ws#, :old.priv ;
  end if ;
end;
/

ALTER TRIGGER "WMSYS"."WM$WPT_U_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."WM$WPT_D_TRIG" instead of delete on wmsys.wm$workspace_priv_table for each row
declare
  ws#     integer := wmsys.ltUtil.getWorkspaceLockId(:old.workspace) ;
  flag_v  integer := wmsys.owm_dml_pkg.wm$workspace_priv_table$f(:old.priv, null) ;
begin
  if (ws# is not null) then
    delete wmsys.wm$workspace_priv_table$ where grantee=:old.grantee and workspace#=ws# and bitand(wm$flag, 31) = flag_v ;
  else
    delete wmsys.wm$workspace_priv_table$ where grantee=:old.grantee and workspace# is null and bitand(wm$flag, 31) = flag_v ;
  end if ;
end;
/

ALTER TRIGGER "WMSYS"."WM$WPT_D_TRIG" ENABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."NO_VM_DDL" before alter or create or drop or rename or truncate on database
   WHEN ((ora_sysevent in ('ALTER', 'RENAME', 'TRUNCATE') and ora_dict_obj_type in ('INDEX','TABLE')) or
        (ora_sysevent = 'CREATE' and ora_dict_obj_type in ('INDEX', 'PROCEDURE', 'TRIGGER', 'VIEW')) or
        (ora_sysevent = 'DROP' and ora_dict_obj_type in ('INDEX', 'PROCEDURE', 'ROLE', 'TABLE', 'TRIGGER', 'TYPE', 'USER', 'VIEW'))) declare
  validStack  integer ;
begin
  if (sys_context('lt_ctx', 'allowDDLOperation')='true') then
    return ;
  end if ;

  if (sys_context('lt_ctx', 'validStack') is null or sys_context('lt_ctx', 'validStack') != 'YES') then
    validStack := 0 ;
  else
    validStack := 1 ;
  end if ;

  if (ora_sysevent='CREATE') then
    wmsys.ltadm.no_vm_create_proc(ora_dict_obj_type, ora_dict_obj_name, ora_dict_obj_owner, validStack) ;
  elsif (ora_sysevent='DROP') then
    wmsys.ltadm.no_vm_drop_proc(ora_dict_obj_type, ora_dict_obj_name, ora_dict_obj_owner, validStack) ;
  elsif (ora_sysevent in ('ALTER', 'RENAME', 'TRUNCATE')) then
    wmsys.ltadm.no_vm_alter_proc(ora_dict_obj_type, ora_dict_obj_name, ora_dict_obj_owner, validStack) ;
  end if ;
end;
/

ALTER TRIGGER "WMSYS"."NO_VM_DDL" DISABLE;
CREATE OR REPLACE NONEDITIONABLE TRIGGER "WMSYS"."NO_VM_DROP_A" after drop on database  WHEN (ora_dict_obj_type in ('USER')) begin
  wmsys.lt_ctx_pkg.allowDDLOperation('false') ;



end;
/

ALTER TRIGGER "WMSYS"."NO_VM_DROP_A" DISABLE;

BEGIN
DECLARE
ta sys.re$table_alias_list;
vt sys.re$variable_type_list;
BEGIN
ta := sys.re$table_alias_list();
vt := sys.re$variable_type_list();
ta.extend(1);
ta(1) := sys.re$table_alias('TAB','"WM$EVENT_QUEUE_TABLE"');
dbms_rule_imp_obj.import_evaluation_context('"AQ$_WM$EVENT_QUEUE_TABLE_V"', ta, vt, NULL,NULL, 1);
END;
COMMIT;
END;
/


BEGIN
BEGIN
dbms_rule_imp_obj.import_rule_set('"WM$EVENT_QUEUE_N"','"AQ$_WM$EVENT_QUEUE_TABLE_V"',NULL, 1);
END;

COMMIT;
END;
/


BEGIN
BEGIN
dbms_rule_imp_obj.import_rule_set('"WM$EVENT_QUEUE_R"','"AQ$_WM$EVENT_QUEUE_TABLE_V"',NULL, 1);
END;

COMMIT;
END;
/


BEGIN
SYS.DBMS_AQ_IMP_INTERNAL.IMPORT_QUEUE(HEXTORAW('FD9B2213FC4458C3E043B6A9E80A6E64'),'WM$EVENT_QUEUE_TABLE','AQ$_WM$EVENT_QUEUE_TABLE_E',1,0,0,0,0,'exception queue');
COMMIT;
END;
/


BEGIN
SYS.DBMS_AQ_IMP_INTERNAL.IMPORT_QUEUE(HEXTORAW('FD9B2213FC4558C3E043B6A9E80A6E64'),'WM$EVENT_QUEUE_TABLE','WM$EVENT_QUEUE',0,5,0,0,0,'OWM Events Queue');
COMMIT;
END;
/


BEGIN
DECLARE
ta sys.re$table_alias_list;
vt sys.re$variable_type_list;
BEGIN
ta := sys.re$table_alias_list();
vt := sys.re$variable_type_list();
ta.extend(1);
ta(1) := sys.re$table_alias('TAB','"WM$EVENT_QUEUE_TABLE"');
dbms_rule_imp_obj.import_evaluation_context('"AQ$_WM$EVENT_QUEUE_TABLE_V"', ta, vt, NULL,NULL, 1);
END;
COMMIT;
END;
/


BEGIN
BEGIN
dbms_rule_imp_obj.import_rule_set('"WM$EVENT_QUEUE_R"','"AQ$_WM$EVENT_QUEUE_TABLE_V"',NULL, 1);
END;

COMMIT;
END;
/


BEGIN
BEGIN
dbms_rule_imp_obj.import_rule_set('"WM$EVENT_QUEUE_N"','"AQ$_WM$EVENT_QUEUE_TABLE_V"',NULL, 1);
END;

COMMIT;
END;
/

